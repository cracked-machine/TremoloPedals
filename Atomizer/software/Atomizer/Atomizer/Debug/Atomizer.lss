
Atomizer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000081a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000088e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800060  00800060  0000088e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000088e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000008fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007db  00000000  00000000  0000095c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005b9  00000000  00000000  00001137  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004f7  00000000  00000000  000016f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b0  00000000  00000000  00001be8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044e  00000000  00000000  00001d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000392  00000000  00000000  000021e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002578  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	b9 c1       	rjmp	.+882    	; 0x378 <__vector_2>
   6:	aa c0       	rjmp	.+340    	; 0x15c <__vector_3>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	16 c2       	rjmp	.+1068   	; 0x43e <__vector_8>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	3a c1       	rjmp	.+628    	; 0x28a <__vector_10>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	95 c1       	rjmp	.+810    	; 0x344 <__vector_12>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	ea e1       	ldi	r30, 0x1A	; 26
  32:	f8 e0       	ldi	r31, 0x08	; 8
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a0 36       	cpi	r26, 0x60	; 96
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	a0 e6       	ldi	r26, 0x60	; 96
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	af 36       	cpi	r26, 0x6F	; 111
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	57 d0       	rcall	.+174    	; 0x100 <main>
  52:	e1 c3       	rjmp	.+1986   	; 0x816 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <resetPWM>:
/// FUNCTIONS
/////////////////////////

void resetPWM() {
	
	OCR0A=0x81;		// low duty;	0x42 (66) - 0x81 (129)
  56:	81 e8       	ldi	r24, 0x81	; 129
  58:	89 bd       	out	0x29, r24	; 41
	OCR0B=0x41;		// high duty;	0x01 (1) - 0x41 (65)
  5a:	81 e4       	ldi	r24, 0x41	; 65
  5c:	88 bd       	out	0x28, r24	; 40
  5e:	08 95       	ret

00000060 <setModeIndicator>:
}

void setModeIndicator(CONTROLMODE p_currentMode) 
{
	currentMode = p_currentMode;
  60:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_end>
	switch(p_currentMode)
  64:	81 30       	cpi	r24, 0x01	; 1
  66:	39 f0       	breq	.+14     	; 0x76 <setModeIndicator+0x16>
  68:	18 f0       	brcs	.+6      	; 0x70 <setModeIndicator+0x10>
  6a:	82 30       	cpi	r24, 0x02	; 2
  6c:	39 f0       	breq	.+14     	; 0x7c <setModeIndicator+0x1c>
  6e:	08 95       	ret
	{
		case NORMAL:
			// Tri-State mode LED pin (LEDS off)
			DDRB &= ~(1<<DDB2);
  70:	ba 98       	cbi	0x17, 2	; 23
			PORTB &= ~(1<<PB2);
  72:	c2 98       	cbi	0x18, 2	; 24
			break;
  74:	08 95       	ret
			
		case SKEW:
			// Logic one to mode LED pin 
			DDRB |= (1<<DDB2);
  76:	ba 9a       	sbi	0x17, 2	; 23
			PORTB |= (1<<PB2);
  78:	c2 9a       	sbi	0x18, 2	; 24
			break;
  7a:	08 95       	ret
		
		case SWEEP:
			// Logic zero to mode LED pin 
			DDRB |= (1<<DDB2);
  7c:	ba 9a       	sbi	0x17, 2	; 23
			PORTB &= ~(1<<PB2);
  7e:	c2 98       	cbi	0x18, 2	; 24
  80:	08 95       	ret

00000082 <TimerModeEnable>:
	}
}

void TimerModeEnable(CONTROLMODE p_currentMode)
{
	currentMode = p_currentMode;
  82:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_end>
	cli();
  86:	f8 94       	cli
	
	switch(p_currentMode)
  88:	81 30       	cpi	r24, 0x01	; 1
  8a:	a1 f0       	breq	.+40     	; 0xb4 <TimerModeEnable+0x32>
  8c:	18 f0       	brcs	.+6      	; 0x94 <TimerModeEnable+0x12>
  8e:	82 30       	cpi	r24, 0x02	; 2
  90:	31 f1       	breq	.+76     	; 0xde <TimerModeEnable+0x5c>
  92:	34 c0       	rjmp	.+104    	; 0xfc <TimerModeEnable+0x7a>
	{
		case NORMAL:
			
			// disable Timer0 output to OC0B (PB1)
			TCCR0A = 0;
  94:	1a bc       	out	0x2a, r1	; 42
			///////////////////////////////////
			//// Timer1 CTC  setup
			///////////////////////////////////

			// Timer/Counter1 is reset to $00 after a compare match with OCR1C register value 
			TCCR1 |= (1<<CTC1);
  96:	80 b7       	in	r24, 0x30	; 48
  98:	80 68       	ori	r24, 0x80	; 128
  9a:	80 bf       	out	0x30, r24	; 48
	
			// enable toggle output on OC1A (PB1) output line.
			TCCR1 |= (0<<COM1A1) | (1<<COM1A0);
  9c:	80 b7       	in	r24, 0x30	; 48
  9e:	80 61       	ori	r24, 0x10	; 16
  a0:	80 bf       	out	0x30, r24	; 48
			
			// Timer/Counter1 Prescale Select PCK/2048
			TCCR1 |= (1<<CS13) | (1<<CS12) | (0<<CS11) | (0<<CS10);
  a2:	80 b7       	in	r24, 0x30	; 48
  a4:	8c 60       	ori	r24, 0x0C	; 12
  a6:	80 bf       	out	0x30, r24	; 48
	
			TIMSK |= (1<<OCIE1A);
  a8:	89 b7       	in	r24, 0x39	; 57
  aa:	80 64       	ori	r24, 0x40	; 64
  ac:	89 bf       	out	0x39, r24	; 57
	
			OCR1C =  10;
  ae:	8a e0       	ldi	r24, 0x0A	; 10
  b0:	8d bd       	out	0x2d, r24	; 45
	
			break;
  b2:	24 c0       	rjmp	.+72     	; 0xfc <TimerModeEnable+0x7a>
			
		case SKEW:
			
			// disable Timer1 output to OC1A (PB1)
			TCCR1 = 0;
  b4:	10 be       	out	0x30, r1	; 48
			///////////////////////////////////
			//// Timer0 phase PWM setup
			/////////////////////////////////
			
			//Normal port operation, OC0A disconnected
			TCCR0A |= (0<<COM0A1) | (0<<COM0A0);
  b6:	8a b5       	in	r24, 0x2a	; 42
  b8:	8a bd       	out	0x2a, r24	; 42
			// Enable OC0B (PB1) output. (Clear OC0B on Compare Match, set OC0B at BOTTOM - non-inverting mode)
			TCCR0A |= (1<<COM0B1) | (0<<COM0B0);
  ba:	8a b5       	in	r24, 0x2a	; 42
  bc:	80 62       	ori	r24, 0x20	; 32
  be:	8a bd       	out	0x2a, r24	; 42
			// Mode 5: phase PWM
			TCCR0A |= (0<<WGM01) | (1<<WGM00);
  c0:	8a b5       	in	r24, 0x2a	; 42
  c2:	81 60       	ori	r24, 0x01	; 1
  c4:	8a bd       	out	0x2a, r24	; 42
			TCCR0B |= (1<<WGM02);
  c6:	83 b7       	in	r24, 0x33	; 51
  c8:	88 60       	ori	r24, 0x08	; 8
  ca:	83 bf       	out	0x33, r24	; 51
			// 1024 Prescaler
			TCCR0B |= (1<<CS02) | (0<<CS01) | (1<<CS00);
  cc:	83 b7       	in	r24, 0x33	; 51
  ce:	85 60       	ori	r24, 0x05	; 5
  d0:	83 bf       	out	0x33, r24	; 51
	
			// Timer/Counter0 Output Compare Match A Interrupt Enable
			TIMSK |= (1<<OCIE0A);
  d2:	89 b7       	in	r24, 0x39	; 57
  d4:	80 61       	ori	r24, 0x10	; 16
  d6:	89 bf       	out	0x39, r24	; 57
	
			TCNT0=0x00;
  d8:	12 be       	out	0x32, r1	; 50
			resetPWM();
  da:	bd df       	rcall	.-134    	; 0x56 <resetPWM>
			
			break;
  dc:	0f c0       	rjmp	.+30     	; 0xfc <TimerModeEnable+0x7a>
		
		case SWEEP:
		
			// disable Timer0 output to OC0B (PB1)
			TCCR0A = 0;
  de:	1a bc       	out	0x2a, r1	; 42
			///////////////////////////////////
			//// Timer1 CTC  setup
			///////////////////////////////////

			// Timer/Counter1 is reset to $00 after a compare match with OCR1C register value
			TCCR1 |= (1<<CTC1);
  e0:	80 b7       	in	r24, 0x30	; 48
  e2:	80 68       	ori	r24, 0x80	; 128
  e4:	80 bf       	out	0x30, r24	; 48
			
			// enable toggle output on OC1A (PB1) output line.
			TCCR1 |= (0<<COM1A1) | (1<<COM1A0);
  e6:	80 b7       	in	r24, 0x30	; 48
  e8:	80 61       	ori	r24, 0x10	; 16
  ea:	80 bf       	out	0x30, r24	; 48
			
			// Timer/Counter1 Prescale Select PCK/2048
			//TCCR1 |= (0<<CS13) | (1<<CS12) | (1<<CS11) | (1<<CS10); // /64 
			//TCCR1 |= (1<<CS13) | (0<<CS12) | (0<<CS11) | (0<<CS10); // /128
			TCCR1 |= (1<<CS13) | (0<<CS12) | (0<<CS11) | (1<<CS10); // /256
  ec:	80 b7       	in	r24, 0x30	; 48
  ee:	89 60       	ori	r24, 0x09	; 9
  f0:	80 bf       	out	0x30, r24	; 48
			//TCCR1 |= (1<<CS13) | (0<<CS12) | (1<<CS11) | (0<<CS10); // /512
			//TCCR1 |= (1<<CS13) | (0<<CS12) | (1<<CS11) | (1<<CS10); // /1024
			//TCCR1 |= (1<<CS13) | (1<<CS12) | (0<<CS11) | (0<<CS10); // /2048
			
			TIMSK |= (1<<OCIE1A);
  f2:	89 b7       	in	r24, 0x39	; 57
  f4:	80 64       	ori	r24, 0x40	; 64
  f6:	89 bf       	out	0x39, r24	; 57
			
			OCR1C =  10;
  f8:	8a e0       	ldi	r24, 0x0A	; 10
  fa:	8d bd       	out	0x2d, r24	; 45
			
			break;
			*/
	}
	
	sei();	
  fc:	78 94       	sei
  fe:	08 95       	ret

00000100 <main>:
static __inline__ void clock_prescale_set(clock_div_t) __attribute__((__always_inline__));

void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 100:	94 e0       	ldi	r25, 0x04	; 4
 102:	80 e8       	ldi	r24, 0x80	; 128
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	f8 94       	cli
 108:	86 bd       	out	0x26, r24	; 38
 10a:	96 bd       	out	0x26, r25	; 38
 10c:	0f be       	out	0x3f, r0	; 63
	// ** clock_div_16 = 4,
	// clock_div_32 = 5,
	
	clock_prescale_set(4);
	
	cli();
 10e:	f8 94       	cli
	////////////////////////
	
	
	
	// clock signal (output)
	PORTB |= (1<<PB1);
 110:	c1 9a       	sbi	0x18, 1	; 24
	DDRB |= (1<<DDB1);
 112:	b9 9a       	sbi	0x17, 1	; 23
	
	// ADC3+4 (input)
	PORTB &= ~(1<<PB3);
 114:	c3 98       	cbi	0x18, 3	; 24
	DDRB &= ~(1<<DDB3);
 116:	bb 98       	cbi	0x17, 3	; 23
	PORTB &= ~(1<<PB4);
 118:	c4 98       	cbi	0x18, 4	; 24
	DDRB &= ~(1<<DDB4);
 11a:	bc 98       	cbi	0x17, 4	; 23
	///////////////////////////////////
	//// PCINT setup
	///////////////////////////////////
	
	// set PB0 to input
	DDRB &= ~(1<<DDB0);
 11c:	b8 98       	cbi	0x17, 0	; 23
	// set PB0 pull-up
	PORTB |= 1<<PB0;
 11e:	c0 9a       	sbi	0x18, 0	; 24
	
	// enable PC Interrupts
	GIMSK |= (1<<PCIE);
 120:	8b b7       	in	r24, 0x3b	; 59
 122:	80 62       	ori	r24, 0x20	; 32
 124:	8b bf       	out	0x3b, r24	; 59
	// enable PCINT0 interrupt
	PCMSK |= (1<<PCINT0);
 126:	a8 9a       	sbi	0x15, 0	; 21
		
	setModeIndicator(currentMode = NORMAL);
 128:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_end>
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	98 df       	rcall	.-208    	; 0x60 <setModeIndicator>
	
	TimerModeEnable(NORMAL);
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	a7 df       	rcall	.-178    	; 0x82 <TimerModeEnable>
	//// ADC setup 
	///////////////////////////////////

	
	// VCC used as Voltage Reference, disconnected from PB0 (AREF).
	ADMUX &= ~((1<<REFS0) | (1<<REFS1));
 134:	87 b1       	in	r24, 0x07	; 7
 136:	8f 73       	andi	r24, 0x3F	; 63
 138:	87 b9       	out	0x07, r24	; 7
	
	// ADC Right Adjust Result
	ADMUX &= ~((1<<ADLAR));
 13a:	3d 98       	cbi	0x07, 5	; 7
	// ADC Left Adjust Result
	//ADMUX |= _ADCLA;
	
	// ADC3 selected by default
	ADMUX |= _ADC3EN;
 13c:	87 b1       	in	r24, 0x07	; 7
 13e:	83 60       	ori	r24, 0x03	; 3
 140:	87 b9       	out	0x07, r24	; 7
	
	// ADC enable,  Auto Trigger Enable,  Interrupt Enable	
	ADCSRA |= (1<<ADATE) | (1<<ADIE) | (1<<ADEN);
 142:	86 b1       	in	r24, 0x06	; 6
 144:	88 6a       	ori	r24, 0xA8	; 168
 146:	86 b9       	out	0x06, r24	; 6
	
	// ADC prescaler /128 - this is fast enough for our purposes, NOTE: /2 prescaler blocks WDT_vect 
	ADCSRA |= (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2);
 148:	86 b1       	in	r24, 0x06	; 6
 14a:	87 60       	ori	r24, 0x07	; 7
 14c:	86 b9       	out	0x06, r24	; 6

	// Single Ended conversions, Auto Trigger Source = Free Running mode
	ADCSRB = 0;
 14e:	13 b8       	out	0x03, r1	; 3
	
	// ADC Start Conversion
	ADCSRA |= (1<<ADSC);
 150:	36 9a       	sbi	0x06, 6	; 6
	
	// setup watchdog to interupt every 1sec
	WDTCR |= (1<<WDE) | (1<<WDIE);
 152:	81 b5       	in	r24, 0x21	; 33
 154:	88 64       	ori	r24, 0x48	; 72
 156:	81 bd       	out	0x21, r24	; 33
	
	sei();
 158:	78 94       	sei
 15a:	ff cf       	rjmp	.-2      	; 0x15a <main+0x5a>

0000015c <__vector_3>:
//////////////////////////////
///// INTERRUPTS
//////////////////////////////

ISR (TIMER1_COMPA_vect)
{
 15c:	1f 92       	push	r1
 15e:	0f 92       	push	r0
 160:	0f b6       	in	r0, 0x3f	; 63
 162:	0f 92       	push	r0
 164:	11 24       	eor	r1, r1
 166:	cf 92       	push	r12
 168:	df 92       	push	r13
 16a:	ef 92       	push	r14
 16c:	ff 92       	push	r15
 16e:	2f 93       	push	r18
 170:	3f 93       	push	r19
 172:	4f 93       	push	r20
 174:	5f 93       	push	r21
 176:	6f 93       	push	r22
 178:	7f 93       	push	r23
 17a:	8f 93       	push	r24
 17c:	9f 93       	push	r25
 17e:	af 93       	push	r26
 180:	bf 93       	push	r27
 182:	ef 93       	push	r30
 184:	ff 93       	push	r31
	// Normal/SWEEP mode freq adjust
	switch(currentMode)
 186:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_end>
 18a:	88 23       	and	r24, r24
 18c:	19 f0       	breq	.+6      	; 0x194 <__vector_3+0x38>
 18e:	82 30       	cpi	r24, 0x02	; 2
 190:	b1 f0       	breq	.+44     	; 0x1be <__vector_3+0x62>
 192:	66 c0       	rjmp	.+204    	; 0x260 <__stack+0x1>
	{
		// as the pot is turned CW the clock duty will decrease, a duty less than 2 is bad
		case NORMAL:
			if((upperpot / 16) < 2)
 194:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <upperpot>
 198:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <upperpot+0x1>
 19c:	80 97       	sbiw	r24, 0x20	; 32
 19e:	18 f4       	brcc	.+6      	; 0x1a6 <__vector_3+0x4a>
			{
				OCR1C = 2;
 1a0:	82 e0       	ldi	r24, 0x02	; 2
 1a2:	8d bd       	out	0x2d, r24	; 45
 1a4:	5d c0       	rjmp	.+186    	; 0x260 <__stack+0x1>
			}
			else
			{
				OCR1C = (upperpot / 16);
 1a6:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <upperpot>
 1aa:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <upperpot+0x1>
 1ae:	92 95       	swap	r25
 1b0:	82 95       	swap	r24
 1b2:	8f 70       	andi	r24, 0x0F	; 15
 1b4:	89 27       	eor	r24, r25
 1b6:	9f 70       	andi	r25, 0x0F	; 15
 1b8:	89 27       	eor	r24, r25
 1ba:	8d bd       	out	0x2d, r24	; 45
 1bc:	51 c0       	rjmp	.+162    	; 0x260 <__stack+0x1>
			
			
			break;
		case SWEEP:
			//prevents MCU reset
			if(upperpot < 50) 
 1be:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <upperpot>
 1c2:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <upperpot+0x1>
 1c6:	c2 97       	sbiw	r24, 0x32	; 50
 1c8:	30 f4       	brcc	.+12     	; 0x1d6 <__vector_3+0x7a>
			{
				upperpot = 100;
 1ca:	84 e6       	ldi	r24, 0x64	; 100
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <upperpot+0x1>
 1d2:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <upperpot>
			}
			
			OCR1C= (upperpot / (lowerpot/16)) * weight;
 1d6:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <upperpot>
 1da:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <upperpot+0x1>
 1de:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <lowerpot>
 1e2:	70 91 62 00 	lds	r23, 0x0062	; 0x800062 <lowerpot+0x1>
 1e6:	c0 90 6b 00 	lds	r12, 0x006B	; 0x80006b <weight>
 1ea:	d0 90 6c 00 	lds	r13, 0x006C	; 0x80006c <weight+0x1>
 1ee:	e0 90 6d 00 	lds	r14, 0x006D	; 0x80006d <weight+0x2>
 1f2:	f0 90 6e 00 	lds	r15, 0x006E	; 0x80006e <weight+0x3>
 1f6:	72 95       	swap	r23
 1f8:	62 95       	swap	r22
 1fa:	6f 70       	andi	r22, 0x0F	; 15
 1fc:	67 27       	eor	r22, r23
 1fe:	7f 70       	andi	r23, 0x0F	; 15
 200:	67 27       	eor	r22, r23
 202:	f5 d2       	rcall	.+1514   	; 0x7ee <__udivmodhi4>
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	f9 d1       	rcall	.+1010   	; 0x5fc <__floatunsisf>
 20a:	a7 01       	movw	r20, r14
 20c:	96 01       	movw	r18, r12
 20e:	84 d2       	rcall	.+1288   	; 0x718 <__mulsf3>
 210:	c9 d1       	rcall	.+914    	; 0x5a4 <__fixunssfsi>
 212:	6d bd       	out	0x2d, r22	; 45
			weight=weight+0.5;
 214:	60 91 6b 00 	lds	r22, 0x006B	; 0x80006b <weight>
 218:	70 91 6c 00 	lds	r23, 0x006C	; 0x80006c <weight+0x1>
 21c:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <weight+0x2>
 220:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <weight+0x3>
 224:	20 e0       	ldi	r18, 0x00	; 0
 226:	30 e0       	ldi	r19, 0x00	; 0
 228:	40 e0       	ldi	r20, 0x00	; 0
 22a:	5f e3       	ldi	r21, 0x3F	; 63
 22c:	57 d1       	rcall	.+686    	; 0x4dc <__addsf3>
 22e:	60 93 6b 00 	sts	0x006B, r22	; 0x80006b <weight>
 232:	70 93 6c 00 	sts	0x006C, r23	; 0x80006c <weight+0x1>
 236:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <weight+0x2>
 23a:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <weight+0x3>
			if (OCR1C > (upperpot))
 23e:	8d b5       	in	r24, 0x2d	; 45
 240:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <upperpot>
 244:	30 91 64 00 	lds	r19, 0x0064	; 0x800064 <upperpot+0x1>
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	28 17       	cp	r18, r24
 24c:	39 07       	cpc	r19, r25
 24e:	40 f4       	brcc	.+16     	; 0x260 <__stack+0x1>
			{
				weight = 0;
 250:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <weight>
 254:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <weight+0x1>
 258:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <weight+0x2>
 25c:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <weight+0x3>
			break;
		*/
	}
			
	
}
 260:	ff 91       	pop	r31
 262:	ef 91       	pop	r30
 264:	bf 91       	pop	r27
 266:	af 91       	pop	r26
 268:	9f 91       	pop	r25
 26a:	8f 91       	pop	r24
 26c:	7f 91       	pop	r23
 26e:	6f 91       	pop	r22
 270:	5f 91       	pop	r21
 272:	4f 91       	pop	r20
 274:	3f 91       	pop	r19
 276:	2f 91       	pop	r18
 278:	ff 90       	pop	r15
 27a:	ef 90       	pop	r14
 27c:	df 90       	pop	r13
 27e:	cf 90       	pop	r12
 280:	0f 90       	pop	r0
 282:	0f be       	out	0x3f, r0	; 63
 284:	0f 90       	pop	r0
 286:	1f 90       	pop	r1
 288:	18 95       	reti

0000028a <__vector_10>:

ISR (TIMER0_COMPA_vect)
{
 28a:	1f 92       	push	r1
 28c:	0f 92       	push	r0
 28e:	0f b6       	in	r0, 0x3f	; 63
 290:	0f 92       	push	r0
 292:	11 24       	eor	r1, r1
 294:	2f 93       	push	r18
 296:	3f 93       	push	r19
 298:	8f 93       	push	r24
 29a:	9f 93       	push	r25
	
	switch(currentMode)
 29c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_end>
 2a0:	81 30       	cpi	r24, 0x01	; 1
 2a2:	09 f0       	breq	.+2      	; 0x2a6 <__vector_10+0x1c>
 2a4:	46 c0       	rjmp	.+140    	; 0x332 <__vector_10+0xa8>
		// SKEW mode: user can control both duties of timer PWM (translates to tremolo PWM)
		case SKEW:
			// Skew mode freq adjust
	
			// update high duty (upperpot mapped 10bit -> 8Bit)
			if((upperpot / 16) > (lowerpot / 16)) 
 2a6:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <upperpot>
 2aa:	30 91 64 00 	lds	r19, 0x0064	; 0x800064 <upperpot+0x1>
 2ae:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <lowerpot>
 2b2:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <lowerpot+0x1>
 2b6:	32 95       	swap	r19
 2b8:	22 95       	swap	r18
 2ba:	2f 70       	andi	r18, 0x0F	; 15
 2bc:	23 27       	eor	r18, r19
 2be:	3f 70       	andi	r19, 0x0F	; 15
 2c0:	23 27       	eor	r18, r19
 2c2:	92 95       	swap	r25
 2c4:	82 95       	swap	r24
 2c6:	8f 70       	andi	r24, 0x0F	; 15
 2c8:	89 27       	eor	r24, r25
 2ca:	9f 70       	andi	r25, 0x0F	; 15
 2cc:	89 27       	eor	r24, r25
 2ce:	82 17       	cp	r24, r18
 2d0:	93 07       	cpc	r25, r19
 2d2:	60 f0       	brcs	.+24     	; 0x2ec <__vector_10+0x62>
			{
				// upper pot cannot be more than lower pot
			}
			else 
			{
				OCR0B=0x1 + (upperpot / 16);
 2d4:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <upperpot>
 2d8:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <upperpot+0x1>
 2dc:	92 95       	swap	r25
 2de:	82 95       	swap	r24
 2e0:	8f 70       	andi	r24, 0x0F	; 15
 2e2:	89 27       	eor	r24, r25
 2e4:	9f 70       	andi	r25, 0x0F	; 15
 2e6:	89 27       	eor	r24, r25
 2e8:	8f 5f       	subi	r24, 0xFF	; 255
 2ea:	88 bd       	out	0x28, r24	; 40
			}
	
	
			// update low duty (lowerpot mapped 10bit -> 8Bit)
			if((lowerpot / 16) < (upperpot / 16)) 
 2ec:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <lowerpot>
 2f0:	30 91 62 00 	lds	r19, 0x0062	; 0x800062 <lowerpot+0x1>
 2f4:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <upperpot>
 2f8:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <upperpot+0x1>
 2fc:	32 95       	swap	r19
 2fe:	22 95       	swap	r18
 300:	2f 70       	andi	r18, 0x0F	; 15
 302:	23 27       	eor	r18, r19
 304:	3f 70       	andi	r19, 0x0F	; 15
 306:	23 27       	eor	r18, r19
 308:	92 95       	swap	r25
 30a:	82 95       	swap	r24
 30c:	8f 70       	andi	r24, 0x0F	; 15
 30e:	89 27       	eor	r24, r25
 310:	9f 70       	andi	r25, 0x0F	; 15
 312:	89 27       	eor	r24, r25
 314:	28 17       	cp	r18, r24
 316:	39 07       	cpc	r19, r25
 318:	60 f0       	brcs	.+24     	; 0x332 <__vector_10+0xa8>
			{
				// lower pot cannot be less than higher pot
			}
			else 
			{
				OCR0A=0x1 + (lowerpot / 16);
 31a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <lowerpot>
 31e:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <lowerpot+0x1>
 322:	92 95       	swap	r25
 324:	82 95       	swap	r24
 326:	8f 70       	andi	r24, 0x0F	; 15
 328:	89 27       	eor	r24, r25
 32a:	9f 70       	andi	r25, 0x0F	; 15
 32c:	89 27       	eor	r24, r25
 32e:	8f 5f       	subi	r24, 0xFF	; 255
 330:	89 bd       	out	0x29, r24	; 41
			break;
	
	}
	

}
 332:	9f 91       	pop	r25
 334:	8f 91       	pop	r24
 336:	3f 91       	pop	r19
 338:	2f 91       	pop	r18
 33a:	0f 90       	pop	r0
 33c:	0f be       	out	0x3f, r0	; 63
 33e:	0f 90       	pop	r0
 340:	1f 90       	pop	r1
 342:	18 95       	reti

00000344 <__vector_12>:

ISR (WDT_vect)
{
 344:	1f 92       	push	r1
 346:	0f 92       	push	r0
 348:	0f b6       	in	r0, 0x3f	; 63
 34a:	0f 92       	push	r0
 34c:	11 24       	eor	r1, r1
 34e:	8f 93       	push	r24
 350:	9f 93       	push	r25
	// increment the counter
	wdcounter++;
 352:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <wdcounter>
 356:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <wdcounter+0x1>
 35a:	01 96       	adiw	r24, 0x01	; 1
 35c:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <wdcounter+0x1>
 360:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <wdcounter>
	// re-enable the WDG interrupt to prevent device reset.
	WDTCR |= (1<<WDIE);
 364:	81 b5       	in	r24, 0x21	; 33
 366:	80 64       	ori	r24, 0x40	; 64
 368:	81 bd       	out	0x21, r24	; 33
}
 36a:	9f 91       	pop	r25
 36c:	8f 91       	pop	r24
 36e:	0f 90       	pop	r0
 370:	0f be       	out	0x3f, r0	; 63
 372:	0f 90       	pop	r0
 374:	1f 90       	pop	r1
 376:	18 95       	reti

00000378 <__vector_2>:

ISR (PCINT0_vect)
{
 378:	1f 92       	push	r1
 37a:	0f 92       	push	r0
 37c:	0f b6       	in	r0, 0x3f	; 63
 37e:	0f 92       	push	r0
 380:	11 24       	eor	r1, r1
 382:	cf 92       	push	r12
 384:	df 92       	push	r13
 386:	ef 92       	push	r14
 388:	ff 92       	push	r15
 38a:	2f 93       	push	r18
 38c:	3f 93       	push	r19
 38e:	4f 93       	push	r20
 390:	5f 93       	push	r21
 392:	6f 93       	push	r22
 394:	7f 93       	push	r23
 396:	8f 93       	push	r24
 398:	9f 93       	push	r25
 39a:	af 93       	push	r26
 39c:	bf 93       	push	r27
 39e:	ef 93       	push	r30
 3a0:	ff 93       	push	r31
	// check for bounce
	uint32_t interrupt_time = wdcounter;
 3a2:	c0 90 69 00 	lds	r12, 0x0069	; 0x800069 <wdcounter>
 3a6:	d0 90 6a 00 	lds	r13, 0x006A	; 0x80006a <wdcounter+0x1>
 3aa:	e1 2c       	mov	r14, r1
 3ac:	f1 2c       	mov	r15, r1
	if (interrupt_time - pd0_last_interrupt_time > DEBOUNCE_DELAY) 
 3ae:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <pd0_last_interrupt_time>
 3b2:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <pd0_last_interrupt_time+0x1>
 3b6:	a0 91 67 00 	lds	r26, 0x0067	; 0x800067 <pd0_last_interrupt_time+0x2>
 3ba:	b0 91 68 00 	lds	r27, 0x0068	; 0x800068 <pd0_last_interrupt_time+0x3>
 3be:	a7 01       	movw	r20, r14
 3c0:	96 01       	movw	r18, r12
 3c2:	28 1b       	sub	r18, r24
 3c4:	39 0b       	sbc	r19, r25
 3c6:	4a 0b       	sbc	r20, r26
 3c8:	5b 0b       	sbc	r21, r27
 3ca:	2d 33       	cpi	r18, 0x3D	; 61
 3cc:	31 05       	cpc	r19, r1
 3ce:	41 05       	cpc	r20, r1
 3d0:	51 05       	cpc	r21, r1
 3d2:	00 f1       	brcs	.+64     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
	{
		// toggle the control mode
		switch(currentMode) 
 3d4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_end>
 3d8:	81 30       	cpi	r24, 0x01	; 1
 3da:	49 f0       	breq	.+18     	; 0x3ee <__vector_2+0x76>
 3dc:	18 f0       	brcs	.+6      	; 0x3e4 <__vector_2+0x6c>
 3de:	82 30       	cpi	r24, 0x02	; 2
 3e0:	61 f0       	breq	.+24     	; 0x3fa <__vector_2+0x82>
 3e2:	10 c0       	rjmp	.+32     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
		{
			case NORMAL:
				
				TimerModeEnable(SKEW);
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	4d de       	rcall	.-870    	; 0x82 <TimerModeEnable>
				setModeIndicator(SKEW);
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	3a de       	rcall	.-908    	; 0x60 <setModeIndicator>

				break;
 3ec:	0b c0       	rjmp	.+22     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>

			case SKEW:
				
				setModeIndicator(SWEEP);
 3ee:	82 e0       	ldi	r24, 0x02	; 2
 3f0:	37 de       	rcall	.-914    	; 0x60 <setModeIndicator>
				TimerModeEnable(SWEEP);
 3f2:	82 e0       	ldi	r24, 0x02	; 2
 3f4:	46 de       	rcall	.-884    	; 0x82 <TimerModeEnable>
				resetPWM();
 3f6:	2f de       	rcall	.-930    	; 0x56 <resetPWM>
				break;	
 3f8:	05 c0       	rjmp	.+10     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>

			case SWEEP:
				
				setModeIndicator(NORMAL);
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	31 de       	rcall	.-926    	; 0x60 <setModeIndicator>
				TimerModeEnable(NORMAL);
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	40 de       	rcall	.-896    	; 0x82 <TimerModeEnable>
				resetPWM();
 402:	29 de       	rcall	.-942    	; 0x56 <resetPWM>
			case FADE:
				break;
			*/
		}
		// store the tick of the last successful press
		pd0_last_interrupt_time = interrupt_time;
 404:	c0 92 65 00 	sts	0x0065, r12	; 0x800065 <pd0_last_interrupt_time>
 408:	d0 92 66 00 	sts	0x0066, r13	; 0x800066 <pd0_last_interrupt_time+0x1>
 40c:	e0 92 67 00 	sts	0x0067, r14	; 0x800067 <pd0_last_interrupt_time+0x2>
 410:	f0 92 68 00 	sts	0x0068, r15	; 0x800068 <pd0_last_interrupt_time+0x3>
	
	}
}
 414:	ff 91       	pop	r31
 416:	ef 91       	pop	r30
 418:	bf 91       	pop	r27
 41a:	af 91       	pop	r26
 41c:	9f 91       	pop	r25
 41e:	8f 91       	pop	r24
 420:	7f 91       	pop	r23
 422:	6f 91       	pop	r22
 424:	5f 91       	pop	r21
 426:	4f 91       	pop	r20
 428:	3f 91       	pop	r19
 42a:	2f 91       	pop	r18
 42c:	ff 90       	pop	r15
 42e:	ef 90       	pop	r14
 430:	df 90       	pop	r13
 432:	cf 90       	pop	r12
 434:	0f 90       	pop	r0
 436:	0f be       	out	0x3f, r0	; 63
 438:	0f 90       	pop	r0
 43a:	1f 90       	pop	r1
 43c:	18 95       	reti

0000043e <__vector_8>:

ISR (ADC_vect)
{
 43e:	1f 92       	push	r1
 440:	0f 92       	push	r0
 442:	0f b6       	in	r0, 0x3f	; 63
 444:	0f 92       	push	r0
 446:	11 24       	eor	r1, r1
 448:	2f 93       	push	r18
 44a:	3f 93       	push	r19
 44c:	8f 93       	push	r24
 44e:	9f 93       	push	r25
	// 1.check current adc mux channel
	// 2.read ADC result
	// 3.enable the next contiguous mux channel
	
	switch(ADMUX) {
 450:	87 b1       	in	r24, 0x07	; 7
 452:	82 30       	cpi	r24, 0x02	; 2
 454:	19 f0       	breq	.+6      	; 0x45c <__vector_8+0x1e>
 456:	83 30       	cpi	r24, 0x03	; 3
 458:	e9 f0       	breq	.+58     	; 0x494 <__vector_8+0x56>
 45a:	35 c0       	rjmp	.+106    	; 0x4c6 <__vector_8+0x88>
		
		// if ADLAR bit set, use switch case mask '_ADCLA | _ADCXEN'
		// if ADLAR bit cleared, use switch case mask '_ADCXEN'
		
		case _ADC2EN:
		upperpot = ADCL;				// read 8 LSB
 45c:	84 b1       	in	r24, 0x04	; 4
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <upperpot+0x1>
 464:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <upperpot>
		upperpot += ADCH << 8;		// read 2 MSB, shift them left 8 positions and add to LSB. Result = 2MSB + 8LSB
 468:	95 b1       	in	r25, 0x05	; 5
 46a:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <upperpot>
 46e:	30 91 64 00 	lds	r19, 0x0064	; 0x800064 <upperpot+0x1>
 472:	89 2f       	mov	r24, r25
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	98 2f       	mov	r25, r24
 478:	88 27       	eor	r24, r24
 47a:	82 0f       	add	r24, r18
 47c:	93 1f       	adc	r25, r19
 47e:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <upperpot+0x1>
 482:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <upperpot>
		ADMUX &= _ADCLA | _ADC0EN;		//  clear MUX bits whilst retaining ADC Left Adjust Result
 486:	87 b1       	in	r24, 0x07	; 7
 488:	80 72       	andi	r24, 0x20	; 32
 48a:	87 b9       	out	0x07, r24	; 7
		ADMUX |= _ADC3EN;				// set ADC3 for next check
 48c:	87 b1       	in	r24, 0x07	; 7
 48e:	83 60       	ori	r24, 0x03	; 3
 490:	87 b9       	out	0x07, r24	; 7
		break;
 492:	19 c0       	rjmp	.+50     	; 0x4c6 <__vector_8+0x88>
		
		case _ADC3EN:
		lowerpot = ADCL;				// read 8 LSB
 494:	84 b1       	in	r24, 0x04	; 4
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <lowerpot+0x1>
 49c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <lowerpot>
		lowerpot += ADCH << 8;		// read 2 MSB, shift them left 8 positions and add to LSB. Result = 2MSB + 8LSB
 4a0:	95 b1       	in	r25, 0x05	; 5
 4a2:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <lowerpot>
 4a6:	30 91 62 00 	lds	r19, 0x0062	; 0x800062 <lowerpot+0x1>
 4aa:	89 2f       	mov	r24, r25
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	98 2f       	mov	r25, r24
 4b0:	88 27       	eor	r24, r24
 4b2:	82 0f       	add	r24, r18
 4b4:	93 1f       	adc	r25, r19
 4b6:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <lowerpot+0x1>
 4ba:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <lowerpot>
		ADMUX &= _ADCLA | _ADC0EN;		// clear MUX bits whilst retaining ADC Left Adjust Result
 4be:	87 b1       	in	r24, 0x07	; 7
 4c0:	80 72       	andi	r24, 0x20	; 32
 4c2:	87 b9       	out	0x07, r24	; 7
		ADMUX |= _ADC2EN;				// set ADC2 for check
 4c4:	39 9a       	sbi	0x07, 1	; 7
		break;
		
	}
	// Start the next AD conversion
	ADCSRA|=(1<<ADSC);
 4c6:	36 9a       	sbi	0x06, 6	; 6
}
 4c8:	9f 91       	pop	r25
 4ca:	8f 91       	pop	r24
 4cc:	3f 91       	pop	r19
 4ce:	2f 91       	pop	r18
 4d0:	0f 90       	pop	r0
 4d2:	0f be       	out	0x3f, r0	; 63
 4d4:	0f 90       	pop	r0
 4d6:	1f 90       	pop	r1
 4d8:	18 95       	reti

000004da <__subsf3>:
 4da:	50 58       	subi	r21, 0x80	; 128

000004dc <__addsf3>:
 4dc:	bb 27       	eor	r27, r27
 4de:	aa 27       	eor	r26, r26
 4e0:	0e d0       	rcall	.+28     	; 0x4fe <__addsf3x>
 4e2:	e0 c0       	rjmp	.+448    	; 0x6a4 <__fp_round>
 4e4:	d1 d0       	rcall	.+418    	; 0x688 <__fp_pscA>
 4e6:	30 f0       	brcs	.+12     	; 0x4f4 <__addsf3+0x18>
 4e8:	d6 d0       	rcall	.+428    	; 0x696 <__fp_pscB>
 4ea:	20 f0       	brcs	.+8      	; 0x4f4 <__addsf3+0x18>
 4ec:	31 f4       	brne	.+12     	; 0x4fa <__addsf3+0x1e>
 4ee:	9f 3f       	cpi	r25, 0xFF	; 255
 4f0:	11 f4       	brne	.+4      	; 0x4f6 <__addsf3+0x1a>
 4f2:	1e f4       	brtc	.+6      	; 0x4fa <__addsf3+0x1e>
 4f4:	c6 c0       	rjmp	.+396    	; 0x682 <__fp_nan>
 4f6:	0e f4       	brtc	.+2      	; 0x4fa <__addsf3+0x1e>
 4f8:	e0 95       	com	r30
 4fa:	e7 fb       	bst	r30, 7
 4fc:	bc c0       	rjmp	.+376    	; 0x676 <__fp_inf>

000004fe <__addsf3x>:
 4fe:	e9 2f       	mov	r30, r25
 500:	e2 d0       	rcall	.+452    	; 0x6c6 <__fp_split3>
 502:	80 f3       	brcs	.-32     	; 0x4e4 <__addsf3+0x8>
 504:	ba 17       	cp	r27, r26
 506:	62 07       	cpc	r22, r18
 508:	73 07       	cpc	r23, r19
 50a:	84 07       	cpc	r24, r20
 50c:	95 07       	cpc	r25, r21
 50e:	18 f0       	brcs	.+6      	; 0x516 <__addsf3x+0x18>
 510:	71 f4       	brne	.+28     	; 0x52e <__addsf3x+0x30>
 512:	9e f5       	brtc	.+102    	; 0x57a <__addsf3x+0x7c>
 514:	fa c0       	rjmp	.+500    	; 0x70a <__fp_zero>
 516:	0e f4       	brtc	.+2      	; 0x51a <__addsf3x+0x1c>
 518:	e0 95       	com	r30
 51a:	0b 2e       	mov	r0, r27
 51c:	ba 2f       	mov	r27, r26
 51e:	a0 2d       	mov	r26, r0
 520:	0b 01       	movw	r0, r22
 522:	b9 01       	movw	r22, r18
 524:	90 01       	movw	r18, r0
 526:	0c 01       	movw	r0, r24
 528:	ca 01       	movw	r24, r20
 52a:	a0 01       	movw	r20, r0
 52c:	11 24       	eor	r1, r1
 52e:	ff 27       	eor	r31, r31
 530:	59 1b       	sub	r21, r25
 532:	99 f0       	breq	.+38     	; 0x55a <__addsf3x+0x5c>
 534:	59 3f       	cpi	r21, 0xF9	; 249
 536:	50 f4       	brcc	.+20     	; 0x54c <__addsf3x+0x4e>
 538:	50 3e       	cpi	r21, 0xE0	; 224
 53a:	68 f1       	brcs	.+90     	; 0x596 <__addsf3x+0x98>
 53c:	1a 16       	cp	r1, r26
 53e:	f0 40       	sbci	r31, 0x00	; 0
 540:	a2 2f       	mov	r26, r18
 542:	23 2f       	mov	r18, r19
 544:	34 2f       	mov	r19, r20
 546:	44 27       	eor	r20, r20
 548:	58 5f       	subi	r21, 0xF8	; 248
 54a:	f3 cf       	rjmp	.-26     	; 0x532 <__addsf3x+0x34>
 54c:	46 95       	lsr	r20
 54e:	37 95       	ror	r19
 550:	27 95       	ror	r18
 552:	a7 95       	ror	r26
 554:	f0 40       	sbci	r31, 0x00	; 0
 556:	53 95       	inc	r21
 558:	c9 f7       	brne	.-14     	; 0x54c <__addsf3x+0x4e>
 55a:	7e f4       	brtc	.+30     	; 0x57a <__addsf3x+0x7c>
 55c:	1f 16       	cp	r1, r31
 55e:	ba 0b       	sbc	r27, r26
 560:	62 0b       	sbc	r22, r18
 562:	73 0b       	sbc	r23, r19
 564:	84 0b       	sbc	r24, r20
 566:	ba f0       	brmi	.+46     	; 0x596 <__addsf3x+0x98>
 568:	91 50       	subi	r25, 0x01	; 1
 56a:	a1 f0       	breq	.+40     	; 0x594 <__addsf3x+0x96>
 56c:	ff 0f       	add	r31, r31
 56e:	bb 1f       	adc	r27, r27
 570:	66 1f       	adc	r22, r22
 572:	77 1f       	adc	r23, r23
 574:	88 1f       	adc	r24, r24
 576:	c2 f7       	brpl	.-16     	; 0x568 <__addsf3x+0x6a>
 578:	0e c0       	rjmp	.+28     	; 0x596 <__addsf3x+0x98>
 57a:	ba 0f       	add	r27, r26
 57c:	62 1f       	adc	r22, r18
 57e:	73 1f       	adc	r23, r19
 580:	84 1f       	adc	r24, r20
 582:	48 f4       	brcc	.+18     	; 0x596 <__addsf3x+0x98>
 584:	87 95       	ror	r24
 586:	77 95       	ror	r23
 588:	67 95       	ror	r22
 58a:	b7 95       	ror	r27
 58c:	f7 95       	ror	r31
 58e:	9e 3f       	cpi	r25, 0xFE	; 254
 590:	08 f0       	brcs	.+2      	; 0x594 <__addsf3x+0x96>
 592:	b3 cf       	rjmp	.-154    	; 0x4fa <__addsf3+0x1e>
 594:	93 95       	inc	r25
 596:	88 0f       	add	r24, r24
 598:	08 f0       	brcs	.+2      	; 0x59c <__addsf3x+0x9e>
 59a:	99 27       	eor	r25, r25
 59c:	ee 0f       	add	r30, r30
 59e:	97 95       	ror	r25
 5a0:	87 95       	ror	r24
 5a2:	08 95       	ret

000005a4 <__fixunssfsi>:
 5a4:	98 d0       	rcall	.+304    	; 0x6d6 <__fp_splitA>
 5a6:	88 f0       	brcs	.+34     	; 0x5ca <__fixunssfsi+0x26>
 5a8:	9f 57       	subi	r25, 0x7F	; 127
 5aa:	90 f0       	brcs	.+36     	; 0x5d0 <__fixunssfsi+0x2c>
 5ac:	b9 2f       	mov	r27, r25
 5ae:	99 27       	eor	r25, r25
 5b0:	b7 51       	subi	r27, 0x17	; 23
 5b2:	a0 f0       	brcs	.+40     	; 0x5dc <__fixunssfsi+0x38>
 5b4:	d1 f0       	breq	.+52     	; 0x5ea <__fixunssfsi+0x46>
 5b6:	66 0f       	add	r22, r22
 5b8:	77 1f       	adc	r23, r23
 5ba:	88 1f       	adc	r24, r24
 5bc:	99 1f       	adc	r25, r25
 5be:	1a f0       	brmi	.+6      	; 0x5c6 <__fixunssfsi+0x22>
 5c0:	ba 95       	dec	r27
 5c2:	c9 f7       	brne	.-14     	; 0x5b6 <__fixunssfsi+0x12>
 5c4:	12 c0       	rjmp	.+36     	; 0x5ea <__fixunssfsi+0x46>
 5c6:	b1 30       	cpi	r27, 0x01	; 1
 5c8:	81 f0       	breq	.+32     	; 0x5ea <__fixunssfsi+0x46>
 5ca:	9f d0       	rcall	.+318    	; 0x70a <__fp_zero>
 5cc:	b1 e0       	ldi	r27, 0x01	; 1
 5ce:	08 95       	ret
 5d0:	9c c0       	rjmp	.+312    	; 0x70a <__fp_zero>
 5d2:	67 2f       	mov	r22, r23
 5d4:	78 2f       	mov	r23, r24
 5d6:	88 27       	eor	r24, r24
 5d8:	b8 5f       	subi	r27, 0xF8	; 248
 5da:	39 f0       	breq	.+14     	; 0x5ea <__fixunssfsi+0x46>
 5dc:	b9 3f       	cpi	r27, 0xF9	; 249
 5de:	cc f3       	brlt	.-14     	; 0x5d2 <__fixunssfsi+0x2e>
 5e0:	86 95       	lsr	r24
 5e2:	77 95       	ror	r23
 5e4:	67 95       	ror	r22
 5e6:	b3 95       	inc	r27
 5e8:	d9 f7       	brne	.-10     	; 0x5e0 <__fixunssfsi+0x3c>
 5ea:	3e f4       	brtc	.+14     	; 0x5fa <__fixunssfsi+0x56>
 5ec:	90 95       	com	r25
 5ee:	80 95       	com	r24
 5f0:	70 95       	com	r23
 5f2:	61 95       	neg	r22
 5f4:	7f 4f       	sbci	r23, 0xFF	; 255
 5f6:	8f 4f       	sbci	r24, 0xFF	; 255
 5f8:	9f 4f       	sbci	r25, 0xFF	; 255
 5fa:	08 95       	ret

000005fc <__floatunsisf>:
 5fc:	e8 94       	clt
 5fe:	09 c0       	rjmp	.+18     	; 0x612 <__floatsisf+0x12>

00000600 <__floatsisf>:
 600:	97 fb       	bst	r25, 7
 602:	3e f4       	brtc	.+14     	; 0x612 <__floatsisf+0x12>
 604:	90 95       	com	r25
 606:	80 95       	com	r24
 608:	70 95       	com	r23
 60a:	61 95       	neg	r22
 60c:	7f 4f       	sbci	r23, 0xFF	; 255
 60e:	8f 4f       	sbci	r24, 0xFF	; 255
 610:	9f 4f       	sbci	r25, 0xFF	; 255
 612:	99 23       	and	r25, r25
 614:	a9 f0       	breq	.+42     	; 0x640 <__floatsisf+0x40>
 616:	f9 2f       	mov	r31, r25
 618:	96 e9       	ldi	r25, 0x96	; 150
 61a:	bb 27       	eor	r27, r27
 61c:	93 95       	inc	r25
 61e:	f6 95       	lsr	r31
 620:	87 95       	ror	r24
 622:	77 95       	ror	r23
 624:	67 95       	ror	r22
 626:	b7 95       	ror	r27
 628:	f1 11       	cpse	r31, r1
 62a:	f8 cf       	rjmp	.-16     	; 0x61c <__floatsisf+0x1c>
 62c:	fa f4       	brpl	.+62     	; 0x66c <__floatsisf+0x6c>
 62e:	bb 0f       	add	r27, r27
 630:	11 f4       	brne	.+4      	; 0x636 <__floatsisf+0x36>
 632:	60 ff       	sbrs	r22, 0
 634:	1b c0       	rjmp	.+54     	; 0x66c <__floatsisf+0x6c>
 636:	6f 5f       	subi	r22, 0xFF	; 255
 638:	7f 4f       	sbci	r23, 0xFF	; 255
 63a:	8f 4f       	sbci	r24, 0xFF	; 255
 63c:	9f 4f       	sbci	r25, 0xFF	; 255
 63e:	16 c0       	rjmp	.+44     	; 0x66c <__floatsisf+0x6c>
 640:	88 23       	and	r24, r24
 642:	11 f0       	breq	.+4      	; 0x648 <__floatsisf+0x48>
 644:	96 e9       	ldi	r25, 0x96	; 150
 646:	11 c0       	rjmp	.+34     	; 0x66a <__floatsisf+0x6a>
 648:	77 23       	and	r23, r23
 64a:	21 f0       	breq	.+8      	; 0x654 <__floatsisf+0x54>
 64c:	9e e8       	ldi	r25, 0x8E	; 142
 64e:	87 2f       	mov	r24, r23
 650:	76 2f       	mov	r23, r22
 652:	05 c0       	rjmp	.+10     	; 0x65e <__floatsisf+0x5e>
 654:	66 23       	and	r22, r22
 656:	71 f0       	breq	.+28     	; 0x674 <__floatsisf+0x74>
 658:	96 e8       	ldi	r25, 0x86	; 134
 65a:	86 2f       	mov	r24, r22
 65c:	70 e0       	ldi	r23, 0x00	; 0
 65e:	60 e0       	ldi	r22, 0x00	; 0
 660:	2a f0       	brmi	.+10     	; 0x66c <__floatsisf+0x6c>
 662:	9a 95       	dec	r25
 664:	66 0f       	add	r22, r22
 666:	77 1f       	adc	r23, r23
 668:	88 1f       	adc	r24, r24
 66a:	da f7       	brpl	.-10     	; 0x662 <__floatsisf+0x62>
 66c:	88 0f       	add	r24, r24
 66e:	96 95       	lsr	r25
 670:	87 95       	ror	r24
 672:	97 f9       	bld	r25, 7
 674:	08 95       	ret

00000676 <__fp_inf>:
 676:	97 f9       	bld	r25, 7
 678:	9f 67       	ori	r25, 0x7F	; 127
 67a:	80 e8       	ldi	r24, 0x80	; 128
 67c:	70 e0       	ldi	r23, 0x00	; 0
 67e:	60 e0       	ldi	r22, 0x00	; 0
 680:	08 95       	ret

00000682 <__fp_nan>:
 682:	9f ef       	ldi	r25, 0xFF	; 255
 684:	80 ec       	ldi	r24, 0xC0	; 192
 686:	08 95       	ret

00000688 <__fp_pscA>:
 688:	00 24       	eor	r0, r0
 68a:	0a 94       	dec	r0
 68c:	16 16       	cp	r1, r22
 68e:	17 06       	cpc	r1, r23
 690:	18 06       	cpc	r1, r24
 692:	09 06       	cpc	r0, r25
 694:	08 95       	ret

00000696 <__fp_pscB>:
 696:	00 24       	eor	r0, r0
 698:	0a 94       	dec	r0
 69a:	12 16       	cp	r1, r18
 69c:	13 06       	cpc	r1, r19
 69e:	14 06       	cpc	r1, r20
 6a0:	05 06       	cpc	r0, r21
 6a2:	08 95       	ret

000006a4 <__fp_round>:
 6a4:	09 2e       	mov	r0, r25
 6a6:	03 94       	inc	r0
 6a8:	00 0c       	add	r0, r0
 6aa:	11 f4       	brne	.+4      	; 0x6b0 <__fp_round+0xc>
 6ac:	88 23       	and	r24, r24
 6ae:	52 f0       	brmi	.+20     	; 0x6c4 <__fp_round+0x20>
 6b0:	bb 0f       	add	r27, r27
 6b2:	40 f4       	brcc	.+16     	; 0x6c4 <__fp_round+0x20>
 6b4:	bf 2b       	or	r27, r31
 6b6:	11 f4       	brne	.+4      	; 0x6bc <__fp_round+0x18>
 6b8:	60 ff       	sbrs	r22, 0
 6ba:	04 c0       	rjmp	.+8      	; 0x6c4 <__fp_round+0x20>
 6bc:	6f 5f       	subi	r22, 0xFF	; 255
 6be:	7f 4f       	sbci	r23, 0xFF	; 255
 6c0:	8f 4f       	sbci	r24, 0xFF	; 255
 6c2:	9f 4f       	sbci	r25, 0xFF	; 255
 6c4:	08 95       	ret

000006c6 <__fp_split3>:
 6c6:	57 fd       	sbrc	r21, 7
 6c8:	90 58       	subi	r25, 0x80	; 128
 6ca:	44 0f       	add	r20, r20
 6cc:	55 1f       	adc	r21, r21
 6ce:	59 f0       	breq	.+22     	; 0x6e6 <__fp_splitA+0x10>
 6d0:	5f 3f       	cpi	r21, 0xFF	; 255
 6d2:	71 f0       	breq	.+28     	; 0x6f0 <__fp_splitA+0x1a>
 6d4:	47 95       	ror	r20

000006d6 <__fp_splitA>:
 6d6:	88 0f       	add	r24, r24
 6d8:	97 fb       	bst	r25, 7
 6da:	99 1f       	adc	r25, r25
 6dc:	61 f0       	breq	.+24     	; 0x6f6 <__fp_splitA+0x20>
 6de:	9f 3f       	cpi	r25, 0xFF	; 255
 6e0:	79 f0       	breq	.+30     	; 0x700 <__fp_splitA+0x2a>
 6e2:	87 95       	ror	r24
 6e4:	08 95       	ret
 6e6:	12 16       	cp	r1, r18
 6e8:	13 06       	cpc	r1, r19
 6ea:	14 06       	cpc	r1, r20
 6ec:	55 1f       	adc	r21, r21
 6ee:	f2 cf       	rjmp	.-28     	; 0x6d4 <__fp_split3+0xe>
 6f0:	46 95       	lsr	r20
 6f2:	f1 df       	rcall	.-30     	; 0x6d6 <__fp_splitA>
 6f4:	08 c0       	rjmp	.+16     	; 0x706 <__fp_splitA+0x30>
 6f6:	16 16       	cp	r1, r22
 6f8:	17 06       	cpc	r1, r23
 6fa:	18 06       	cpc	r1, r24
 6fc:	99 1f       	adc	r25, r25
 6fe:	f1 cf       	rjmp	.-30     	; 0x6e2 <__fp_splitA+0xc>
 700:	86 95       	lsr	r24
 702:	71 05       	cpc	r23, r1
 704:	61 05       	cpc	r22, r1
 706:	08 94       	sec
 708:	08 95       	ret

0000070a <__fp_zero>:
 70a:	e8 94       	clt

0000070c <__fp_szero>:
 70c:	bb 27       	eor	r27, r27
 70e:	66 27       	eor	r22, r22
 710:	77 27       	eor	r23, r23
 712:	cb 01       	movw	r24, r22
 714:	97 f9       	bld	r25, 7
 716:	08 95       	ret

00000718 <__mulsf3>:
 718:	0a d0       	rcall	.+20     	; 0x72e <__mulsf3x>
 71a:	c4 cf       	rjmp	.-120    	; 0x6a4 <__fp_round>
 71c:	b5 df       	rcall	.-150    	; 0x688 <__fp_pscA>
 71e:	28 f0       	brcs	.+10     	; 0x72a <__mulsf3+0x12>
 720:	ba df       	rcall	.-140    	; 0x696 <__fp_pscB>
 722:	18 f0       	brcs	.+6      	; 0x72a <__mulsf3+0x12>
 724:	95 23       	and	r25, r21
 726:	09 f0       	breq	.+2      	; 0x72a <__mulsf3+0x12>
 728:	a6 cf       	rjmp	.-180    	; 0x676 <__fp_inf>
 72a:	ab cf       	rjmp	.-170    	; 0x682 <__fp_nan>
 72c:	ef cf       	rjmp	.-34     	; 0x70c <__fp_szero>

0000072e <__mulsf3x>:
 72e:	cb df       	rcall	.-106    	; 0x6c6 <__fp_split3>
 730:	a8 f3       	brcs	.-22     	; 0x71c <__mulsf3+0x4>

00000732 <__mulsf3_pse>:
 732:	99 23       	and	r25, r25
 734:	d9 f3       	breq	.-10     	; 0x72c <__mulsf3+0x14>
 736:	55 23       	and	r21, r21
 738:	c9 f3       	breq	.-14     	; 0x72c <__mulsf3+0x14>
 73a:	95 0f       	add	r25, r21
 73c:	50 e0       	ldi	r21, 0x00	; 0
 73e:	55 1f       	adc	r21, r21
 740:	aa 27       	eor	r26, r26
 742:	ee 27       	eor	r30, r30
 744:	ff 27       	eor	r31, r31
 746:	bb 27       	eor	r27, r27
 748:	00 24       	eor	r0, r0
 74a:	08 94       	sec
 74c:	67 95       	ror	r22
 74e:	20 f4       	brcc	.+8      	; 0x758 <__mulsf3_pse+0x26>
 750:	e2 0f       	add	r30, r18
 752:	f3 1f       	adc	r31, r19
 754:	b4 1f       	adc	r27, r20
 756:	0a 1e       	adc	r0, r26
 758:	22 0f       	add	r18, r18
 75a:	33 1f       	adc	r19, r19
 75c:	44 1f       	adc	r20, r20
 75e:	aa 1f       	adc	r26, r26
 760:	66 95       	lsr	r22
 762:	a9 f7       	brne	.-22     	; 0x74e <__mulsf3_pse+0x1c>
 764:	77 95       	ror	r23
 766:	30 f4       	brcc	.+12     	; 0x774 <__mulsf3_pse+0x42>
 768:	f3 0f       	add	r31, r19
 76a:	b4 1f       	adc	r27, r20
 76c:	0a 1e       	adc	r0, r26
 76e:	12 1e       	adc	r1, r18
 770:	08 f4       	brcc	.+2      	; 0x774 <__mulsf3_pse+0x42>
 772:	63 95       	inc	r22
 774:	33 0f       	add	r19, r19
 776:	44 1f       	adc	r20, r20
 778:	aa 1f       	adc	r26, r26
 77a:	22 1f       	adc	r18, r18
 77c:	76 95       	lsr	r23
 77e:	99 f7       	brne	.-26     	; 0x766 <__mulsf3_pse+0x34>
 780:	87 95       	ror	r24
 782:	20 f4       	brcc	.+8      	; 0x78c <__mulsf3_pse+0x5a>
 784:	b4 0f       	add	r27, r20
 786:	0a 1e       	adc	r0, r26
 788:	12 1e       	adc	r1, r18
 78a:	63 1f       	adc	r22, r19
 78c:	44 0f       	add	r20, r20
 78e:	aa 1f       	adc	r26, r26
 790:	22 1f       	adc	r18, r18
 792:	33 1f       	adc	r19, r19
 794:	86 95       	lsr	r24
 796:	a9 f7       	brne	.-22     	; 0x782 <__mulsf3_pse+0x50>
 798:	86 2f       	mov	r24, r22
 79a:	71 2d       	mov	r23, r1
 79c:	60 2d       	mov	r22, r0
 79e:	11 24       	eor	r1, r1
 7a0:	9f 57       	subi	r25, 0x7F	; 127
 7a2:	50 40       	sbci	r21, 0x00	; 0
 7a4:	8a f0       	brmi	.+34     	; 0x7c8 <__mulsf3_pse+0x96>
 7a6:	e1 f0       	breq	.+56     	; 0x7e0 <__mulsf3_pse+0xae>
 7a8:	88 23       	and	r24, r24
 7aa:	4a f0       	brmi	.+18     	; 0x7be <__mulsf3_pse+0x8c>
 7ac:	ee 0f       	add	r30, r30
 7ae:	ff 1f       	adc	r31, r31
 7b0:	bb 1f       	adc	r27, r27
 7b2:	66 1f       	adc	r22, r22
 7b4:	77 1f       	adc	r23, r23
 7b6:	88 1f       	adc	r24, r24
 7b8:	91 50       	subi	r25, 0x01	; 1
 7ba:	50 40       	sbci	r21, 0x00	; 0
 7bc:	a9 f7       	brne	.-22     	; 0x7a8 <__mulsf3_pse+0x76>
 7be:	9e 3f       	cpi	r25, 0xFE	; 254
 7c0:	51 05       	cpc	r21, r1
 7c2:	70 f0       	brcs	.+28     	; 0x7e0 <__mulsf3_pse+0xae>
 7c4:	58 cf       	rjmp	.-336    	; 0x676 <__fp_inf>
 7c6:	a2 cf       	rjmp	.-188    	; 0x70c <__fp_szero>
 7c8:	5f 3f       	cpi	r21, 0xFF	; 255
 7ca:	ec f3       	brlt	.-6      	; 0x7c6 <__mulsf3_pse+0x94>
 7cc:	98 3e       	cpi	r25, 0xE8	; 232
 7ce:	dc f3       	brlt	.-10     	; 0x7c6 <__mulsf3_pse+0x94>
 7d0:	86 95       	lsr	r24
 7d2:	77 95       	ror	r23
 7d4:	67 95       	ror	r22
 7d6:	b7 95       	ror	r27
 7d8:	f7 95       	ror	r31
 7da:	e7 95       	ror	r30
 7dc:	9f 5f       	subi	r25, 0xFF	; 255
 7de:	c1 f7       	brne	.-16     	; 0x7d0 <__mulsf3_pse+0x9e>
 7e0:	fe 2b       	or	r31, r30
 7e2:	88 0f       	add	r24, r24
 7e4:	91 1d       	adc	r25, r1
 7e6:	96 95       	lsr	r25
 7e8:	87 95       	ror	r24
 7ea:	97 f9       	bld	r25, 7
 7ec:	08 95       	ret

000007ee <__udivmodhi4>:
 7ee:	aa 1b       	sub	r26, r26
 7f0:	bb 1b       	sub	r27, r27
 7f2:	51 e1       	ldi	r21, 0x11	; 17
 7f4:	07 c0       	rjmp	.+14     	; 0x804 <__udivmodhi4_ep>

000007f6 <__udivmodhi4_loop>:
 7f6:	aa 1f       	adc	r26, r26
 7f8:	bb 1f       	adc	r27, r27
 7fa:	a6 17       	cp	r26, r22
 7fc:	b7 07       	cpc	r27, r23
 7fe:	10 f0       	brcs	.+4      	; 0x804 <__udivmodhi4_ep>
 800:	a6 1b       	sub	r26, r22
 802:	b7 0b       	sbc	r27, r23

00000804 <__udivmodhi4_ep>:
 804:	88 1f       	adc	r24, r24
 806:	99 1f       	adc	r25, r25
 808:	5a 95       	dec	r21
 80a:	a9 f7       	brne	.-22     	; 0x7f6 <__udivmodhi4_loop>
 80c:	80 95       	com	r24
 80e:	90 95       	com	r25
 810:	bc 01       	movw	r22, r24
 812:	cd 01       	movw	r24, r26
 814:	08 95       	ret

00000816 <_exit>:
 816:	f8 94       	cli

00000818 <__stop_program>:
 818:	ff cf       	rjmp	.-2      	; 0x818 <__stop_program>
