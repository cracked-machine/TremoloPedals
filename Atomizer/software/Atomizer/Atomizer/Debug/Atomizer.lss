
Atomizer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000086e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800060  00800060  0000086e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000086e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000008dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007b2  00000000  00000000  0000093c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005b9  00000000  00000000  000010ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004f1  00000000  00000000  000016a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b0  00000000  00000000  00001b98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000442  00000000  00000000  00001d48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000392  00000000  00000000  0000218a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000251c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	a9 c1       	rjmp	.+850    	; 0x358 <__vector_2>
   6:	9f c0       	rjmp	.+318    	; 0x146 <__vector_3>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	06 c2       	rjmp	.+1036   	; 0x41e <__vector_8>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	2f c1       	rjmp	.+606    	; 0x274 <__vector_10>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	85 c1       	rjmp	.+778    	; 0x324 <__vector_12>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	20 e0       	ldi	r18, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	af 36       	cpi	r26, 0x6F	; 111
  36:	b2 07       	cpc	r27, r18
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	57 d0       	rcall	.+174    	; 0xea <main>
  3c:	dc c3       	rjmp	.+1976   	; 0x7f6 <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <resetPWM>:
/// FUNCTIONS
/////////////////////////

void resetPWM() {
	
	OCR0A=0x81;		// low duty;	0x42 (66) - 0x81 (129)
  40:	81 e8       	ldi	r24, 0x81	; 129
  42:	89 bd       	out	0x29, r24	; 41
	OCR0B=0x41;		// high duty;	0x01 (1) - 0x41 (65)
  44:	81 e4       	ldi	r24, 0x41	; 65
  46:	88 bd       	out	0x28, r24	; 40
  48:	08 95       	ret

0000004a <setModeIndicator>:
}

void setModeIndicator(CONTROLMODE p_currentMode) 
{
	currentMode = p_currentMode;
  4a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	switch(p_currentMode)
  4e:	81 30       	cpi	r24, 0x01	; 1
  50:	39 f0       	breq	.+14     	; 0x60 <setModeIndicator+0x16>
  52:	18 f0       	brcs	.+6      	; 0x5a <setModeIndicator+0x10>
  54:	82 30       	cpi	r24, 0x02	; 2
  56:	39 f0       	breq	.+14     	; 0x66 <setModeIndicator+0x1c>
  58:	08 95       	ret
	{
		case NORMAL:
			// Tri-State mode LED pin (LEDS off)
			DDRB &= ~(1<<DDB2);
  5a:	ba 98       	cbi	0x17, 2	; 23
			PORTB &= ~(1<<PB2);
  5c:	c2 98       	cbi	0x18, 2	; 24
			break;
  5e:	08 95       	ret
			
		case SKEW:
			// Logic one to mode LED pin 
			DDRB |= (1<<DDB2);
  60:	ba 9a       	sbi	0x17, 2	; 23
			PORTB |= (1<<PB2);
  62:	c2 9a       	sbi	0x18, 2	; 24
			break;
  64:	08 95       	ret
		
		case SWEEP:
			// Logic zero to mode LED pin 
			DDRB |= (1<<DDB2);
  66:	ba 9a       	sbi	0x17, 2	; 23
			PORTB &= ~(1<<PB2);
  68:	c2 98       	cbi	0x18, 2	; 24
  6a:	08 95       	ret

0000006c <TimerModeEnable>:
	}
}

void TimerModeEnable(CONTROLMODE p_currentMode)
{
	currentMode = p_currentMode;
  6c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	cli();
  70:	f8 94       	cli
	
	switch(p_currentMode)
  72:	81 30       	cpi	r24, 0x01	; 1
  74:	a1 f0       	breq	.+40     	; 0x9e <TimerModeEnable+0x32>
  76:	18 f0       	brcs	.+6      	; 0x7e <TimerModeEnable+0x12>
  78:	82 30       	cpi	r24, 0x02	; 2
  7a:	31 f1       	breq	.+76     	; 0xc8 <TimerModeEnable+0x5c>
  7c:	34 c0       	rjmp	.+104    	; 0xe6 <TimerModeEnable+0x7a>
	{
		case NORMAL:
			
			// disable Timer0 output to OC0B (PB1)
			TCCR0A = 0;
  7e:	1a bc       	out	0x2a, r1	; 42
			///////////////////////////////////
			//// Timer1 CTC  setup
			///////////////////////////////////

			// Timer/Counter1 is reset to $00 after a compare match with OCR1C register value 
			TCCR1 |= (1<<CTC1);
  80:	80 b7       	in	r24, 0x30	; 48
  82:	80 68       	ori	r24, 0x80	; 128
  84:	80 bf       	out	0x30, r24	; 48
	
			// enable toggle output on OC1A (PB1) output line.
			TCCR1 |= (0<<COM1A1) | (1<<COM1A0);
  86:	80 b7       	in	r24, 0x30	; 48
  88:	80 61       	ori	r24, 0x10	; 16
  8a:	80 bf       	out	0x30, r24	; 48
			
			// Timer/Counter1 Prescale Select PCK/2048
			TCCR1 |= (1<<CS13) | (1<<CS12) | (0<<CS11) | (0<<CS10);
  8c:	80 b7       	in	r24, 0x30	; 48
  8e:	8c 60       	ori	r24, 0x0C	; 12
  90:	80 bf       	out	0x30, r24	; 48
	
			TIMSK |= (1<<OCIE1A);
  92:	89 b7       	in	r24, 0x39	; 57
  94:	80 64       	ori	r24, 0x40	; 64
  96:	89 bf       	out	0x39, r24	; 57
	
			OCR1C =  10;
  98:	8a e0       	ldi	r24, 0x0A	; 10
  9a:	8d bd       	out	0x2d, r24	; 45
	
			break;
  9c:	24 c0       	rjmp	.+72     	; 0xe6 <TimerModeEnable+0x7a>
			
		case SKEW:
			
			// disable Timer1 output to OC1A (PB1)
			TCCR1 = 0;
  9e:	10 be       	out	0x30, r1	; 48
			///////////////////////////////////
			//// Timer0 phase PWM setup
			/////////////////////////////////
			
			//Normal port operation, OC0A disconnected
			TCCR0A |= (0<<COM0A1) | (0<<COM0A0);
  a0:	8a b5       	in	r24, 0x2a	; 42
  a2:	8a bd       	out	0x2a, r24	; 42
			// Enable OC0B (PB1) output. (Clear OC0B on Compare Match, set OC0B at BOTTOM - non-inverting mode)
			TCCR0A |= (1<<COM0B1) | (0<<COM0B0);
  a4:	8a b5       	in	r24, 0x2a	; 42
  a6:	80 62       	ori	r24, 0x20	; 32
  a8:	8a bd       	out	0x2a, r24	; 42
			// Mode 5: phase PWM
			TCCR0A |= (0<<WGM01) | (1<<WGM00);
  aa:	8a b5       	in	r24, 0x2a	; 42
  ac:	81 60       	ori	r24, 0x01	; 1
  ae:	8a bd       	out	0x2a, r24	; 42
			TCCR0B |= (1<<WGM02);
  b0:	83 b7       	in	r24, 0x33	; 51
  b2:	88 60       	ori	r24, 0x08	; 8
  b4:	83 bf       	out	0x33, r24	; 51
			// 1024 Prescaler
			TCCR0B |= (1<<CS02) | (0<<CS01) | (1<<CS00);
  b6:	83 b7       	in	r24, 0x33	; 51
  b8:	85 60       	ori	r24, 0x05	; 5
  ba:	83 bf       	out	0x33, r24	; 51
	
			// Timer/Counter0 Output Compare Match A Interrupt Enable
			TIMSK |= (1<<OCIE0A);
  bc:	89 b7       	in	r24, 0x39	; 57
  be:	80 61       	ori	r24, 0x10	; 16
  c0:	89 bf       	out	0x39, r24	; 57
	
			TCNT0=0x00;
  c2:	12 be       	out	0x32, r1	; 50
			resetPWM();
  c4:	bd df       	rcall	.-134    	; 0x40 <resetPWM>
			
			break;
  c6:	0f c0       	rjmp	.+30     	; 0xe6 <TimerModeEnable+0x7a>
		
		case SWEEP:
		
			// disable Timer0 output to OC0B (PB1)
			TCCR0A = 0;
  c8:	1a bc       	out	0x2a, r1	; 42
			///////////////////////////////////
			//// Timer1 CTC  setup
			///////////////////////////////////

			// Timer/Counter1 is reset to $00 after a compare match with OCR1C register value
			TCCR1 |= (1<<CTC1);
  ca:	80 b7       	in	r24, 0x30	; 48
  cc:	80 68       	ori	r24, 0x80	; 128
  ce:	80 bf       	out	0x30, r24	; 48
			
			// enable toggle output on OC1A (PB1) output line.
			TCCR1 |= (0<<COM1A1) | (1<<COM1A0);
  d0:	80 b7       	in	r24, 0x30	; 48
  d2:	80 61       	ori	r24, 0x10	; 16
  d4:	80 bf       	out	0x30, r24	; 48
			
			// Timer/Counter1 Prescale Select PCK/2048
			//TCCR1 |= (0<<CS13) | (1<<CS12) | (1<<CS11) | (1<<CS10); // /64 
			//TCCR1 |= (1<<CS13) | (0<<CS12) | (0<<CS11) | (0<<CS10); // /128
			TCCR1 |= (1<<CS13) | (0<<CS12) | (0<<CS11) | (1<<CS10); // /256
  d6:	80 b7       	in	r24, 0x30	; 48
  d8:	89 60       	ori	r24, 0x09	; 9
  da:	80 bf       	out	0x30, r24	; 48
			//TCCR1 |= (1<<CS13) | (0<<CS12) | (1<<CS11) | (0<<CS10); // /512
			//TCCR1 |= (1<<CS13) | (0<<CS12) | (1<<CS11) | (1<<CS10); // /1024
			//TCCR1 |= (1<<CS13) | (1<<CS12) | (0<<CS11) | (0<<CS10); // /2048
			
			TIMSK |= (1<<OCIE1A);
  dc:	89 b7       	in	r24, 0x39	; 57
  de:	80 64       	ori	r24, 0x40	; 64
  e0:	89 bf       	out	0x39, r24	; 57
			
			OCR1C =  10;
  e2:	8a e0       	ldi	r24, 0x0A	; 10
  e4:	8d bd       	out	0x2d, r24	; 45
			
			break;
	}
	
	sei();	
  e6:	78 94       	sei
  e8:	08 95       	ret

000000ea <main>:
static __inline__ void clock_prescale_set(clock_div_t) __attribute__((__always_inline__));

void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
  ea:	94 e0       	ldi	r25, 0x04	; 4
  ec:	80 e8       	ldi	r24, 0x80	; 128
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	f8 94       	cli
  f2:	86 bd       	out	0x26, r24	; 38
  f4:	96 bd       	out	0x26, r25	; 38
  f6:	0f be       	out	0x3f, r0	; 63
	// ** clock_div_16 = 4,
	// clock_div_32 = 5,
	
	clock_prescale_set(4);
	
	cli();
  f8:	f8 94       	cli
	////////////////////////
	
	
	
	// clock signal (output)
	PORTB |= (1<<PB1);
  fa:	c1 9a       	sbi	0x18, 1	; 24
	DDRB |= (1<<DDB1);
  fc:	b9 9a       	sbi	0x17, 1	; 23
	
	// ADC3+4 (input)
	PORTB &= ~(1<<PB3);
  fe:	c3 98       	cbi	0x18, 3	; 24
	DDRB &= ~(1<<DDB3);
 100:	bb 98       	cbi	0x17, 3	; 23
	PORTB &= ~(1<<PB4);
 102:	c4 98       	cbi	0x18, 4	; 24
	DDRB &= ~(1<<DDB4);
 104:	bc 98       	cbi	0x17, 4	; 23
	///////////////////////////////////
	//// PCINT setup
	///////////////////////////////////
	
	// set PB0 to input
	DDRB &= ~(1<<DDB0);
 106:	b8 98       	cbi	0x17, 0	; 23
	// set PB0 pull-up
	PORTB |= 1<<PB0;
 108:	c0 9a       	sbi	0x18, 0	; 24
	
	// enable PC Interrupts
	GIMSK |= (1<<PCIE);
 10a:	8b b7       	in	r24, 0x3b	; 59
 10c:	80 62       	ori	r24, 0x20	; 32
 10e:	8b bf       	out	0x3b, r24	; 59
	// enable PCINT0 interrupt
	PCMSK |= (1<<PCINT0);
 110:	a8 9a       	sbi	0x15, 0	; 21
		
	setModeIndicator(currentMode = NORMAL);
 112:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	98 df       	rcall	.-208    	; 0x4a <setModeIndicator>
	TimerModeEnable(NORMAL);
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	a7 df       	rcall	.-178    	; 0x6c <TimerModeEnable>
	//// ADC setup 
	///////////////////////////////////

	
	// VCC used as Voltage Reference, disconnected from PB0 (AREF).
	ADMUX &= ~((1<<REFS0) | (1<<REFS1));
 11e:	87 b1       	in	r24, 0x07	; 7
 120:	8f 73       	andi	r24, 0x3F	; 63
 122:	87 b9       	out	0x07, r24	; 7
	
	// ADC Right Adjust Result
	ADMUX &= ~((1<<ADLAR));
 124:	3d 98       	cbi	0x07, 5	; 7
	// ADC Left Adjust Result
	//ADMUX |= _ADCLA;
	
	// ADC3 selected by default
	ADMUX |= _ADC3EN;
 126:	87 b1       	in	r24, 0x07	; 7
 128:	83 60       	ori	r24, 0x03	; 3
 12a:	87 b9       	out	0x07, r24	; 7
	
	// ADC enable,  Auto Trigger Enable,  Interrupt Enable	
	ADCSRA |= (1<<ADATE) | (1<<ADIE) | (1<<ADEN);
 12c:	86 b1       	in	r24, 0x06	; 6
 12e:	88 6a       	ori	r24, 0xA8	; 168
 130:	86 b9       	out	0x06, r24	; 6
	
	// ADC prescaler /128 - this is fast enough for our purposes, NOTE: /2 prescaler blocks WDT_vect 
	ADCSRA |= (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2);
 132:	86 b1       	in	r24, 0x06	; 6
 134:	87 60       	ori	r24, 0x07	; 7
 136:	86 b9       	out	0x06, r24	; 6

	// Single Ended conversions, Auto Trigger Source = Free Running mode
	ADCSRB = 0;
 138:	13 b8       	out	0x03, r1	; 3
	
	// ADC Start Conversion
	ADCSRA |= (1<<ADSC);
 13a:	36 9a       	sbi	0x06, 6	; 6
	
	// setup watchdog to interupt every 1sec
	WDTCR |= (1<<WDE) | (1<<WDIE);
 13c:	81 b5       	in	r24, 0x21	; 33
 13e:	88 64       	ori	r24, 0x48	; 72
 140:	81 bd       	out	0x21, r24	; 33
	
	sei();
 142:	78 94       	sei
 144:	ff cf       	rjmp	.-2      	; 0x144 <main+0x5a>

00000146 <__vector_3>:
//////////////////////////////
///// INTERRUPTS
//////////////////////////////

ISR (TIMER1_COMPA_vect)
{
 146:	1f 92       	push	r1
 148:	0f 92       	push	r0
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	0f 92       	push	r0
 14e:	11 24       	eor	r1, r1
 150:	cf 92       	push	r12
 152:	df 92       	push	r13
 154:	ef 92       	push	r14
 156:	ff 92       	push	r15
 158:	2f 93       	push	r18
 15a:	3f 93       	push	r19
 15c:	4f 93       	push	r20
 15e:	5f 93       	push	r21
 160:	6f 93       	push	r22
 162:	7f 93       	push	r23
 164:	8f 93       	push	r24
 166:	9f 93       	push	r25
 168:	af 93       	push	r26
 16a:	bf 93       	push	r27
 16c:	ef 93       	push	r30
 16e:	ff 93       	push	r31
	// Normal/SWEEP mode freq adjust
	switch(currentMode)
 170:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 174:	88 23       	and	r24, r24
 176:	19 f0       	breq	.+6      	; 0x17e <__vector_3+0x38>
 178:	82 30       	cpi	r24, 0x02	; 2
 17a:	b1 f0       	breq	.+44     	; 0x1a8 <__vector_3+0x62>
 17c:	66 c0       	rjmp	.+204    	; 0x24a <__vector_3+0x104>
	{
		// as the pot is turned CW the clock duty will decrease, a duty less than 2 is bad
		case NORMAL:
			if((upperpot / 16) < 2)
 17e:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <upperpot>
 182:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <upperpot+0x1>
 186:	80 97       	sbiw	r24, 0x20	; 32
 188:	18 f4       	brcc	.+6      	; 0x190 <__vector_3+0x4a>
			{
				OCR1C = 2;
 18a:	82 e0       	ldi	r24, 0x02	; 2
 18c:	8d bd       	out	0x2d, r24	; 45
 18e:	5d c0       	rjmp	.+186    	; 0x24a <__vector_3+0x104>
			}
			else
			{
				OCR1C = (upperpot / 16);
 190:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <upperpot>
 194:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <upperpot+0x1>
 198:	92 95       	swap	r25
 19a:	82 95       	swap	r24
 19c:	8f 70       	andi	r24, 0x0F	; 15
 19e:	89 27       	eor	r24, r25
 1a0:	9f 70       	andi	r25, 0x0F	; 15
 1a2:	89 27       	eor	r24, r25
 1a4:	8d bd       	out	0x2d, r24	; 45
 1a6:	51 c0       	rjmp	.+162    	; 0x24a <__vector_3+0x104>
			
			
			break;
		case SWEEP:
			//prevents MCU reset
			if(upperpot < 50) 
 1a8:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <upperpot>
 1ac:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <upperpot+0x1>
 1b0:	c2 97       	sbiw	r24, 0x32	; 50
 1b2:	30 f4       	brcc	.+12     	; 0x1c0 <__vector_3+0x7a>
			{
				upperpot = 100;
 1b4:	84 e6       	ldi	r24, 0x64	; 100
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <upperpot+0x1>
 1bc:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <upperpot>
			}
			
			OCR1C= (upperpot / (lowerpot/16)) * weight;
 1c0:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <upperpot>
 1c4:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <upperpot+0x1>
 1c8:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <lowerpot>
 1cc:	70 91 62 00 	lds	r23, 0x0062	; 0x800062 <lowerpot+0x1>
 1d0:	c0 90 6b 00 	lds	r12, 0x006B	; 0x80006b <weight>
 1d4:	d0 90 6c 00 	lds	r13, 0x006C	; 0x80006c <weight+0x1>
 1d8:	e0 90 6d 00 	lds	r14, 0x006D	; 0x80006d <weight+0x2>
 1dc:	f0 90 6e 00 	lds	r15, 0x006E	; 0x80006e <weight+0x3>
 1e0:	72 95       	swap	r23
 1e2:	62 95       	swap	r22
 1e4:	6f 70       	andi	r22, 0x0F	; 15
 1e6:	67 27       	eor	r22, r23
 1e8:	7f 70       	andi	r23, 0x0F	; 15
 1ea:	67 27       	eor	r22, r23
 1ec:	f0 d2       	rcall	.+1504   	; 0x7ce <__udivmodhi4>
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	f4 d1       	rcall	.+1000   	; 0x5dc <__floatunsisf>
 1f4:	a7 01       	movw	r20, r14
 1f6:	96 01       	movw	r18, r12
 1f8:	7f d2       	rcall	.+1278   	; 0x6f8 <__mulsf3>
 1fa:	c4 d1       	rcall	.+904    	; 0x584 <__fixunssfsi>
 1fc:	6d bd       	out	0x2d, r22	; 45
			weight=weight+0.5;
 1fe:	60 91 6b 00 	lds	r22, 0x006B	; 0x80006b <weight>
 202:	70 91 6c 00 	lds	r23, 0x006C	; 0x80006c <weight+0x1>
 206:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <weight+0x2>
 20a:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <weight+0x3>
 20e:	20 e0       	ldi	r18, 0x00	; 0
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	40 e0       	ldi	r20, 0x00	; 0
 214:	5f e3       	ldi	r21, 0x3F	; 63
 216:	52 d1       	rcall	.+676    	; 0x4bc <__addsf3>
 218:	60 93 6b 00 	sts	0x006B, r22	; 0x80006b <weight>
 21c:	70 93 6c 00 	sts	0x006C, r23	; 0x80006c <weight+0x1>
 220:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <weight+0x2>
 224:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <weight+0x3>
			if (OCR1C > (upperpot))
 228:	8d b5       	in	r24, 0x2d	; 45
 22a:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <upperpot>
 22e:	30 91 64 00 	lds	r19, 0x0064	; 0x800064 <upperpot+0x1>
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	28 17       	cp	r18, r24
 236:	39 07       	cpc	r19, r25
 238:	40 f4       	brcc	.+16     	; 0x24a <__vector_3+0x104>
			{
				weight = 0;
 23a:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <weight>
 23e:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <weight+0x1>
 242:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <weight+0x2>
 246:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <weight+0x3>
			
			break;
	}
			
	
}
 24a:	ff 91       	pop	r31
 24c:	ef 91       	pop	r30
 24e:	bf 91       	pop	r27
 250:	af 91       	pop	r26
 252:	9f 91       	pop	r25
 254:	8f 91       	pop	r24
 256:	7f 91       	pop	r23
 258:	6f 91       	pop	r22
 25a:	5f 91       	pop	r21
 25c:	4f 91       	pop	r20
 25e:	3f 91       	pop	r19
 260:	2f 91       	pop	r18
 262:	ff 90       	pop	r15
 264:	ef 90       	pop	r14
 266:	df 90       	pop	r13
 268:	cf 90       	pop	r12
 26a:	0f 90       	pop	r0
 26c:	0f be       	out	0x3f, r0	; 63
 26e:	0f 90       	pop	r0
 270:	1f 90       	pop	r1
 272:	18 95       	reti

00000274 <__vector_10>:

ISR (TIMER0_COMPA_vect)
{
 274:	1f 92       	push	r1
 276:	0f 92       	push	r0
 278:	0f b6       	in	r0, 0x3f	; 63
 27a:	0f 92       	push	r0
 27c:	11 24       	eor	r1, r1
 27e:	2f 93       	push	r18
 280:	3f 93       	push	r19
 282:	8f 93       	push	r24
 284:	9f 93       	push	r25
	// Skew mode freq adjust
	
	
	
	// update high duty (upperpot mapped 10bit -> 8Bit)
	if((upperpot / 16) > (lowerpot / 16)) 
 286:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <upperpot>
 28a:	30 91 64 00 	lds	r19, 0x0064	; 0x800064 <upperpot+0x1>
 28e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <lowerpot>
 292:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <lowerpot+0x1>
 296:	32 95       	swap	r19
 298:	22 95       	swap	r18
 29a:	2f 70       	andi	r18, 0x0F	; 15
 29c:	23 27       	eor	r18, r19
 29e:	3f 70       	andi	r19, 0x0F	; 15
 2a0:	23 27       	eor	r18, r19
 2a2:	92 95       	swap	r25
 2a4:	82 95       	swap	r24
 2a6:	8f 70       	andi	r24, 0x0F	; 15
 2a8:	89 27       	eor	r24, r25
 2aa:	9f 70       	andi	r25, 0x0F	; 15
 2ac:	89 27       	eor	r24, r25
 2ae:	82 17       	cp	r24, r18
 2b0:	93 07       	cpc	r25, r19
 2b2:	60 f0       	brcs	.+24     	; 0x2cc <__vector_10+0x58>
	{
		// upper pot cannot be more than lower pot
	}
	else 
	{
		OCR0B=0x1 + (upperpot / 16);
 2b4:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <upperpot>
 2b8:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <upperpot+0x1>
 2bc:	92 95       	swap	r25
 2be:	82 95       	swap	r24
 2c0:	8f 70       	andi	r24, 0x0F	; 15
 2c2:	89 27       	eor	r24, r25
 2c4:	9f 70       	andi	r25, 0x0F	; 15
 2c6:	89 27       	eor	r24, r25
 2c8:	8f 5f       	subi	r24, 0xFF	; 255
 2ca:	88 bd       	out	0x28, r24	; 40
	}
	
	
	// update low duty (lowerpot mapped 10bit -> 8Bit)
	if((lowerpot / 16) < (upperpot / 16)) 
 2cc:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <lowerpot>
 2d0:	30 91 62 00 	lds	r19, 0x0062	; 0x800062 <lowerpot+0x1>
 2d4:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <upperpot>
 2d8:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <upperpot+0x1>
 2dc:	32 95       	swap	r19
 2de:	22 95       	swap	r18
 2e0:	2f 70       	andi	r18, 0x0F	; 15
 2e2:	23 27       	eor	r18, r19
 2e4:	3f 70       	andi	r19, 0x0F	; 15
 2e6:	23 27       	eor	r18, r19
 2e8:	92 95       	swap	r25
 2ea:	82 95       	swap	r24
 2ec:	8f 70       	andi	r24, 0x0F	; 15
 2ee:	89 27       	eor	r24, r25
 2f0:	9f 70       	andi	r25, 0x0F	; 15
 2f2:	89 27       	eor	r24, r25
 2f4:	28 17       	cp	r18, r24
 2f6:	39 07       	cpc	r19, r25
 2f8:	60 f0       	brcs	.+24     	; 0x312 <__vector_10+0x9e>
	{
		// lower pot cannot be less than higher pot
	}
	else 
	{
		OCR0A=0x1 + (lowerpot / 16);
 2fa:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <lowerpot>
 2fe:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <lowerpot+0x1>
 302:	92 95       	swap	r25
 304:	82 95       	swap	r24
 306:	8f 70       	andi	r24, 0x0F	; 15
 308:	89 27       	eor	r24, r25
 30a:	9f 70       	andi	r25, 0x0F	; 15
 30c:	89 27       	eor	r24, r25
 30e:	8f 5f       	subi	r24, 0xFF	; 255
 310:	89 bd       	out	0x29, r24	; 41
	}
	
	

}
 312:	9f 91       	pop	r25
 314:	8f 91       	pop	r24
 316:	3f 91       	pop	r19
 318:	2f 91       	pop	r18
 31a:	0f 90       	pop	r0
 31c:	0f be       	out	0x3f, r0	; 63
 31e:	0f 90       	pop	r0
 320:	1f 90       	pop	r1
 322:	18 95       	reti

00000324 <__vector_12>:

ISR (WDT_vect)
{
 324:	1f 92       	push	r1
 326:	0f 92       	push	r0
 328:	0f b6       	in	r0, 0x3f	; 63
 32a:	0f 92       	push	r0
 32c:	11 24       	eor	r1, r1
 32e:	8f 93       	push	r24
 330:	9f 93       	push	r25
	// increment the counter
	wdcounter++;
 332:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <wdcounter>
 336:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <wdcounter+0x1>
 33a:	01 96       	adiw	r24, 0x01	; 1
 33c:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <wdcounter+0x1>
 340:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <wdcounter>
	// re-enable the WDG interrupt to prevent device reset.
	WDTCR |= (1<<WDIE);
 344:	81 b5       	in	r24, 0x21	; 33
 346:	80 64       	ori	r24, 0x40	; 64
 348:	81 bd       	out	0x21, r24	; 33
}
 34a:	9f 91       	pop	r25
 34c:	8f 91       	pop	r24
 34e:	0f 90       	pop	r0
 350:	0f be       	out	0x3f, r0	; 63
 352:	0f 90       	pop	r0
 354:	1f 90       	pop	r1
 356:	18 95       	reti

00000358 <__vector_2>:

ISR (PCINT0_vect)
{
 358:	1f 92       	push	r1
 35a:	0f 92       	push	r0
 35c:	0f b6       	in	r0, 0x3f	; 63
 35e:	0f 92       	push	r0
 360:	11 24       	eor	r1, r1
 362:	cf 92       	push	r12
 364:	df 92       	push	r13
 366:	ef 92       	push	r14
 368:	ff 92       	push	r15
 36a:	2f 93       	push	r18
 36c:	3f 93       	push	r19
 36e:	4f 93       	push	r20
 370:	5f 93       	push	r21
 372:	6f 93       	push	r22
 374:	7f 93       	push	r23
 376:	8f 93       	push	r24
 378:	9f 93       	push	r25
 37a:	af 93       	push	r26
 37c:	bf 93       	push	r27
 37e:	ef 93       	push	r30
 380:	ff 93       	push	r31
	// check for bounce
	uint32_t interrupt_time = wdcounter;
 382:	c0 90 69 00 	lds	r12, 0x0069	; 0x800069 <wdcounter>
 386:	d0 90 6a 00 	lds	r13, 0x006A	; 0x80006a <wdcounter+0x1>
 38a:	e1 2c       	mov	r14, r1
 38c:	f1 2c       	mov	r15, r1
	if (interrupt_time - pd0_last_interrupt_time > DEBOUNCE_DELAY) 
 38e:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <pd0_last_interrupt_time>
 392:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <pd0_last_interrupt_time+0x1>
 396:	a0 91 67 00 	lds	r26, 0x0067	; 0x800067 <pd0_last_interrupt_time+0x2>
 39a:	b0 91 68 00 	lds	r27, 0x0068	; 0x800068 <pd0_last_interrupt_time+0x3>
 39e:	a7 01       	movw	r20, r14
 3a0:	96 01       	movw	r18, r12
 3a2:	28 1b       	sub	r18, r24
 3a4:	39 0b       	sbc	r19, r25
 3a6:	4a 0b       	sbc	r20, r26
 3a8:	5b 0b       	sbc	r21, r27
 3aa:	2d 33       	cpi	r18, 0x3D	; 61
 3ac:	31 05       	cpc	r19, r1
 3ae:	41 05       	cpc	r20, r1
 3b0:	51 05       	cpc	r21, r1
 3b2:	00 f1       	brcs	.+64     	; 0x3f4 <__vector_2+0x9c>
	{
		// toggle the control mode
		switch(currentMode) 
 3b4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 3b8:	81 30       	cpi	r24, 0x01	; 1
 3ba:	49 f0       	breq	.+18     	; 0x3ce <__vector_2+0x76>
 3bc:	18 f0       	brcs	.+6      	; 0x3c4 <__vector_2+0x6c>
 3be:	82 30       	cpi	r24, 0x02	; 2
 3c0:	61 f0       	breq	.+24     	; 0x3da <__vector_2+0x82>
 3c2:	10 c0       	rjmp	.+32     	; 0x3e4 <__vector_2+0x8c>
		{
			case NORMAL:
				
				TimerModeEnable(SKEW);
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	52 de       	rcall	.-860    	; 0x6c <TimerModeEnable>
				setModeIndicator(SKEW);
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	3f de       	rcall	.-898    	; 0x4a <setModeIndicator>

				break;
 3cc:	0b c0       	rjmp	.+22     	; 0x3e4 <__vector_2+0x8c>

			case SKEW:
				
				setModeIndicator(SWEEP);
 3ce:	82 e0       	ldi	r24, 0x02	; 2
 3d0:	3c de       	rcall	.-904    	; 0x4a <setModeIndicator>
				TimerModeEnable(SWEEP);
 3d2:	82 e0       	ldi	r24, 0x02	; 2
 3d4:	4b de       	rcall	.-874    	; 0x6c <TimerModeEnable>
				resetPWM();
 3d6:	34 de       	rcall	.-920    	; 0x40 <resetPWM>
				break;	
 3d8:	05 c0       	rjmp	.+10     	; 0x3e4 <__vector_2+0x8c>

			case SWEEP:
				
				setModeIndicator(NORMAL);
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	36 de       	rcall	.-916    	; 0x4a <setModeIndicator>
				TimerModeEnable(NORMAL);
 3de:	80 e0       	ldi	r24, 0x00	; 0
 3e0:	45 de       	rcall	.-886    	; 0x6c <TimerModeEnable>
				resetPWM();
 3e2:	2e de       	rcall	.-932    	; 0x40 <resetPWM>
				
				break;
		}
		// store the tick of the last successful press
		pd0_last_interrupt_time = interrupt_time;
 3e4:	c0 92 65 00 	sts	0x0065, r12	; 0x800065 <pd0_last_interrupt_time>
 3e8:	d0 92 66 00 	sts	0x0066, r13	; 0x800066 <pd0_last_interrupt_time+0x1>
 3ec:	e0 92 67 00 	sts	0x0067, r14	; 0x800067 <pd0_last_interrupt_time+0x2>
 3f0:	f0 92 68 00 	sts	0x0068, r15	; 0x800068 <pd0_last_interrupt_time+0x3>
	
	}
}
 3f4:	ff 91       	pop	r31
 3f6:	ef 91       	pop	r30
 3f8:	bf 91       	pop	r27
 3fa:	af 91       	pop	r26
 3fc:	9f 91       	pop	r25
 3fe:	8f 91       	pop	r24
 400:	7f 91       	pop	r23
 402:	6f 91       	pop	r22
 404:	5f 91       	pop	r21
 406:	4f 91       	pop	r20
 408:	3f 91       	pop	r19
 40a:	2f 91       	pop	r18
 40c:	ff 90       	pop	r15
 40e:	ef 90       	pop	r14
 410:	df 90       	pop	r13
 412:	cf 90       	pop	r12
 414:	0f 90       	pop	r0
 416:	0f be       	out	0x3f, r0	; 63
 418:	0f 90       	pop	r0
 41a:	1f 90       	pop	r1
 41c:	18 95       	reti

0000041e <__vector_8>:

ISR (ADC_vect)
{
 41e:	1f 92       	push	r1
 420:	0f 92       	push	r0
 422:	0f b6       	in	r0, 0x3f	; 63
 424:	0f 92       	push	r0
 426:	11 24       	eor	r1, r1
 428:	2f 93       	push	r18
 42a:	3f 93       	push	r19
 42c:	8f 93       	push	r24
 42e:	9f 93       	push	r25
	// 1.check current adc mux channel
	// 2.read ADC result
	// 3.enable the next contiguous mux channel
	
	switch(ADMUX) {
 430:	87 b1       	in	r24, 0x07	; 7
 432:	82 30       	cpi	r24, 0x02	; 2
 434:	19 f0       	breq	.+6      	; 0x43c <__vector_8+0x1e>
 436:	83 30       	cpi	r24, 0x03	; 3
 438:	e9 f0       	breq	.+58     	; 0x474 <__vector_8+0x56>
 43a:	35 c0       	rjmp	.+106    	; 0x4a6 <__vector_8+0x88>
		
		// if ADLAR bit set, use switch case mask '_ADCLA | _ADCXEN'
		// if ADLAR bit cleared, use switch case mask '_ADCXEN'
		
		case _ADC2EN:
		upperpot = ADCL;				// read 8 LSB
 43c:	84 b1       	in	r24, 0x04	; 4
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <upperpot+0x1>
 444:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <upperpot>
		upperpot += ADCH << 8;		// read 2 MSB, shift them left 8 positions and add to LSB. Result = 2MSB + 8LSB
 448:	95 b1       	in	r25, 0x05	; 5
 44a:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <upperpot>
 44e:	30 91 64 00 	lds	r19, 0x0064	; 0x800064 <upperpot+0x1>
 452:	89 2f       	mov	r24, r25
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	98 2f       	mov	r25, r24
 458:	88 27       	eor	r24, r24
 45a:	82 0f       	add	r24, r18
 45c:	93 1f       	adc	r25, r19
 45e:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <upperpot+0x1>
 462:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <upperpot>
		ADMUX &= _ADCLA | _ADC0EN;		//  clear MUX bits whilst retaining ADC Left Adjust Result
 466:	87 b1       	in	r24, 0x07	; 7
 468:	80 72       	andi	r24, 0x20	; 32
 46a:	87 b9       	out	0x07, r24	; 7
		ADMUX |= _ADC3EN;				// set ADC3 for next check
 46c:	87 b1       	in	r24, 0x07	; 7
 46e:	83 60       	ori	r24, 0x03	; 3
 470:	87 b9       	out	0x07, r24	; 7
		break;
 472:	19 c0       	rjmp	.+50     	; 0x4a6 <__vector_8+0x88>
		
		case _ADC3EN:
		lowerpot = ADCL;				// read 8 LSB
 474:	84 b1       	in	r24, 0x04	; 4
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <lowerpot+0x1>
 47c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <lowerpot>
		lowerpot += ADCH << 8;		// read 2 MSB, shift them left 8 positions and add to LSB. Result = 2MSB + 8LSB
 480:	95 b1       	in	r25, 0x05	; 5
 482:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <lowerpot>
 486:	30 91 62 00 	lds	r19, 0x0062	; 0x800062 <lowerpot+0x1>
 48a:	89 2f       	mov	r24, r25
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	98 2f       	mov	r25, r24
 490:	88 27       	eor	r24, r24
 492:	82 0f       	add	r24, r18
 494:	93 1f       	adc	r25, r19
 496:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <lowerpot+0x1>
 49a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <lowerpot>
		ADMUX &= _ADCLA | _ADC0EN;		// clear MUX bits whilst retaining ADC Left Adjust Result
 49e:	87 b1       	in	r24, 0x07	; 7
 4a0:	80 72       	andi	r24, 0x20	; 32
 4a2:	87 b9       	out	0x07, r24	; 7
		ADMUX |= _ADC2EN;				// set ADC2 for check
 4a4:	39 9a       	sbi	0x07, 1	; 7
		break;
		
	}
	// Start the next AD conversion
	ADCSRA|=(1<<ADSC);
 4a6:	36 9a       	sbi	0x06, 6	; 6
}
 4a8:	9f 91       	pop	r25
 4aa:	8f 91       	pop	r24
 4ac:	3f 91       	pop	r19
 4ae:	2f 91       	pop	r18
 4b0:	0f 90       	pop	r0
 4b2:	0f be       	out	0x3f, r0	; 63
 4b4:	0f 90       	pop	r0
 4b6:	1f 90       	pop	r1
 4b8:	18 95       	reti

000004ba <__subsf3>:
 4ba:	50 58       	subi	r21, 0x80	; 128

000004bc <__addsf3>:
 4bc:	bb 27       	eor	r27, r27
 4be:	aa 27       	eor	r26, r26
 4c0:	0e d0       	rcall	.+28     	; 0x4de <__addsf3x>
 4c2:	e0 c0       	rjmp	.+448    	; 0x684 <__fp_round>
 4c4:	d1 d0       	rcall	.+418    	; 0x668 <__fp_pscA>
 4c6:	30 f0       	brcs	.+12     	; 0x4d4 <__addsf3+0x18>
 4c8:	d6 d0       	rcall	.+428    	; 0x676 <__fp_pscB>
 4ca:	20 f0       	brcs	.+8      	; 0x4d4 <__addsf3+0x18>
 4cc:	31 f4       	brne	.+12     	; 0x4da <__addsf3+0x1e>
 4ce:	9f 3f       	cpi	r25, 0xFF	; 255
 4d0:	11 f4       	brne	.+4      	; 0x4d6 <__addsf3+0x1a>
 4d2:	1e f4       	brtc	.+6      	; 0x4da <__addsf3+0x1e>
 4d4:	c6 c0       	rjmp	.+396    	; 0x662 <__fp_nan>
 4d6:	0e f4       	brtc	.+2      	; 0x4da <__addsf3+0x1e>
 4d8:	e0 95       	com	r30
 4da:	e7 fb       	bst	r30, 7
 4dc:	bc c0       	rjmp	.+376    	; 0x656 <__fp_inf>

000004de <__addsf3x>:
 4de:	e9 2f       	mov	r30, r25
 4e0:	e2 d0       	rcall	.+452    	; 0x6a6 <__fp_split3>
 4e2:	80 f3       	brcs	.-32     	; 0x4c4 <__addsf3+0x8>
 4e4:	ba 17       	cp	r27, r26
 4e6:	62 07       	cpc	r22, r18
 4e8:	73 07       	cpc	r23, r19
 4ea:	84 07       	cpc	r24, r20
 4ec:	95 07       	cpc	r25, r21
 4ee:	18 f0       	brcs	.+6      	; 0x4f6 <__addsf3x+0x18>
 4f0:	71 f4       	brne	.+28     	; 0x50e <__addsf3x+0x30>
 4f2:	9e f5       	brtc	.+102    	; 0x55a <__addsf3x+0x7c>
 4f4:	fa c0       	rjmp	.+500    	; 0x6ea <__fp_zero>
 4f6:	0e f4       	brtc	.+2      	; 0x4fa <__addsf3x+0x1c>
 4f8:	e0 95       	com	r30
 4fa:	0b 2e       	mov	r0, r27
 4fc:	ba 2f       	mov	r27, r26
 4fe:	a0 2d       	mov	r26, r0
 500:	0b 01       	movw	r0, r22
 502:	b9 01       	movw	r22, r18
 504:	90 01       	movw	r18, r0
 506:	0c 01       	movw	r0, r24
 508:	ca 01       	movw	r24, r20
 50a:	a0 01       	movw	r20, r0
 50c:	11 24       	eor	r1, r1
 50e:	ff 27       	eor	r31, r31
 510:	59 1b       	sub	r21, r25
 512:	99 f0       	breq	.+38     	; 0x53a <__addsf3x+0x5c>
 514:	59 3f       	cpi	r21, 0xF9	; 249
 516:	50 f4       	brcc	.+20     	; 0x52c <__addsf3x+0x4e>
 518:	50 3e       	cpi	r21, 0xE0	; 224
 51a:	68 f1       	brcs	.+90     	; 0x576 <__addsf3x+0x98>
 51c:	1a 16       	cp	r1, r26
 51e:	f0 40       	sbci	r31, 0x00	; 0
 520:	a2 2f       	mov	r26, r18
 522:	23 2f       	mov	r18, r19
 524:	34 2f       	mov	r19, r20
 526:	44 27       	eor	r20, r20
 528:	58 5f       	subi	r21, 0xF8	; 248
 52a:	f3 cf       	rjmp	.-26     	; 0x512 <__addsf3x+0x34>
 52c:	46 95       	lsr	r20
 52e:	37 95       	ror	r19
 530:	27 95       	ror	r18
 532:	a7 95       	ror	r26
 534:	f0 40       	sbci	r31, 0x00	; 0
 536:	53 95       	inc	r21
 538:	c9 f7       	brne	.-14     	; 0x52c <__addsf3x+0x4e>
 53a:	7e f4       	brtc	.+30     	; 0x55a <__addsf3x+0x7c>
 53c:	1f 16       	cp	r1, r31
 53e:	ba 0b       	sbc	r27, r26
 540:	62 0b       	sbc	r22, r18
 542:	73 0b       	sbc	r23, r19
 544:	84 0b       	sbc	r24, r20
 546:	ba f0       	brmi	.+46     	; 0x576 <__addsf3x+0x98>
 548:	91 50       	subi	r25, 0x01	; 1
 54a:	a1 f0       	breq	.+40     	; 0x574 <__addsf3x+0x96>
 54c:	ff 0f       	add	r31, r31
 54e:	bb 1f       	adc	r27, r27
 550:	66 1f       	adc	r22, r22
 552:	77 1f       	adc	r23, r23
 554:	88 1f       	adc	r24, r24
 556:	c2 f7       	brpl	.-16     	; 0x548 <__addsf3x+0x6a>
 558:	0e c0       	rjmp	.+28     	; 0x576 <__addsf3x+0x98>
 55a:	ba 0f       	add	r27, r26
 55c:	62 1f       	adc	r22, r18
 55e:	73 1f       	adc	r23, r19
 560:	84 1f       	adc	r24, r20
 562:	48 f4       	brcc	.+18     	; 0x576 <__addsf3x+0x98>
 564:	87 95       	ror	r24
 566:	77 95       	ror	r23
 568:	67 95       	ror	r22
 56a:	b7 95       	ror	r27
 56c:	f7 95       	ror	r31
 56e:	9e 3f       	cpi	r25, 0xFE	; 254
 570:	08 f0       	brcs	.+2      	; 0x574 <__addsf3x+0x96>
 572:	b3 cf       	rjmp	.-154    	; 0x4da <__addsf3+0x1e>
 574:	93 95       	inc	r25
 576:	88 0f       	add	r24, r24
 578:	08 f0       	brcs	.+2      	; 0x57c <__addsf3x+0x9e>
 57a:	99 27       	eor	r25, r25
 57c:	ee 0f       	add	r30, r30
 57e:	97 95       	ror	r25
 580:	87 95       	ror	r24
 582:	08 95       	ret

00000584 <__fixunssfsi>:
 584:	98 d0       	rcall	.+304    	; 0x6b6 <__fp_splitA>
 586:	88 f0       	brcs	.+34     	; 0x5aa <__fixunssfsi+0x26>
 588:	9f 57       	subi	r25, 0x7F	; 127
 58a:	90 f0       	brcs	.+36     	; 0x5b0 <__fixunssfsi+0x2c>
 58c:	b9 2f       	mov	r27, r25
 58e:	99 27       	eor	r25, r25
 590:	b7 51       	subi	r27, 0x17	; 23
 592:	a0 f0       	brcs	.+40     	; 0x5bc <__fixunssfsi+0x38>
 594:	d1 f0       	breq	.+52     	; 0x5ca <__fixunssfsi+0x46>
 596:	66 0f       	add	r22, r22
 598:	77 1f       	adc	r23, r23
 59a:	88 1f       	adc	r24, r24
 59c:	99 1f       	adc	r25, r25
 59e:	1a f0       	brmi	.+6      	; 0x5a6 <__fixunssfsi+0x22>
 5a0:	ba 95       	dec	r27
 5a2:	c9 f7       	brne	.-14     	; 0x596 <__fixunssfsi+0x12>
 5a4:	12 c0       	rjmp	.+36     	; 0x5ca <__fixunssfsi+0x46>
 5a6:	b1 30       	cpi	r27, 0x01	; 1
 5a8:	81 f0       	breq	.+32     	; 0x5ca <__fixunssfsi+0x46>
 5aa:	9f d0       	rcall	.+318    	; 0x6ea <__fp_zero>
 5ac:	b1 e0       	ldi	r27, 0x01	; 1
 5ae:	08 95       	ret
 5b0:	9c c0       	rjmp	.+312    	; 0x6ea <__fp_zero>
 5b2:	67 2f       	mov	r22, r23
 5b4:	78 2f       	mov	r23, r24
 5b6:	88 27       	eor	r24, r24
 5b8:	b8 5f       	subi	r27, 0xF8	; 248
 5ba:	39 f0       	breq	.+14     	; 0x5ca <__fixunssfsi+0x46>
 5bc:	b9 3f       	cpi	r27, 0xF9	; 249
 5be:	cc f3       	brlt	.-14     	; 0x5b2 <__fixunssfsi+0x2e>
 5c0:	86 95       	lsr	r24
 5c2:	77 95       	ror	r23
 5c4:	67 95       	ror	r22
 5c6:	b3 95       	inc	r27
 5c8:	d9 f7       	brne	.-10     	; 0x5c0 <__fixunssfsi+0x3c>
 5ca:	3e f4       	brtc	.+14     	; 0x5da <__fixunssfsi+0x56>
 5cc:	90 95       	com	r25
 5ce:	80 95       	com	r24
 5d0:	70 95       	com	r23
 5d2:	61 95       	neg	r22
 5d4:	7f 4f       	sbci	r23, 0xFF	; 255
 5d6:	8f 4f       	sbci	r24, 0xFF	; 255
 5d8:	9f 4f       	sbci	r25, 0xFF	; 255
 5da:	08 95       	ret

000005dc <__floatunsisf>:
 5dc:	e8 94       	clt
 5de:	09 c0       	rjmp	.+18     	; 0x5f2 <__floatsisf+0x12>

000005e0 <__floatsisf>:
 5e0:	97 fb       	bst	r25, 7
 5e2:	3e f4       	brtc	.+14     	; 0x5f2 <__floatsisf+0x12>
 5e4:	90 95       	com	r25
 5e6:	80 95       	com	r24
 5e8:	70 95       	com	r23
 5ea:	61 95       	neg	r22
 5ec:	7f 4f       	sbci	r23, 0xFF	; 255
 5ee:	8f 4f       	sbci	r24, 0xFF	; 255
 5f0:	9f 4f       	sbci	r25, 0xFF	; 255
 5f2:	99 23       	and	r25, r25
 5f4:	a9 f0       	breq	.+42     	; 0x620 <__floatsisf+0x40>
 5f6:	f9 2f       	mov	r31, r25
 5f8:	96 e9       	ldi	r25, 0x96	; 150
 5fa:	bb 27       	eor	r27, r27
 5fc:	93 95       	inc	r25
 5fe:	f6 95       	lsr	r31
 600:	87 95       	ror	r24
 602:	77 95       	ror	r23
 604:	67 95       	ror	r22
 606:	b7 95       	ror	r27
 608:	f1 11       	cpse	r31, r1
 60a:	f8 cf       	rjmp	.-16     	; 0x5fc <__floatsisf+0x1c>
 60c:	fa f4       	brpl	.+62     	; 0x64c <__floatsisf+0x6c>
 60e:	bb 0f       	add	r27, r27
 610:	11 f4       	brne	.+4      	; 0x616 <__floatsisf+0x36>
 612:	60 ff       	sbrs	r22, 0
 614:	1b c0       	rjmp	.+54     	; 0x64c <__floatsisf+0x6c>
 616:	6f 5f       	subi	r22, 0xFF	; 255
 618:	7f 4f       	sbci	r23, 0xFF	; 255
 61a:	8f 4f       	sbci	r24, 0xFF	; 255
 61c:	9f 4f       	sbci	r25, 0xFF	; 255
 61e:	16 c0       	rjmp	.+44     	; 0x64c <__floatsisf+0x6c>
 620:	88 23       	and	r24, r24
 622:	11 f0       	breq	.+4      	; 0x628 <__floatsisf+0x48>
 624:	96 e9       	ldi	r25, 0x96	; 150
 626:	11 c0       	rjmp	.+34     	; 0x64a <__floatsisf+0x6a>
 628:	77 23       	and	r23, r23
 62a:	21 f0       	breq	.+8      	; 0x634 <__floatsisf+0x54>
 62c:	9e e8       	ldi	r25, 0x8E	; 142
 62e:	87 2f       	mov	r24, r23
 630:	76 2f       	mov	r23, r22
 632:	05 c0       	rjmp	.+10     	; 0x63e <__floatsisf+0x5e>
 634:	66 23       	and	r22, r22
 636:	71 f0       	breq	.+28     	; 0x654 <__floatsisf+0x74>
 638:	96 e8       	ldi	r25, 0x86	; 134
 63a:	86 2f       	mov	r24, r22
 63c:	70 e0       	ldi	r23, 0x00	; 0
 63e:	60 e0       	ldi	r22, 0x00	; 0
 640:	2a f0       	brmi	.+10     	; 0x64c <__floatsisf+0x6c>
 642:	9a 95       	dec	r25
 644:	66 0f       	add	r22, r22
 646:	77 1f       	adc	r23, r23
 648:	88 1f       	adc	r24, r24
 64a:	da f7       	brpl	.-10     	; 0x642 <__floatsisf+0x62>
 64c:	88 0f       	add	r24, r24
 64e:	96 95       	lsr	r25
 650:	87 95       	ror	r24
 652:	97 f9       	bld	r25, 7
 654:	08 95       	ret

00000656 <__fp_inf>:
 656:	97 f9       	bld	r25, 7
 658:	9f 67       	ori	r25, 0x7F	; 127
 65a:	80 e8       	ldi	r24, 0x80	; 128
 65c:	70 e0       	ldi	r23, 0x00	; 0
 65e:	60 e0       	ldi	r22, 0x00	; 0
 660:	08 95       	ret

00000662 <__fp_nan>:
 662:	9f ef       	ldi	r25, 0xFF	; 255
 664:	80 ec       	ldi	r24, 0xC0	; 192
 666:	08 95       	ret

00000668 <__fp_pscA>:
 668:	00 24       	eor	r0, r0
 66a:	0a 94       	dec	r0
 66c:	16 16       	cp	r1, r22
 66e:	17 06       	cpc	r1, r23
 670:	18 06       	cpc	r1, r24
 672:	09 06       	cpc	r0, r25
 674:	08 95       	ret

00000676 <__fp_pscB>:
 676:	00 24       	eor	r0, r0
 678:	0a 94       	dec	r0
 67a:	12 16       	cp	r1, r18
 67c:	13 06       	cpc	r1, r19
 67e:	14 06       	cpc	r1, r20
 680:	05 06       	cpc	r0, r21
 682:	08 95       	ret

00000684 <__fp_round>:
 684:	09 2e       	mov	r0, r25
 686:	03 94       	inc	r0
 688:	00 0c       	add	r0, r0
 68a:	11 f4       	brne	.+4      	; 0x690 <__fp_round+0xc>
 68c:	88 23       	and	r24, r24
 68e:	52 f0       	brmi	.+20     	; 0x6a4 <__fp_round+0x20>
 690:	bb 0f       	add	r27, r27
 692:	40 f4       	brcc	.+16     	; 0x6a4 <__fp_round+0x20>
 694:	bf 2b       	or	r27, r31
 696:	11 f4       	brne	.+4      	; 0x69c <__fp_round+0x18>
 698:	60 ff       	sbrs	r22, 0
 69a:	04 c0       	rjmp	.+8      	; 0x6a4 <__fp_round+0x20>
 69c:	6f 5f       	subi	r22, 0xFF	; 255
 69e:	7f 4f       	sbci	r23, 0xFF	; 255
 6a0:	8f 4f       	sbci	r24, 0xFF	; 255
 6a2:	9f 4f       	sbci	r25, 0xFF	; 255
 6a4:	08 95       	ret

000006a6 <__fp_split3>:
 6a6:	57 fd       	sbrc	r21, 7
 6a8:	90 58       	subi	r25, 0x80	; 128
 6aa:	44 0f       	add	r20, r20
 6ac:	55 1f       	adc	r21, r21
 6ae:	59 f0       	breq	.+22     	; 0x6c6 <__fp_splitA+0x10>
 6b0:	5f 3f       	cpi	r21, 0xFF	; 255
 6b2:	71 f0       	breq	.+28     	; 0x6d0 <__fp_splitA+0x1a>
 6b4:	47 95       	ror	r20

000006b6 <__fp_splitA>:
 6b6:	88 0f       	add	r24, r24
 6b8:	97 fb       	bst	r25, 7
 6ba:	99 1f       	adc	r25, r25
 6bc:	61 f0       	breq	.+24     	; 0x6d6 <__fp_splitA+0x20>
 6be:	9f 3f       	cpi	r25, 0xFF	; 255
 6c0:	79 f0       	breq	.+30     	; 0x6e0 <__fp_splitA+0x2a>
 6c2:	87 95       	ror	r24
 6c4:	08 95       	ret
 6c6:	12 16       	cp	r1, r18
 6c8:	13 06       	cpc	r1, r19
 6ca:	14 06       	cpc	r1, r20
 6cc:	55 1f       	adc	r21, r21
 6ce:	f2 cf       	rjmp	.-28     	; 0x6b4 <__fp_split3+0xe>
 6d0:	46 95       	lsr	r20
 6d2:	f1 df       	rcall	.-30     	; 0x6b6 <__fp_splitA>
 6d4:	08 c0       	rjmp	.+16     	; 0x6e6 <__fp_splitA+0x30>
 6d6:	16 16       	cp	r1, r22
 6d8:	17 06       	cpc	r1, r23
 6da:	18 06       	cpc	r1, r24
 6dc:	99 1f       	adc	r25, r25
 6de:	f1 cf       	rjmp	.-30     	; 0x6c2 <__fp_splitA+0xc>
 6e0:	86 95       	lsr	r24
 6e2:	71 05       	cpc	r23, r1
 6e4:	61 05       	cpc	r22, r1
 6e6:	08 94       	sec
 6e8:	08 95       	ret

000006ea <__fp_zero>:
 6ea:	e8 94       	clt

000006ec <__fp_szero>:
 6ec:	bb 27       	eor	r27, r27
 6ee:	66 27       	eor	r22, r22
 6f0:	77 27       	eor	r23, r23
 6f2:	cb 01       	movw	r24, r22
 6f4:	97 f9       	bld	r25, 7
 6f6:	08 95       	ret

000006f8 <__mulsf3>:
 6f8:	0a d0       	rcall	.+20     	; 0x70e <__mulsf3x>
 6fa:	c4 cf       	rjmp	.-120    	; 0x684 <__fp_round>
 6fc:	b5 df       	rcall	.-150    	; 0x668 <__fp_pscA>
 6fe:	28 f0       	brcs	.+10     	; 0x70a <__mulsf3+0x12>
 700:	ba df       	rcall	.-140    	; 0x676 <__fp_pscB>
 702:	18 f0       	brcs	.+6      	; 0x70a <__mulsf3+0x12>
 704:	95 23       	and	r25, r21
 706:	09 f0       	breq	.+2      	; 0x70a <__mulsf3+0x12>
 708:	a6 cf       	rjmp	.-180    	; 0x656 <__fp_inf>
 70a:	ab cf       	rjmp	.-170    	; 0x662 <__fp_nan>
 70c:	ef cf       	rjmp	.-34     	; 0x6ec <__fp_szero>

0000070e <__mulsf3x>:
 70e:	cb df       	rcall	.-106    	; 0x6a6 <__fp_split3>
 710:	a8 f3       	brcs	.-22     	; 0x6fc <__mulsf3+0x4>

00000712 <__mulsf3_pse>:
 712:	99 23       	and	r25, r25
 714:	d9 f3       	breq	.-10     	; 0x70c <__mulsf3+0x14>
 716:	55 23       	and	r21, r21
 718:	c9 f3       	breq	.-14     	; 0x70c <__mulsf3+0x14>
 71a:	95 0f       	add	r25, r21
 71c:	50 e0       	ldi	r21, 0x00	; 0
 71e:	55 1f       	adc	r21, r21
 720:	aa 27       	eor	r26, r26
 722:	ee 27       	eor	r30, r30
 724:	ff 27       	eor	r31, r31
 726:	bb 27       	eor	r27, r27
 728:	00 24       	eor	r0, r0
 72a:	08 94       	sec
 72c:	67 95       	ror	r22
 72e:	20 f4       	brcc	.+8      	; 0x738 <__mulsf3_pse+0x26>
 730:	e2 0f       	add	r30, r18
 732:	f3 1f       	adc	r31, r19
 734:	b4 1f       	adc	r27, r20
 736:	0a 1e       	adc	r0, r26
 738:	22 0f       	add	r18, r18
 73a:	33 1f       	adc	r19, r19
 73c:	44 1f       	adc	r20, r20
 73e:	aa 1f       	adc	r26, r26
 740:	66 95       	lsr	r22
 742:	a9 f7       	brne	.-22     	; 0x72e <__mulsf3_pse+0x1c>
 744:	77 95       	ror	r23
 746:	30 f4       	brcc	.+12     	; 0x754 <__mulsf3_pse+0x42>
 748:	f3 0f       	add	r31, r19
 74a:	b4 1f       	adc	r27, r20
 74c:	0a 1e       	adc	r0, r26
 74e:	12 1e       	adc	r1, r18
 750:	08 f4       	brcc	.+2      	; 0x754 <__mulsf3_pse+0x42>
 752:	63 95       	inc	r22
 754:	33 0f       	add	r19, r19
 756:	44 1f       	adc	r20, r20
 758:	aa 1f       	adc	r26, r26
 75a:	22 1f       	adc	r18, r18
 75c:	76 95       	lsr	r23
 75e:	99 f7       	brne	.-26     	; 0x746 <__mulsf3_pse+0x34>
 760:	87 95       	ror	r24
 762:	20 f4       	brcc	.+8      	; 0x76c <__mulsf3_pse+0x5a>
 764:	b4 0f       	add	r27, r20
 766:	0a 1e       	adc	r0, r26
 768:	12 1e       	adc	r1, r18
 76a:	63 1f       	adc	r22, r19
 76c:	44 0f       	add	r20, r20
 76e:	aa 1f       	adc	r26, r26
 770:	22 1f       	adc	r18, r18
 772:	33 1f       	adc	r19, r19
 774:	86 95       	lsr	r24
 776:	a9 f7       	brne	.-22     	; 0x762 <__mulsf3_pse+0x50>
 778:	86 2f       	mov	r24, r22
 77a:	71 2d       	mov	r23, r1
 77c:	60 2d       	mov	r22, r0
 77e:	11 24       	eor	r1, r1
 780:	9f 57       	subi	r25, 0x7F	; 127
 782:	50 40       	sbci	r21, 0x00	; 0
 784:	8a f0       	brmi	.+34     	; 0x7a8 <__mulsf3_pse+0x96>
 786:	e1 f0       	breq	.+56     	; 0x7c0 <__mulsf3_pse+0xae>
 788:	88 23       	and	r24, r24
 78a:	4a f0       	brmi	.+18     	; 0x79e <__mulsf3_pse+0x8c>
 78c:	ee 0f       	add	r30, r30
 78e:	ff 1f       	adc	r31, r31
 790:	bb 1f       	adc	r27, r27
 792:	66 1f       	adc	r22, r22
 794:	77 1f       	adc	r23, r23
 796:	88 1f       	adc	r24, r24
 798:	91 50       	subi	r25, 0x01	; 1
 79a:	50 40       	sbci	r21, 0x00	; 0
 79c:	a9 f7       	brne	.-22     	; 0x788 <__mulsf3_pse+0x76>
 79e:	9e 3f       	cpi	r25, 0xFE	; 254
 7a0:	51 05       	cpc	r21, r1
 7a2:	70 f0       	brcs	.+28     	; 0x7c0 <__mulsf3_pse+0xae>
 7a4:	58 cf       	rjmp	.-336    	; 0x656 <__fp_inf>
 7a6:	a2 cf       	rjmp	.-188    	; 0x6ec <__fp_szero>
 7a8:	5f 3f       	cpi	r21, 0xFF	; 255
 7aa:	ec f3       	brlt	.-6      	; 0x7a6 <__mulsf3_pse+0x94>
 7ac:	98 3e       	cpi	r25, 0xE8	; 232
 7ae:	dc f3       	brlt	.-10     	; 0x7a6 <__mulsf3_pse+0x94>
 7b0:	86 95       	lsr	r24
 7b2:	77 95       	ror	r23
 7b4:	67 95       	ror	r22
 7b6:	b7 95       	ror	r27
 7b8:	f7 95       	ror	r31
 7ba:	e7 95       	ror	r30
 7bc:	9f 5f       	subi	r25, 0xFF	; 255
 7be:	c1 f7       	brne	.-16     	; 0x7b0 <__mulsf3_pse+0x9e>
 7c0:	fe 2b       	or	r31, r30
 7c2:	88 0f       	add	r24, r24
 7c4:	91 1d       	adc	r25, r1
 7c6:	96 95       	lsr	r25
 7c8:	87 95       	ror	r24
 7ca:	97 f9       	bld	r25, 7
 7cc:	08 95       	ret

000007ce <__udivmodhi4>:
 7ce:	aa 1b       	sub	r26, r26
 7d0:	bb 1b       	sub	r27, r27
 7d2:	51 e1       	ldi	r21, 0x11	; 17
 7d4:	07 c0       	rjmp	.+14     	; 0x7e4 <__udivmodhi4_ep>

000007d6 <__udivmodhi4_loop>:
 7d6:	aa 1f       	adc	r26, r26
 7d8:	bb 1f       	adc	r27, r27
 7da:	a6 17       	cp	r26, r22
 7dc:	b7 07       	cpc	r27, r23
 7de:	10 f0       	brcs	.+4      	; 0x7e4 <__udivmodhi4_ep>
 7e0:	a6 1b       	sub	r26, r22
 7e2:	b7 0b       	sbc	r27, r23

000007e4 <__udivmodhi4_ep>:
 7e4:	88 1f       	adc	r24, r24
 7e6:	99 1f       	adc	r25, r25
 7e8:	5a 95       	dec	r21
 7ea:	a9 f7       	brne	.-22     	; 0x7d6 <__udivmodhi4_loop>
 7ec:	80 95       	com	r24
 7ee:	90 95       	com	r25
 7f0:	bc 01       	movw	r22, r24
 7f2:	cd 01       	movw	r24, r26
 7f4:	08 95       	ret

000007f6 <_exit>:
 7f6:	f8 94       	cli

000007f8 <__stop_program>:
 7f8:	ff cf       	rjmp	.-2      	; 0x7f8 <__stop_program>
