
Atomizer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000782  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000782  00000816  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800062  00800062  00000818  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000818  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000848  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000884  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000814  00000000  00000000  000008ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005f2  00000000  00000000  00001100  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004fe  00000000  00000000  000016f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b4  00000000  00000000  00001bf0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045f  00000000  00000000  00001da4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003b6  00000000  00000000  00002203  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000025b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	6d c1       	rjmp	.+730    	; 0x2e0 <__vector_2>
   6:	aa c0       	rjmp	.+340    	; 0x15c <__vector_3>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	ca c1       	rjmp	.+916    	; 0x3a6 <__vector_8>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	25 c1       	rjmp	.+586    	; 0x260 <__vector_10>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	49 c1       	rjmp	.+658    	; 0x2ac <__vector_12>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e2 e8       	ldi	r30, 0x82	; 130
  32:	f7 e0       	ldi	r31, 0x07	; 7
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a2 36       	cpi	r26, 0x62	; 98
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	a2 e6       	ldi	r26, 0x62	; 98
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a0 37       	cpi	r26, 0x70	; 112
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	57 d0       	rcall	.+174    	; 0x100 <main>
  52:	95 c3       	rjmp	.+1834   	; 0x77e <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <resetPWM>:



void resetPWM() {
	
	OCR0A=0x81;		// low duty;	0x42 (66) - 0x81 (129)
  56:	81 e8       	ldi	r24, 0x81	; 129
  58:	89 bd       	out	0x29, r24	; 41
	OCR0B=0x41;		// high duty;	0x01 (1) - 0x41 (65)
  5a:	81 e4       	ldi	r24, 0x41	; 65
  5c:	88 bd       	out	0x28, r24	; 40
  5e:	08 95       	ret

00000060 <setModeIndicator>:
}

void setModeIndicator(CONTROLMODE p_currentMode) 
{
	currentMode = p_currentMode;
  60:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	switch(p_currentMode)
  64:	81 30       	cpi	r24, 0x01	; 1
  66:	39 f0       	breq	.+14     	; 0x76 <setModeIndicator+0x16>
  68:	18 f0       	brcs	.+6      	; 0x70 <setModeIndicator+0x10>
  6a:	82 30       	cpi	r24, 0x02	; 2
  6c:	39 f0       	breq	.+14     	; 0x7c <setModeIndicator+0x1c>
  6e:	08 95       	ret
	{
		case NORMAL:
			// Tri-State mode LED pin (LEDS off)
			DDRB &= ~(1<<DDB2);
  70:	ba 98       	cbi	0x17, 2	; 23
			PORTB &= ~(1<<PB2);
  72:	c2 98       	cbi	0x18, 2	; 24
			break;
  74:	08 95       	ret
			
		case SKEW:
			// Logic one to mode LED pin 
			DDRB |= (1<<DDB2);
  76:	ba 9a       	sbi	0x17, 2	; 23
			PORTB |= (1<<PB2);
  78:	c2 9a       	sbi	0x18, 2	; 24
			break;
  7a:	08 95       	ret
		
		case SWEEP:
			// Logic zero to mode LED pin 
			DDRB |= (1<<DDB2);
  7c:	ba 9a       	sbi	0x17, 2	; 23
			PORTB &= ~(1<<PB2);
  7e:	c2 98       	cbi	0x18, 2	; 24
  80:	08 95       	ret

00000082 <TimerModeEnable>:
	}
}

void TimerModeEnable(CONTROLMODE p_currentMode)
{
	currentMode = p_currentMode;
  82:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	cli();
  86:	f8 94       	cli
	
	switch(p_currentMode)
  88:	81 30       	cpi	r24, 0x01	; 1
  8a:	a1 f0       	breq	.+40     	; 0xb4 <TimerModeEnable+0x32>
  8c:	18 f0       	brcs	.+6      	; 0x94 <TimerModeEnable+0x12>
  8e:	82 30       	cpi	r24, 0x02	; 2
  90:	31 f1       	breq	.+76     	; 0xde <TimerModeEnable+0x5c>
  92:	34 c0       	rjmp	.+104    	; 0xfc <TimerModeEnable+0x7a>
	{
		case NORMAL:
			
			// disable Timer0 output to OC0B (PB1)
			TCCR0A = 0;
  94:	1a bc       	out	0x2a, r1	; 42
			///////////////////////////////////
			//// Timer1 CTC  setup
			///////////////////////////////////

			// Timer/Counter1 is reset to $00 after a compare match with OCR1C register value 
			TCCR1 |= (1<<CTC1);
  96:	80 b7       	in	r24, 0x30	; 48
  98:	80 68       	ori	r24, 0x80	; 128
  9a:	80 bf       	out	0x30, r24	; 48
	
			// enable toggle output on OC1A (PB1) output line.
			TCCR1 |= (0<<COM1A1) | (1<<COM1A0);
  9c:	80 b7       	in	r24, 0x30	; 48
  9e:	80 61       	ori	r24, 0x10	; 16
  a0:	80 bf       	out	0x30, r24	; 48
			
			// Timer/Counter1 Prescale Select PCK/2048
			TCCR1 |= (1<<CS13) | (1<<CS12) | (0<<CS11) | (0<<CS10);
  a2:	80 b7       	in	r24, 0x30	; 48
  a4:	8c 60       	ori	r24, 0x0C	; 12
  a6:	80 bf       	out	0x30, r24	; 48
	
			TIMSK |= (1<<OCIE1A);
  a8:	89 b7       	in	r24, 0x39	; 57
  aa:	80 64       	ori	r24, 0x40	; 64
  ac:	89 bf       	out	0x39, r24	; 57
	
			OCR1C =  10;
  ae:	8a e0       	ldi	r24, 0x0A	; 10
  b0:	8d bd       	out	0x2d, r24	; 45
	
			break;
  b2:	24 c0       	rjmp	.+72     	; 0xfc <TimerModeEnable+0x7a>
			
		case SKEW:
			
			// disable Timer1 output to OC1A (PB1)
			TCCR1 = 0;
  b4:	10 be       	out	0x30, r1	; 48
			///////////////////////////////////
			//// Timer0 phase PWM setup
			/////////////////////////////////
			
			//Normal port operation, OC0A disconnected
			TCCR0A |= (0<<COM0A1) | (0<<COM0A0);
  b6:	8a b5       	in	r24, 0x2a	; 42
  b8:	8a bd       	out	0x2a, r24	; 42
			// Enable OC0B (PB1) output. (Clear OC0B on Compare Match, set OC0B at BOTTOM - non-inverting mode)
			TCCR0A |= (1<<COM0B1) | (0<<COM0B0);
  ba:	8a b5       	in	r24, 0x2a	; 42
  bc:	80 62       	ori	r24, 0x20	; 32
  be:	8a bd       	out	0x2a, r24	; 42
			// Mode 5: phase PWM
			TCCR0A |= (0<<WGM01) | (1<<WGM00);
  c0:	8a b5       	in	r24, 0x2a	; 42
  c2:	81 60       	ori	r24, 0x01	; 1
  c4:	8a bd       	out	0x2a, r24	; 42
			TCCR0B |= (1<<WGM02);
  c6:	83 b7       	in	r24, 0x33	; 51
  c8:	88 60       	ori	r24, 0x08	; 8
  ca:	83 bf       	out	0x33, r24	; 51
			// 1024 Prescaler
			TCCR0B |= (1<<CS02) | (0<<CS01) | (1<<CS00);
  cc:	83 b7       	in	r24, 0x33	; 51
  ce:	85 60       	ori	r24, 0x05	; 5
  d0:	83 bf       	out	0x33, r24	; 51
	
			// Timer/Counter0 Output Compare Match A Interrupt Enable
			TIMSK |= (1<<OCIE0A);
  d2:	89 b7       	in	r24, 0x39	; 57
  d4:	80 61       	ori	r24, 0x10	; 16
  d6:	89 bf       	out	0x39, r24	; 57
	
			TCNT0=0x00;
  d8:	12 be       	out	0x32, r1	; 50
			resetPWM();
  da:	bd df       	rcall	.-134    	; 0x56 <resetPWM>
			
			break;
  dc:	0f c0       	rjmp	.+30     	; 0xfc <TimerModeEnable+0x7a>
		
		case SWEEP:
		
			// disable Timer0 output to OC0B (PB1)
			TCCR0A = 0;
  de:	1a bc       	out	0x2a, r1	; 42
			///////////////////////////////////
			//// Timer1 CTC  setup
			///////////////////////////////////

			// Timer/Counter1 is reset to $00 after a compare match with OCR1C register value
			TCCR1 |= (1<<CTC1);
  e0:	80 b7       	in	r24, 0x30	; 48
  e2:	80 68       	ori	r24, 0x80	; 128
  e4:	80 bf       	out	0x30, r24	; 48
			
			// enable toggle output on OC1A (PB1) output line.
			TCCR1 |= (0<<COM1A1) | (1<<COM1A0);
  e6:	80 b7       	in	r24, 0x30	; 48
  e8:	80 61       	ori	r24, 0x10	; 16
  ea:	80 bf       	out	0x30, r24	; 48
			
			// Timer/Counter1 Prescale Select PCK/2048
			//TCCR1 |= (0<<CS13) | (1<<CS12) | (1<<CS11) | (1<<CS10); // /64 
			//TCCR1 |= (1<<CS13) | (0<<CS12) | (0<<CS11) | (0<<CS10); // /128
			TCCR1 |= (1<<CS13) | (0<<CS12) | (0<<CS11) | (1<<CS10); // /256
  ec:	80 b7       	in	r24, 0x30	; 48
  ee:	89 60       	ori	r24, 0x09	; 9
  f0:	80 bf       	out	0x30, r24	; 48
			//TCCR1 |= (1<<CS13) | (0<<CS12) | (1<<CS11) | (0<<CS10); // /512
			//TCCR1 |= (1<<CS13) | (0<<CS12) | (1<<CS11) | (1<<CS10); // /1024
			//TCCR1 |= (1<<CS13) | (1<<CS12) | (0<<CS11) | (0<<CS10); // /2048
			
			TIMSK |= (1<<OCIE1A);
  f2:	89 b7       	in	r24, 0x39	; 57
  f4:	80 64       	ori	r24, 0x40	; 64
  f6:	89 bf       	out	0x39, r24	; 57
			
			OCR1C =  10;
  f8:	8a e0       	ldi	r24, 0x0A	; 10
  fa:	8d bd       	out	0x2d, r24	; 45
			
			break;
	}
	
	sei();	
  fc:	78 94       	sei
  fe:	08 95       	ret

00000100 <main>:
static __inline__ void clock_prescale_set(clock_div_t) __attribute__((__always_inline__));

void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 100:	94 e0       	ldi	r25, 0x04	; 4
 102:	80 e8       	ldi	r24, 0x80	; 128
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	f8 94       	cli
 108:	86 bd       	out	0x26, r24	; 38
 10a:	96 bd       	out	0x26, r25	; 38
 10c:	0f be       	out	0x3f, r0	; 63
	// ** clock_div_16 = 4,
	// clock_div_32 = 5,
	
	clock_prescale_set(4);
	
	cli();
 10e:	f8 94       	cli
	////////////////////////
	
	
	
	// clock signal (output)
	PORTB |= (1<<PB1);
 110:	c1 9a       	sbi	0x18, 1	; 24
	DDRB |= (1<<DDB1);
 112:	b9 9a       	sbi	0x17, 1	; 23
	
	// ADC3+4 (input)
	PORTB &= ~(1<<PB3);
 114:	c3 98       	cbi	0x18, 3	; 24
	DDRB &= ~(1<<DDB3);
 116:	bb 98       	cbi	0x17, 3	; 23
	PORTB &= ~(1<<PB4);
 118:	c4 98       	cbi	0x18, 4	; 24
	DDRB &= ~(1<<DDB4);
 11a:	bc 98       	cbi	0x17, 4	; 23
	///////////////////////////////////
	//// PCINT setup
	///////////////////////////////////
	
	// set PB0 to input
	DDRB &= ~(1<<DDB0);
 11c:	b8 98       	cbi	0x17, 0	; 23
	// set PB0 pull-up
	PORTB |= 1<<PB0;
 11e:	c0 9a       	sbi	0x18, 0	; 24
	
	// enable PC Interrupts
	GIMSK |= (1<<PCIE);
 120:	8b b7       	in	r24, 0x3b	; 59
 122:	80 62       	ori	r24, 0x20	; 32
 124:	8b bf       	out	0x3b, r24	; 59
	// enable PCINT0 interrupt
	PCMSK |= (1<<PCINT0);
 126:	a8 9a       	sbi	0x15, 0	; 21
		
	setModeIndicator(currentMode = SWEEP);
 128:	82 e0       	ldi	r24, 0x02	; 2
 12a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 12e:	98 df       	rcall	.-208    	; 0x60 <setModeIndicator>
	TimerModeEnable(SWEEP);
 130:	82 e0       	ldi	r24, 0x02	; 2
 132:	a7 df       	rcall	.-178    	; 0x82 <TimerModeEnable>
	//// ADC setup 
	///////////////////////////////////

	
	// VCC used as Voltage Reference, disconnected from PB0 (AREF).
	ADMUX &= ~((1<<REFS0) | (1<<REFS1));
 134:	87 b1       	in	r24, 0x07	; 7
 136:	8f 73       	andi	r24, 0x3F	; 63
 138:	87 b9       	out	0x07, r24	; 7
	
	// ADC Right Adjust Result
	ADMUX &= ~((1<<ADLAR));
 13a:	3d 98       	cbi	0x07, 5	; 7
	// ADC Left Adjust Result
	//ADMUX |= _ADCLA;
	
	// ADC3 selected by default
	ADMUX |= _ADC3EN;
 13c:	87 b1       	in	r24, 0x07	; 7
 13e:	83 60       	ori	r24, 0x03	; 3
 140:	87 b9       	out	0x07, r24	; 7
	
	// ADC enable,  Auto Trigger Enable,  Interrupt Enable	
	ADCSRA |= (1<<ADATE) | (1<<ADIE) | (1<<ADEN);
 142:	86 b1       	in	r24, 0x06	; 6
 144:	88 6a       	ori	r24, 0xA8	; 168
 146:	86 b9       	out	0x06, r24	; 6
	
	// ADC prescaler /128 - this is fast enough for our purposes, NOTE: /2 prescaler blocks WDT_vect 
	ADCSRA |= (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2);
 148:	86 b1       	in	r24, 0x06	; 6
 14a:	87 60       	ori	r24, 0x07	; 7
 14c:	86 b9       	out	0x06, r24	; 6

	// Single Ended conversions, Auto Trigger Source = Free Running mode
	ADCSRB = 0;
 14e:	13 b8       	out	0x03, r1	; 3
	
	// ADC Start Conversion
	ADCSRA |= (1<<ADSC);
 150:	36 9a       	sbi	0x06, 6	; 6
	
	// setup watchdog to interupt every 1sec
	WDTCR |= (1<<WDE) | (1<<WDIE);
 152:	81 b5       	in	r24, 0x21	; 33
 154:	88 64       	ori	r24, 0x48	; 72
 156:	81 bd       	out	0x21, r24	; 33
	
	sei();
 158:	78 94       	sei
 15a:	ff cf       	rjmp	.-2      	; 0x15a <main+0x5a>

0000015c <__vector_3>:
//////////////////////////////
///// INTERRUPTS
//////////////////////////////

ISR (TIMER1_COMPA_vect)
{
 15c:	1f 92       	push	r1
 15e:	0f 92       	push	r0
 160:	0f b6       	in	r0, 0x3f	; 63
 162:	0f 92       	push	r0
 164:	11 24       	eor	r1, r1
 166:	cf 92       	push	r12
 168:	df 92       	push	r13
 16a:	ef 92       	push	r14
 16c:	ff 92       	push	r15
 16e:	2f 93       	push	r18
 170:	3f 93       	push	r19
 172:	4f 93       	push	r20
 174:	5f 93       	push	r21
 176:	6f 93       	push	r22
 178:	7f 93       	push	r23
 17a:	8f 93       	push	r24
 17c:	9f 93       	push	r25
 17e:	af 93       	push	r26
 180:	bf 93       	push	r27
 182:	ef 93       	push	r30
 184:	ff 93       	push	r31
	// Normal/SWEEP mode freq adjust
	switch(currentMode)
 186:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 18a:	88 23       	and	r24, r24
 18c:	19 f0       	breq	.+6      	; 0x194 <__vector_3+0x38>
 18e:	82 30       	cpi	r24, 0x02	; 2
 190:	69 f0       	breq	.+26     	; 0x1ac <__vector_3+0x50>
 192:	51 c0       	rjmp	.+162    	; 0x236 <__vector_3+0xda>
	{
		case NORMAL:
			OCR1C = (adc2_result / 16);
 194:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <adc2_result>
 198:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <adc2_result+0x1>
 19c:	92 95       	swap	r25
 19e:	82 95       	swap	r24
 1a0:	8f 70       	andi	r24, 0x0F	; 15
 1a2:	89 27       	eor	r24, r25
 1a4:	9f 70       	andi	r25, 0x0F	; 15
 1a6:	89 27       	eor	r24, r25
 1a8:	8d bd       	out	0x2d, r24	; 45
			break;
 1aa:	45 c0       	rjmp	.+138    	; 0x236 <__vector_3+0xda>
		case SWEEP:
			OCR1C= (adc2_result / (adc3_result/16)) * weight;
 1ac:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <adc2_result>
 1b0:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <adc2_result+0x1>
 1b4:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__data_end>
 1b8:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <__data_end+0x1>
 1bc:	c0 90 6c 00 	lds	r12, 0x006C	; 0x80006c <weight>
 1c0:	d0 90 6d 00 	lds	r13, 0x006D	; 0x80006d <weight+0x1>
 1c4:	e0 90 6e 00 	lds	r14, 0x006E	; 0x80006e <weight+0x2>
 1c8:	f0 90 6f 00 	lds	r15, 0x006F	; 0x80006f <weight+0x3>
 1cc:	72 95       	swap	r23
 1ce:	62 95       	swap	r22
 1d0:	6f 70       	andi	r22, 0x0F	; 15
 1d2:	67 27       	eor	r22, r23
 1d4:	7f 70       	andi	r23, 0x0F	; 15
 1d6:	67 27       	eor	r22, r23
 1d8:	be d2       	rcall	.+1404   	; 0x756 <__udivmodhi4>
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	c2 d1       	rcall	.+900    	; 0x564 <__floatunsisf>
 1e0:	a7 01       	movw	r20, r14
 1e2:	96 01       	movw	r18, r12
 1e4:	4d d2       	rcall	.+1178   	; 0x680 <__mulsf3>
 1e6:	92 d1       	rcall	.+804    	; 0x50c <__fixunssfsi>
 1e8:	6d bd       	out	0x2d, r22	; 45
			weight=weight+0.5;
 1ea:	60 91 6c 00 	lds	r22, 0x006C	; 0x80006c <weight>
 1ee:	70 91 6d 00 	lds	r23, 0x006D	; 0x80006d <weight+0x1>
 1f2:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <weight+0x2>
 1f6:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <weight+0x3>
 1fa:	20 e0       	ldi	r18, 0x00	; 0
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	40 e0       	ldi	r20, 0x00	; 0
 200:	5f e3       	ldi	r21, 0x3F	; 63
 202:	20 d1       	rcall	.+576    	; 0x444 <__addsf3>
 204:	60 93 6c 00 	sts	0x006C, r22	; 0x80006c <weight>
 208:	70 93 6d 00 	sts	0x006D, r23	; 0x80006d <weight+0x1>
 20c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <weight+0x2>
 210:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <weight+0x3>
			if (OCR1C > (adc2_result)) 
 214:	8d b5       	in	r24, 0x2d	; 45
 216:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <adc2_result>
 21a:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <adc2_result+0x1>
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	28 17       	cp	r18, r24
 222:	39 07       	cpc	r19, r25
 224:	40 f4       	brcc	.+16     	; 0x236 <__vector_3+0xda>
			{
				weight = 0;
 226:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <weight>
 22a:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <weight+0x1>
 22e:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <weight+0x2>
 232:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <weight+0x3>
			}
			break;
	}
			
	
}
 236:	ff 91       	pop	r31
 238:	ef 91       	pop	r30
 23a:	bf 91       	pop	r27
 23c:	af 91       	pop	r26
 23e:	9f 91       	pop	r25
 240:	8f 91       	pop	r24
 242:	7f 91       	pop	r23
 244:	6f 91       	pop	r22
 246:	5f 91       	pop	r21
 248:	4f 91       	pop	r20
 24a:	3f 91       	pop	r19
 24c:	2f 91       	pop	r18
 24e:	ff 90       	pop	r15
 250:	ef 90       	pop	r14
 252:	df 90       	pop	r13
 254:	cf 90       	pop	r12
 256:	0f 90       	pop	r0
 258:	0f be       	out	0x3f, r0	; 63
 25a:	0f 90       	pop	r0
 25c:	1f 90       	pop	r1
 25e:	18 95       	reti

00000260 <__vector_10>:

ISR (TIMER0_COMPA_vect)
{
 260:	1f 92       	push	r1
 262:	0f 92       	push	r0
 264:	0f b6       	in	r0, 0x3f	; 63
 266:	0f 92       	push	r0
 268:	11 24       	eor	r1, r1
 26a:	8f 93       	push	r24
 26c:	9f 93       	push	r25
	// Skew mode freq adjust
	
	// update low duty (adc3_result mapped 10bit -> 8Bit)
	OCR0A=0x1 + (adc3_result / 16);
 26e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 272:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 276:	92 95       	swap	r25
 278:	82 95       	swap	r24
 27a:	8f 70       	andi	r24, 0x0F	; 15
 27c:	89 27       	eor	r24, r25
 27e:	9f 70       	andi	r25, 0x0F	; 15
 280:	89 27       	eor	r24, r25
 282:	8f 5f       	subi	r24, 0xFF	; 255
 284:	89 bd       	out	0x29, r24	; 41
	
	// update high duty (adc2_result mapped 10bit -> 8Bit)
	OCR0B=0x1 + (adc2_result / 16);
 286:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <adc2_result>
 28a:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <adc2_result+0x1>
 28e:	92 95       	swap	r25
 290:	82 95       	swap	r24
 292:	8f 70       	andi	r24, 0x0F	; 15
 294:	89 27       	eor	r24, r25
 296:	9f 70       	andi	r25, 0x0F	; 15
 298:	89 27       	eor	r24, r25
 29a:	8f 5f       	subi	r24, 0xFF	; 255
 29c:	88 bd       	out	0x28, r24	; 40

}
 29e:	9f 91       	pop	r25
 2a0:	8f 91       	pop	r24
 2a2:	0f 90       	pop	r0
 2a4:	0f be       	out	0x3f, r0	; 63
 2a6:	0f 90       	pop	r0
 2a8:	1f 90       	pop	r1
 2aa:	18 95       	reti

000002ac <__vector_12>:

ISR (WDT_vect)
{
 2ac:	1f 92       	push	r1
 2ae:	0f 92       	push	r0
 2b0:	0f b6       	in	r0, 0x3f	; 63
 2b2:	0f 92       	push	r0
 2b4:	11 24       	eor	r1, r1
 2b6:	8f 93       	push	r24
 2b8:	9f 93       	push	r25
	// increment the counter
	wdcounter++;
 2ba:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <wdcounter>
 2be:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <wdcounter+0x1>
 2c2:	01 96       	adiw	r24, 0x01	; 1
 2c4:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <wdcounter+0x1>
 2c8:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <wdcounter>
	// re-enable the WDG interrupt to prevent device reset.
	WDTCR |= (1<<WDIE);
 2cc:	81 b5       	in	r24, 0x21	; 33
 2ce:	80 64       	ori	r24, 0x40	; 64
 2d0:	81 bd       	out	0x21, r24	; 33
}
 2d2:	9f 91       	pop	r25
 2d4:	8f 91       	pop	r24
 2d6:	0f 90       	pop	r0
 2d8:	0f be       	out	0x3f, r0	; 63
 2da:	0f 90       	pop	r0
 2dc:	1f 90       	pop	r1
 2de:	18 95       	reti

000002e0 <__vector_2>:

ISR (PCINT0_vect)
{
 2e0:	1f 92       	push	r1
 2e2:	0f 92       	push	r0
 2e4:	0f b6       	in	r0, 0x3f	; 63
 2e6:	0f 92       	push	r0
 2e8:	11 24       	eor	r1, r1
 2ea:	cf 92       	push	r12
 2ec:	df 92       	push	r13
 2ee:	ef 92       	push	r14
 2f0:	ff 92       	push	r15
 2f2:	2f 93       	push	r18
 2f4:	3f 93       	push	r19
 2f6:	4f 93       	push	r20
 2f8:	5f 93       	push	r21
 2fa:	6f 93       	push	r22
 2fc:	7f 93       	push	r23
 2fe:	8f 93       	push	r24
 300:	9f 93       	push	r25
 302:	af 93       	push	r26
 304:	bf 93       	push	r27
 306:	ef 93       	push	r30
 308:	ff 93       	push	r31
	// check for bounce
	uint32_t interrupt_time = wdcounter;
 30a:	c0 90 6a 00 	lds	r12, 0x006A	; 0x80006a <wdcounter>
 30e:	d0 90 6b 00 	lds	r13, 0x006B	; 0x80006b <wdcounter+0x1>
 312:	e1 2c       	mov	r14, r1
 314:	f1 2c       	mov	r15, r1
	if (interrupt_time - pd0_last_interrupt_time > DEBOUNCE_DELAY) 
 316:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <pd0_last_interrupt_time>
 31a:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <pd0_last_interrupt_time+0x1>
 31e:	a0 91 68 00 	lds	r26, 0x0068	; 0x800068 <pd0_last_interrupt_time+0x2>
 322:	b0 91 69 00 	lds	r27, 0x0069	; 0x800069 <pd0_last_interrupt_time+0x3>
 326:	a7 01       	movw	r20, r14
 328:	96 01       	movw	r18, r12
 32a:	28 1b       	sub	r18, r24
 32c:	39 0b       	sbc	r19, r25
 32e:	4a 0b       	sbc	r20, r26
 330:	5b 0b       	sbc	r21, r27
 332:	2d 33       	cpi	r18, 0x3D	; 61
 334:	31 05       	cpc	r19, r1
 336:	41 05       	cpc	r20, r1
 338:	51 05       	cpc	r21, r1
 33a:	00 f1       	brcs	.+64     	; 0x37c <__vector_2+0x9c>
	{
		// toggle the control mode
		switch(currentMode) 
 33c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 340:	81 30       	cpi	r24, 0x01	; 1
 342:	49 f0       	breq	.+18     	; 0x356 <__vector_2+0x76>
 344:	18 f0       	brcs	.+6      	; 0x34c <__vector_2+0x6c>
 346:	82 30       	cpi	r24, 0x02	; 2
 348:	61 f0       	breq	.+24     	; 0x362 <__vector_2+0x82>
 34a:	10 c0       	rjmp	.+32     	; 0x36c <__vector_2+0x8c>
		{
			case NORMAL:
				
				TimerModeEnable(SKEW);
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	99 de       	rcall	.-718    	; 0x82 <TimerModeEnable>
				setModeIndicator(SKEW);
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	86 de       	rcall	.-756    	; 0x60 <setModeIndicator>

				break;
 354:	0b c0       	rjmp	.+22     	; 0x36c <__vector_2+0x8c>

			case SKEW:
				
				setModeIndicator(SWEEP);
 356:	82 e0       	ldi	r24, 0x02	; 2
 358:	83 de       	rcall	.-762    	; 0x60 <setModeIndicator>
				TimerModeEnable(SWEEP);
 35a:	82 e0       	ldi	r24, 0x02	; 2
 35c:	92 de       	rcall	.-732    	; 0x82 <TimerModeEnable>
				resetPWM();
 35e:	7b de       	rcall	.-778    	; 0x56 <resetPWM>
				break;	
 360:	05 c0       	rjmp	.+10     	; 0x36c <__vector_2+0x8c>

			case SWEEP:
				
				setModeIndicator(NORMAL);
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	7d de       	rcall	.-774    	; 0x60 <setModeIndicator>
				TimerModeEnable(NORMAL);
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	8c de       	rcall	.-744    	; 0x82 <TimerModeEnable>
				resetPWM();
 36a:	75 de       	rcall	.-790    	; 0x56 <resetPWM>
				
				break;
		}
		// store the tick of the last successful press
		pd0_last_interrupt_time = interrupt_time;
 36c:	c0 92 66 00 	sts	0x0066, r12	; 0x800066 <pd0_last_interrupt_time>
 370:	d0 92 67 00 	sts	0x0067, r13	; 0x800067 <pd0_last_interrupt_time+0x1>
 374:	e0 92 68 00 	sts	0x0068, r14	; 0x800068 <pd0_last_interrupt_time+0x2>
 378:	f0 92 69 00 	sts	0x0069, r15	; 0x800069 <pd0_last_interrupt_time+0x3>
	
	}
}
 37c:	ff 91       	pop	r31
 37e:	ef 91       	pop	r30
 380:	bf 91       	pop	r27
 382:	af 91       	pop	r26
 384:	9f 91       	pop	r25
 386:	8f 91       	pop	r24
 388:	7f 91       	pop	r23
 38a:	6f 91       	pop	r22
 38c:	5f 91       	pop	r21
 38e:	4f 91       	pop	r20
 390:	3f 91       	pop	r19
 392:	2f 91       	pop	r18
 394:	ff 90       	pop	r15
 396:	ef 90       	pop	r14
 398:	df 90       	pop	r13
 39a:	cf 90       	pop	r12
 39c:	0f 90       	pop	r0
 39e:	0f be       	out	0x3f, r0	; 63
 3a0:	0f 90       	pop	r0
 3a2:	1f 90       	pop	r1
 3a4:	18 95       	reti

000003a6 <__vector_8>:

ISR (ADC_vect)
{
 3a6:	1f 92       	push	r1
 3a8:	0f 92       	push	r0
 3aa:	0f b6       	in	r0, 0x3f	; 63
 3ac:	0f 92       	push	r0
 3ae:	11 24       	eor	r1, r1
 3b0:	2f 93       	push	r18
 3b2:	3f 93       	push	r19
 3b4:	8f 93       	push	r24
 3b6:	9f 93       	push	r25
	// 1.check current adc mux channel
	// 2.read ADC result
	// 3.enable the next contiguous mux channel
	
	switch(ADMUX) {
 3b8:	87 b1       	in	r24, 0x07	; 7
 3ba:	82 30       	cpi	r24, 0x02	; 2
 3bc:	19 f0       	breq	.+6      	; 0x3c4 <__vector_8+0x1e>
 3be:	83 30       	cpi	r24, 0x03	; 3
 3c0:	e9 f0       	breq	.+58     	; 0x3fc <__vector_8+0x56>
 3c2:	35 c0       	rjmp	.+106    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
		
		// if ADLAR bit set, use switch case mask '_ADCLA | _ADCXEN'
		// if ADLAR bit cleared, use switch case mask '_ADCXEN'
		
		case _ADC2EN:
		adc2_result = ADCL;				// read 8 LSB
 3c4:	84 b1       	in	r24, 0x04	; 4
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <adc2_result+0x1>
 3cc:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <adc2_result>
		adc2_result += ADCH << 8;		// read 2 MSB, shift them left and add to LSB. Result = 2MSB + 8LSB
 3d0:	95 b1       	in	r25, 0x05	; 5
 3d2:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <adc2_result>
 3d6:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <adc2_result+0x1>
 3da:	89 2f       	mov	r24, r25
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	98 2f       	mov	r25, r24
 3e0:	88 27       	eor	r24, r24
 3e2:	82 0f       	add	r24, r18
 3e4:	93 1f       	adc	r25, r19
 3e6:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <adc2_result+0x1>
 3ea:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <adc2_result>
		ADMUX &= _ADCLA | _ADC0EN;		//  clear MUX bits whilst retaining ADC Left Adjust Result
 3ee:	87 b1       	in	r24, 0x07	; 7
 3f0:	80 72       	andi	r24, 0x20	; 32
 3f2:	87 b9       	out	0x07, r24	; 7
		ADMUX |= _ADC3EN;				// set ADC3 for next check
 3f4:	87 b1       	in	r24, 0x07	; 7
 3f6:	83 60       	ori	r24, 0x03	; 3
 3f8:	87 b9       	out	0x07, r24	; 7
		break;
 3fa:	19 c0       	rjmp	.+50     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
		
		case _ADC3EN:
		adc3_result = ADCL;				// read 8 LSB
 3fc:	84 b1       	in	r24, 0x04	; 4
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
 404:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
		adc3_result += ADCH << 8;		// read 2 MSB, shift them left and add to LSB. Result = 2MSB + 8LSB
 408:	95 b1       	in	r25, 0x05	; 5
 40a:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__data_end>
 40e:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__data_end+0x1>
 412:	89 2f       	mov	r24, r25
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	98 2f       	mov	r25, r24
 418:	88 27       	eor	r24, r24
 41a:	82 0f       	add	r24, r18
 41c:	93 1f       	adc	r25, r19
 41e:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
 422:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
		ADMUX &= _ADCLA | _ADC0EN;		// clear MUX bits whilst retaining ADC Left Adjust Result
 426:	87 b1       	in	r24, 0x07	; 7
 428:	80 72       	andi	r24, 0x20	; 32
 42a:	87 b9       	out	0x07, r24	; 7
		ADMUX |= _ADC2EN;				// set ADC2 for check
 42c:	39 9a       	sbi	0x07, 1	; 7
		break;
		
	}
	// Start the next AD conversion
	ADCSRA|=(1<<ADSC);
 42e:	36 9a       	sbi	0x06, 6	; 6
}
 430:	9f 91       	pop	r25
 432:	8f 91       	pop	r24
 434:	3f 91       	pop	r19
 436:	2f 91       	pop	r18
 438:	0f 90       	pop	r0
 43a:	0f be       	out	0x3f, r0	; 63
 43c:	0f 90       	pop	r0
 43e:	1f 90       	pop	r1
 440:	18 95       	reti

00000442 <__subsf3>:
 442:	50 58       	subi	r21, 0x80	; 128

00000444 <__addsf3>:
 444:	bb 27       	eor	r27, r27
 446:	aa 27       	eor	r26, r26
 448:	0e d0       	rcall	.+28     	; 0x466 <__addsf3x>
 44a:	e0 c0       	rjmp	.+448    	; 0x60c <__fp_round>
 44c:	d1 d0       	rcall	.+418    	; 0x5f0 <__fp_pscA>
 44e:	30 f0       	brcs	.+12     	; 0x45c <__addsf3+0x18>
 450:	d6 d0       	rcall	.+428    	; 0x5fe <__fp_pscB>
 452:	20 f0       	brcs	.+8      	; 0x45c <__addsf3+0x18>
 454:	31 f4       	brne	.+12     	; 0x462 <__addsf3+0x1e>
 456:	9f 3f       	cpi	r25, 0xFF	; 255
 458:	11 f4       	brne	.+4      	; 0x45e <__addsf3+0x1a>
 45a:	1e f4       	brtc	.+6      	; 0x462 <__addsf3+0x1e>
 45c:	c6 c0       	rjmp	.+396    	; 0x5ea <__fp_nan>
 45e:	0e f4       	brtc	.+2      	; 0x462 <__addsf3+0x1e>
 460:	e0 95       	com	r30
 462:	e7 fb       	bst	r30, 7
 464:	bc c0       	rjmp	.+376    	; 0x5de <__fp_inf>

00000466 <__addsf3x>:
 466:	e9 2f       	mov	r30, r25
 468:	e2 d0       	rcall	.+452    	; 0x62e <__fp_split3>
 46a:	80 f3       	brcs	.-32     	; 0x44c <__addsf3+0x8>
 46c:	ba 17       	cp	r27, r26
 46e:	62 07       	cpc	r22, r18
 470:	73 07       	cpc	r23, r19
 472:	84 07       	cpc	r24, r20
 474:	95 07       	cpc	r25, r21
 476:	18 f0       	brcs	.+6      	; 0x47e <__addsf3x+0x18>
 478:	71 f4       	brne	.+28     	; 0x496 <__addsf3x+0x30>
 47a:	9e f5       	brtc	.+102    	; 0x4e2 <__addsf3x+0x7c>
 47c:	fa c0       	rjmp	.+500    	; 0x672 <__fp_zero>
 47e:	0e f4       	brtc	.+2      	; 0x482 <__addsf3x+0x1c>
 480:	e0 95       	com	r30
 482:	0b 2e       	mov	r0, r27
 484:	ba 2f       	mov	r27, r26
 486:	a0 2d       	mov	r26, r0
 488:	0b 01       	movw	r0, r22
 48a:	b9 01       	movw	r22, r18
 48c:	90 01       	movw	r18, r0
 48e:	0c 01       	movw	r0, r24
 490:	ca 01       	movw	r24, r20
 492:	a0 01       	movw	r20, r0
 494:	11 24       	eor	r1, r1
 496:	ff 27       	eor	r31, r31
 498:	59 1b       	sub	r21, r25
 49a:	99 f0       	breq	.+38     	; 0x4c2 <__addsf3x+0x5c>
 49c:	59 3f       	cpi	r21, 0xF9	; 249
 49e:	50 f4       	brcc	.+20     	; 0x4b4 <__addsf3x+0x4e>
 4a0:	50 3e       	cpi	r21, 0xE0	; 224
 4a2:	68 f1       	brcs	.+90     	; 0x4fe <__addsf3x+0x98>
 4a4:	1a 16       	cp	r1, r26
 4a6:	f0 40       	sbci	r31, 0x00	; 0
 4a8:	a2 2f       	mov	r26, r18
 4aa:	23 2f       	mov	r18, r19
 4ac:	34 2f       	mov	r19, r20
 4ae:	44 27       	eor	r20, r20
 4b0:	58 5f       	subi	r21, 0xF8	; 248
 4b2:	f3 cf       	rjmp	.-26     	; 0x49a <__addsf3x+0x34>
 4b4:	46 95       	lsr	r20
 4b6:	37 95       	ror	r19
 4b8:	27 95       	ror	r18
 4ba:	a7 95       	ror	r26
 4bc:	f0 40       	sbci	r31, 0x00	; 0
 4be:	53 95       	inc	r21
 4c0:	c9 f7       	brne	.-14     	; 0x4b4 <__addsf3x+0x4e>
 4c2:	7e f4       	brtc	.+30     	; 0x4e2 <__addsf3x+0x7c>
 4c4:	1f 16       	cp	r1, r31
 4c6:	ba 0b       	sbc	r27, r26
 4c8:	62 0b       	sbc	r22, r18
 4ca:	73 0b       	sbc	r23, r19
 4cc:	84 0b       	sbc	r24, r20
 4ce:	ba f0       	brmi	.+46     	; 0x4fe <__addsf3x+0x98>
 4d0:	91 50       	subi	r25, 0x01	; 1
 4d2:	a1 f0       	breq	.+40     	; 0x4fc <__addsf3x+0x96>
 4d4:	ff 0f       	add	r31, r31
 4d6:	bb 1f       	adc	r27, r27
 4d8:	66 1f       	adc	r22, r22
 4da:	77 1f       	adc	r23, r23
 4dc:	88 1f       	adc	r24, r24
 4de:	c2 f7       	brpl	.-16     	; 0x4d0 <__addsf3x+0x6a>
 4e0:	0e c0       	rjmp	.+28     	; 0x4fe <__addsf3x+0x98>
 4e2:	ba 0f       	add	r27, r26
 4e4:	62 1f       	adc	r22, r18
 4e6:	73 1f       	adc	r23, r19
 4e8:	84 1f       	adc	r24, r20
 4ea:	48 f4       	brcc	.+18     	; 0x4fe <__addsf3x+0x98>
 4ec:	87 95       	ror	r24
 4ee:	77 95       	ror	r23
 4f0:	67 95       	ror	r22
 4f2:	b7 95       	ror	r27
 4f4:	f7 95       	ror	r31
 4f6:	9e 3f       	cpi	r25, 0xFE	; 254
 4f8:	08 f0       	brcs	.+2      	; 0x4fc <__addsf3x+0x96>
 4fa:	b3 cf       	rjmp	.-154    	; 0x462 <__addsf3+0x1e>
 4fc:	93 95       	inc	r25
 4fe:	88 0f       	add	r24, r24
 500:	08 f0       	brcs	.+2      	; 0x504 <__addsf3x+0x9e>
 502:	99 27       	eor	r25, r25
 504:	ee 0f       	add	r30, r30
 506:	97 95       	ror	r25
 508:	87 95       	ror	r24
 50a:	08 95       	ret

0000050c <__fixunssfsi>:
 50c:	98 d0       	rcall	.+304    	; 0x63e <__fp_splitA>
 50e:	88 f0       	brcs	.+34     	; 0x532 <__fixunssfsi+0x26>
 510:	9f 57       	subi	r25, 0x7F	; 127
 512:	90 f0       	brcs	.+36     	; 0x538 <__fixunssfsi+0x2c>
 514:	b9 2f       	mov	r27, r25
 516:	99 27       	eor	r25, r25
 518:	b7 51       	subi	r27, 0x17	; 23
 51a:	a0 f0       	brcs	.+40     	; 0x544 <__fixunssfsi+0x38>
 51c:	d1 f0       	breq	.+52     	; 0x552 <__fixunssfsi+0x46>
 51e:	66 0f       	add	r22, r22
 520:	77 1f       	adc	r23, r23
 522:	88 1f       	adc	r24, r24
 524:	99 1f       	adc	r25, r25
 526:	1a f0       	brmi	.+6      	; 0x52e <__fixunssfsi+0x22>
 528:	ba 95       	dec	r27
 52a:	c9 f7       	brne	.-14     	; 0x51e <__fixunssfsi+0x12>
 52c:	12 c0       	rjmp	.+36     	; 0x552 <__fixunssfsi+0x46>
 52e:	b1 30       	cpi	r27, 0x01	; 1
 530:	81 f0       	breq	.+32     	; 0x552 <__fixunssfsi+0x46>
 532:	9f d0       	rcall	.+318    	; 0x672 <__fp_zero>
 534:	b1 e0       	ldi	r27, 0x01	; 1
 536:	08 95       	ret
 538:	9c c0       	rjmp	.+312    	; 0x672 <__fp_zero>
 53a:	67 2f       	mov	r22, r23
 53c:	78 2f       	mov	r23, r24
 53e:	88 27       	eor	r24, r24
 540:	b8 5f       	subi	r27, 0xF8	; 248
 542:	39 f0       	breq	.+14     	; 0x552 <__fixunssfsi+0x46>
 544:	b9 3f       	cpi	r27, 0xF9	; 249
 546:	cc f3       	brlt	.-14     	; 0x53a <__fixunssfsi+0x2e>
 548:	86 95       	lsr	r24
 54a:	77 95       	ror	r23
 54c:	67 95       	ror	r22
 54e:	b3 95       	inc	r27
 550:	d9 f7       	brne	.-10     	; 0x548 <__fixunssfsi+0x3c>
 552:	3e f4       	brtc	.+14     	; 0x562 <__fixunssfsi+0x56>
 554:	90 95       	com	r25
 556:	80 95       	com	r24
 558:	70 95       	com	r23
 55a:	61 95       	neg	r22
 55c:	7f 4f       	sbci	r23, 0xFF	; 255
 55e:	8f 4f       	sbci	r24, 0xFF	; 255
 560:	9f 4f       	sbci	r25, 0xFF	; 255
 562:	08 95       	ret

00000564 <__floatunsisf>:
 564:	e8 94       	clt
 566:	09 c0       	rjmp	.+18     	; 0x57a <__floatsisf+0x12>

00000568 <__floatsisf>:
 568:	97 fb       	bst	r25, 7
 56a:	3e f4       	brtc	.+14     	; 0x57a <__floatsisf+0x12>
 56c:	90 95       	com	r25
 56e:	80 95       	com	r24
 570:	70 95       	com	r23
 572:	61 95       	neg	r22
 574:	7f 4f       	sbci	r23, 0xFF	; 255
 576:	8f 4f       	sbci	r24, 0xFF	; 255
 578:	9f 4f       	sbci	r25, 0xFF	; 255
 57a:	99 23       	and	r25, r25
 57c:	a9 f0       	breq	.+42     	; 0x5a8 <__floatsisf+0x40>
 57e:	f9 2f       	mov	r31, r25
 580:	96 e9       	ldi	r25, 0x96	; 150
 582:	bb 27       	eor	r27, r27
 584:	93 95       	inc	r25
 586:	f6 95       	lsr	r31
 588:	87 95       	ror	r24
 58a:	77 95       	ror	r23
 58c:	67 95       	ror	r22
 58e:	b7 95       	ror	r27
 590:	f1 11       	cpse	r31, r1
 592:	f8 cf       	rjmp	.-16     	; 0x584 <__floatsisf+0x1c>
 594:	fa f4       	brpl	.+62     	; 0x5d4 <__floatsisf+0x6c>
 596:	bb 0f       	add	r27, r27
 598:	11 f4       	brne	.+4      	; 0x59e <__floatsisf+0x36>
 59a:	60 ff       	sbrs	r22, 0
 59c:	1b c0       	rjmp	.+54     	; 0x5d4 <__floatsisf+0x6c>
 59e:	6f 5f       	subi	r22, 0xFF	; 255
 5a0:	7f 4f       	sbci	r23, 0xFF	; 255
 5a2:	8f 4f       	sbci	r24, 0xFF	; 255
 5a4:	9f 4f       	sbci	r25, 0xFF	; 255
 5a6:	16 c0       	rjmp	.+44     	; 0x5d4 <__floatsisf+0x6c>
 5a8:	88 23       	and	r24, r24
 5aa:	11 f0       	breq	.+4      	; 0x5b0 <__floatsisf+0x48>
 5ac:	96 e9       	ldi	r25, 0x96	; 150
 5ae:	11 c0       	rjmp	.+34     	; 0x5d2 <__floatsisf+0x6a>
 5b0:	77 23       	and	r23, r23
 5b2:	21 f0       	breq	.+8      	; 0x5bc <__floatsisf+0x54>
 5b4:	9e e8       	ldi	r25, 0x8E	; 142
 5b6:	87 2f       	mov	r24, r23
 5b8:	76 2f       	mov	r23, r22
 5ba:	05 c0       	rjmp	.+10     	; 0x5c6 <__floatsisf+0x5e>
 5bc:	66 23       	and	r22, r22
 5be:	71 f0       	breq	.+28     	; 0x5dc <__floatsisf+0x74>
 5c0:	96 e8       	ldi	r25, 0x86	; 134
 5c2:	86 2f       	mov	r24, r22
 5c4:	70 e0       	ldi	r23, 0x00	; 0
 5c6:	60 e0       	ldi	r22, 0x00	; 0
 5c8:	2a f0       	brmi	.+10     	; 0x5d4 <__floatsisf+0x6c>
 5ca:	9a 95       	dec	r25
 5cc:	66 0f       	add	r22, r22
 5ce:	77 1f       	adc	r23, r23
 5d0:	88 1f       	adc	r24, r24
 5d2:	da f7       	brpl	.-10     	; 0x5ca <__floatsisf+0x62>
 5d4:	88 0f       	add	r24, r24
 5d6:	96 95       	lsr	r25
 5d8:	87 95       	ror	r24
 5da:	97 f9       	bld	r25, 7
 5dc:	08 95       	ret

000005de <__fp_inf>:
 5de:	97 f9       	bld	r25, 7
 5e0:	9f 67       	ori	r25, 0x7F	; 127
 5e2:	80 e8       	ldi	r24, 0x80	; 128
 5e4:	70 e0       	ldi	r23, 0x00	; 0
 5e6:	60 e0       	ldi	r22, 0x00	; 0
 5e8:	08 95       	ret

000005ea <__fp_nan>:
 5ea:	9f ef       	ldi	r25, 0xFF	; 255
 5ec:	80 ec       	ldi	r24, 0xC0	; 192
 5ee:	08 95       	ret

000005f0 <__fp_pscA>:
 5f0:	00 24       	eor	r0, r0
 5f2:	0a 94       	dec	r0
 5f4:	16 16       	cp	r1, r22
 5f6:	17 06       	cpc	r1, r23
 5f8:	18 06       	cpc	r1, r24
 5fa:	09 06       	cpc	r0, r25
 5fc:	08 95       	ret

000005fe <__fp_pscB>:
 5fe:	00 24       	eor	r0, r0
 600:	0a 94       	dec	r0
 602:	12 16       	cp	r1, r18
 604:	13 06       	cpc	r1, r19
 606:	14 06       	cpc	r1, r20
 608:	05 06       	cpc	r0, r21
 60a:	08 95       	ret

0000060c <__fp_round>:
 60c:	09 2e       	mov	r0, r25
 60e:	03 94       	inc	r0
 610:	00 0c       	add	r0, r0
 612:	11 f4       	brne	.+4      	; 0x618 <__fp_round+0xc>
 614:	88 23       	and	r24, r24
 616:	52 f0       	brmi	.+20     	; 0x62c <__fp_round+0x20>
 618:	bb 0f       	add	r27, r27
 61a:	40 f4       	brcc	.+16     	; 0x62c <__fp_round+0x20>
 61c:	bf 2b       	or	r27, r31
 61e:	11 f4       	brne	.+4      	; 0x624 <__fp_round+0x18>
 620:	60 ff       	sbrs	r22, 0
 622:	04 c0       	rjmp	.+8      	; 0x62c <__fp_round+0x20>
 624:	6f 5f       	subi	r22, 0xFF	; 255
 626:	7f 4f       	sbci	r23, 0xFF	; 255
 628:	8f 4f       	sbci	r24, 0xFF	; 255
 62a:	9f 4f       	sbci	r25, 0xFF	; 255
 62c:	08 95       	ret

0000062e <__fp_split3>:
 62e:	57 fd       	sbrc	r21, 7
 630:	90 58       	subi	r25, 0x80	; 128
 632:	44 0f       	add	r20, r20
 634:	55 1f       	adc	r21, r21
 636:	59 f0       	breq	.+22     	; 0x64e <__fp_splitA+0x10>
 638:	5f 3f       	cpi	r21, 0xFF	; 255
 63a:	71 f0       	breq	.+28     	; 0x658 <__fp_splitA+0x1a>
 63c:	47 95       	ror	r20

0000063e <__fp_splitA>:
 63e:	88 0f       	add	r24, r24
 640:	97 fb       	bst	r25, 7
 642:	99 1f       	adc	r25, r25
 644:	61 f0       	breq	.+24     	; 0x65e <__fp_splitA+0x20>
 646:	9f 3f       	cpi	r25, 0xFF	; 255
 648:	79 f0       	breq	.+30     	; 0x668 <__fp_splitA+0x2a>
 64a:	87 95       	ror	r24
 64c:	08 95       	ret
 64e:	12 16       	cp	r1, r18
 650:	13 06       	cpc	r1, r19
 652:	14 06       	cpc	r1, r20
 654:	55 1f       	adc	r21, r21
 656:	f2 cf       	rjmp	.-28     	; 0x63c <__fp_split3+0xe>
 658:	46 95       	lsr	r20
 65a:	f1 df       	rcall	.-30     	; 0x63e <__fp_splitA>
 65c:	08 c0       	rjmp	.+16     	; 0x66e <__fp_splitA+0x30>
 65e:	16 16       	cp	r1, r22
 660:	17 06       	cpc	r1, r23
 662:	18 06       	cpc	r1, r24
 664:	99 1f       	adc	r25, r25
 666:	f1 cf       	rjmp	.-30     	; 0x64a <__fp_splitA+0xc>
 668:	86 95       	lsr	r24
 66a:	71 05       	cpc	r23, r1
 66c:	61 05       	cpc	r22, r1
 66e:	08 94       	sec
 670:	08 95       	ret

00000672 <__fp_zero>:
 672:	e8 94       	clt

00000674 <__fp_szero>:
 674:	bb 27       	eor	r27, r27
 676:	66 27       	eor	r22, r22
 678:	77 27       	eor	r23, r23
 67a:	cb 01       	movw	r24, r22
 67c:	97 f9       	bld	r25, 7
 67e:	08 95       	ret

00000680 <__mulsf3>:
 680:	0a d0       	rcall	.+20     	; 0x696 <__mulsf3x>
 682:	c4 cf       	rjmp	.-120    	; 0x60c <__fp_round>
 684:	b5 df       	rcall	.-150    	; 0x5f0 <__fp_pscA>
 686:	28 f0       	brcs	.+10     	; 0x692 <__mulsf3+0x12>
 688:	ba df       	rcall	.-140    	; 0x5fe <__fp_pscB>
 68a:	18 f0       	brcs	.+6      	; 0x692 <__mulsf3+0x12>
 68c:	95 23       	and	r25, r21
 68e:	09 f0       	breq	.+2      	; 0x692 <__mulsf3+0x12>
 690:	a6 cf       	rjmp	.-180    	; 0x5de <__fp_inf>
 692:	ab cf       	rjmp	.-170    	; 0x5ea <__fp_nan>
 694:	ef cf       	rjmp	.-34     	; 0x674 <__fp_szero>

00000696 <__mulsf3x>:
 696:	cb df       	rcall	.-106    	; 0x62e <__fp_split3>
 698:	a8 f3       	brcs	.-22     	; 0x684 <__mulsf3+0x4>

0000069a <__mulsf3_pse>:
 69a:	99 23       	and	r25, r25
 69c:	d9 f3       	breq	.-10     	; 0x694 <__mulsf3+0x14>
 69e:	55 23       	and	r21, r21
 6a0:	c9 f3       	breq	.-14     	; 0x694 <__mulsf3+0x14>
 6a2:	95 0f       	add	r25, r21
 6a4:	50 e0       	ldi	r21, 0x00	; 0
 6a6:	55 1f       	adc	r21, r21
 6a8:	aa 27       	eor	r26, r26
 6aa:	ee 27       	eor	r30, r30
 6ac:	ff 27       	eor	r31, r31
 6ae:	bb 27       	eor	r27, r27
 6b0:	00 24       	eor	r0, r0
 6b2:	08 94       	sec
 6b4:	67 95       	ror	r22
 6b6:	20 f4       	brcc	.+8      	; 0x6c0 <__mulsf3_pse+0x26>
 6b8:	e2 0f       	add	r30, r18
 6ba:	f3 1f       	adc	r31, r19
 6bc:	b4 1f       	adc	r27, r20
 6be:	0a 1e       	adc	r0, r26
 6c0:	22 0f       	add	r18, r18
 6c2:	33 1f       	adc	r19, r19
 6c4:	44 1f       	adc	r20, r20
 6c6:	aa 1f       	adc	r26, r26
 6c8:	66 95       	lsr	r22
 6ca:	a9 f7       	brne	.-22     	; 0x6b6 <__mulsf3_pse+0x1c>
 6cc:	77 95       	ror	r23
 6ce:	30 f4       	brcc	.+12     	; 0x6dc <__mulsf3_pse+0x42>
 6d0:	f3 0f       	add	r31, r19
 6d2:	b4 1f       	adc	r27, r20
 6d4:	0a 1e       	adc	r0, r26
 6d6:	12 1e       	adc	r1, r18
 6d8:	08 f4       	brcc	.+2      	; 0x6dc <__mulsf3_pse+0x42>
 6da:	63 95       	inc	r22
 6dc:	33 0f       	add	r19, r19
 6de:	44 1f       	adc	r20, r20
 6e0:	aa 1f       	adc	r26, r26
 6e2:	22 1f       	adc	r18, r18
 6e4:	76 95       	lsr	r23
 6e6:	99 f7       	brne	.-26     	; 0x6ce <__mulsf3_pse+0x34>
 6e8:	87 95       	ror	r24
 6ea:	20 f4       	brcc	.+8      	; 0x6f4 <__mulsf3_pse+0x5a>
 6ec:	b4 0f       	add	r27, r20
 6ee:	0a 1e       	adc	r0, r26
 6f0:	12 1e       	adc	r1, r18
 6f2:	63 1f       	adc	r22, r19
 6f4:	44 0f       	add	r20, r20
 6f6:	aa 1f       	adc	r26, r26
 6f8:	22 1f       	adc	r18, r18
 6fa:	33 1f       	adc	r19, r19
 6fc:	86 95       	lsr	r24
 6fe:	a9 f7       	brne	.-22     	; 0x6ea <__mulsf3_pse+0x50>
 700:	86 2f       	mov	r24, r22
 702:	71 2d       	mov	r23, r1
 704:	60 2d       	mov	r22, r0
 706:	11 24       	eor	r1, r1
 708:	9f 57       	subi	r25, 0x7F	; 127
 70a:	50 40       	sbci	r21, 0x00	; 0
 70c:	8a f0       	brmi	.+34     	; 0x730 <__mulsf3_pse+0x96>
 70e:	e1 f0       	breq	.+56     	; 0x748 <__mulsf3_pse+0xae>
 710:	88 23       	and	r24, r24
 712:	4a f0       	brmi	.+18     	; 0x726 <__mulsf3_pse+0x8c>
 714:	ee 0f       	add	r30, r30
 716:	ff 1f       	adc	r31, r31
 718:	bb 1f       	adc	r27, r27
 71a:	66 1f       	adc	r22, r22
 71c:	77 1f       	adc	r23, r23
 71e:	88 1f       	adc	r24, r24
 720:	91 50       	subi	r25, 0x01	; 1
 722:	50 40       	sbci	r21, 0x00	; 0
 724:	a9 f7       	brne	.-22     	; 0x710 <__mulsf3_pse+0x76>
 726:	9e 3f       	cpi	r25, 0xFE	; 254
 728:	51 05       	cpc	r21, r1
 72a:	70 f0       	brcs	.+28     	; 0x748 <__mulsf3_pse+0xae>
 72c:	58 cf       	rjmp	.-336    	; 0x5de <__fp_inf>
 72e:	a2 cf       	rjmp	.-188    	; 0x674 <__fp_szero>
 730:	5f 3f       	cpi	r21, 0xFF	; 255
 732:	ec f3       	brlt	.-6      	; 0x72e <__mulsf3_pse+0x94>
 734:	98 3e       	cpi	r25, 0xE8	; 232
 736:	dc f3       	brlt	.-10     	; 0x72e <__mulsf3_pse+0x94>
 738:	86 95       	lsr	r24
 73a:	77 95       	ror	r23
 73c:	67 95       	ror	r22
 73e:	b7 95       	ror	r27
 740:	f7 95       	ror	r31
 742:	e7 95       	ror	r30
 744:	9f 5f       	subi	r25, 0xFF	; 255
 746:	c1 f7       	brne	.-16     	; 0x738 <__mulsf3_pse+0x9e>
 748:	fe 2b       	or	r31, r30
 74a:	88 0f       	add	r24, r24
 74c:	91 1d       	adc	r25, r1
 74e:	96 95       	lsr	r25
 750:	87 95       	ror	r24
 752:	97 f9       	bld	r25, 7
 754:	08 95       	ret

00000756 <__udivmodhi4>:
 756:	aa 1b       	sub	r26, r26
 758:	bb 1b       	sub	r27, r27
 75a:	51 e1       	ldi	r21, 0x11	; 17
 75c:	07 c0       	rjmp	.+14     	; 0x76c <__udivmodhi4_ep>

0000075e <__udivmodhi4_loop>:
 75e:	aa 1f       	adc	r26, r26
 760:	bb 1f       	adc	r27, r27
 762:	a6 17       	cp	r26, r22
 764:	b7 07       	cpc	r27, r23
 766:	10 f0       	brcs	.+4      	; 0x76c <__udivmodhi4_ep>
 768:	a6 1b       	sub	r26, r22
 76a:	b7 0b       	sbc	r27, r23

0000076c <__udivmodhi4_ep>:
 76c:	88 1f       	adc	r24, r24
 76e:	99 1f       	adc	r25, r25
 770:	5a 95       	dec	r21
 772:	a9 f7       	brne	.-22     	; 0x75e <__udivmodhi4_loop>
 774:	80 95       	com	r24
 776:	90 95       	com	r25
 778:	bc 01       	movw	r22, r24
 77a:	cd 01       	movw	r24, r26
 77c:	08 95       	ret

0000077e <_exit>:
 77e:	f8 94       	cli

00000780 <__stop_program>:
 780:	ff cf       	rjmp	.-2      	; 0x780 <__stop_program>
