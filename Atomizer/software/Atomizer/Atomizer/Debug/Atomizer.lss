
Atomizer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000880  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000880  00000914  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800066  00800066  0000091a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000091a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000094c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000988  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000910  00000000  00000000  000009f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005d5  00000000  00000000  00001308  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005aa  00000000  00000000  000018dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d0  00000000  00000000  00001e88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004cc  00000000  00000000  00002058  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003b1  00000000  00000000  00002524  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000028d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	e7 c1       	rjmp	.+974    	; 0x3d4 <__vector_2>
   6:	d8 c0       	rjmp	.+432    	; 0x1b8 <__vector_3>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	49 c2       	rjmp	.+1170   	; 0x4a4 <__vector_8>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	68 c1       	rjmp	.+720    	; 0x2e6 <__vector_10>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	c3 c1       	rjmp	.+902    	; 0x3a0 <__vector_12>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e0 e8       	ldi	r30, 0x80	; 128
  32:	f8 e0       	ldi	r31, 0x08	; 8
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a6 36       	cpi	r26, 0x66	; 102
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	a6 e6       	ldi	r26, 0x66	; 102
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a6 37       	cpi	r26, 0x76	; 118
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	66 d0       	rcall	.+204    	; 0x11e <main>
  52:	14 c4       	rjmp	.+2088   	; 0x87c <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <EEPROM_read>:
/////////////////////////

unsigned char EEPROM_read(unsigned char ucAddress)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE))
  56:	e1 99       	sbic	0x1c, 1	; 28
  58:	fe cf       	rjmp	.-4      	; 0x56 <EEPROM_read>
	;
	/* Set up address register */
	EEARL = ucAddress;
  5a:	8e bb       	out	0x1e, r24	; 30
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
  5c:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
  5e:	8d b3       	in	r24, 0x1d	; 29
}
  60:	08 95       	ret

00000062 <EEPROM_write>:

void EEPROM_write(unsigned char ucAddress, unsigned char ucData)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEPE))
  62:	e1 99       	sbic	0x1c, 1	; 28
  64:	fe cf       	rjmp	.-4      	; 0x62 <EEPROM_write>
	;
	/* Erase and write in one operation (atomic operation) */
	EECR |= (0<<EEPM1) | (0<<EEPM0);
  66:	9c b3       	in	r25, 0x1c	; 28
  68:	9c bb       	out	0x1c, r25	; 28
	
	/* Set up address and data registers */
	EEARL = ucAddress;
  6a:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
  6c:	6d bb       	out	0x1d, r22	; 29
	
	/* Write logical one to EEMWE */
	EECR |= (1<<EEMPE);
  6e:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start eeprom write by setting EEWE */
	EECR |= (1<<EEPE);
  70:	e1 9a       	sbi	0x1c, 1	; 28
  72:	08 95       	ret

00000074 <resetPWM>:
}


void resetPWM() {
	
	OCR0A=0x81;		// low duty;	0x42 (66) - 0x81 (129)
  74:	81 e8       	ldi	r24, 0x81	; 129
  76:	89 bd       	out	0x29, r24	; 41
	OCR0B=0x41;		// high duty;	0x01 (1) - 0x41 (65)
  78:	81 e4       	ldi	r24, 0x41	; 65
  7a:	88 bd       	out	0x28, r24	; 40
  7c:	08 95       	ret

0000007e <setModeIndicator>:
}

void setModeIndicator(CONTROLMODE p_currentMode) 
{
	currentMode = p_currentMode;
  7e:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <currentMode>
	switch(p_currentMode)
  82:	81 30       	cpi	r24, 0x01	; 1
  84:	39 f0       	breq	.+14     	; 0x94 <setModeIndicator+0x16>
  86:	18 f0       	brcs	.+6      	; 0x8e <setModeIndicator+0x10>
  88:	82 30       	cpi	r24, 0x02	; 2
  8a:	39 f0       	breq	.+14     	; 0x9a <setModeIndicator+0x1c>
  8c:	08 95       	ret
	{
		case NORMAL:
			// Tri-State mode LED pin (LEDS off)
			DDRB &= ~(1<<DDB2);
  8e:	ba 98       	cbi	0x17, 2	; 23
			PORTB &= ~(1<<PB2);
  90:	c2 98       	cbi	0x18, 2	; 24
			break;
  92:	08 95       	ret
			
		case SKEW:
			// Logic one to mode LED pin 
			DDRB |= (1<<DDB2);
  94:	ba 9a       	sbi	0x17, 2	; 23
			PORTB |= (1<<PB2);
  96:	c2 9a       	sbi	0x18, 2	; 24
			break;
  98:	08 95       	ret
		
		case SWEEP:
			// Logic zero to mode LED pin 
			DDRB |= (1<<DDB2);
  9a:	ba 9a       	sbi	0x17, 2	; 23
			PORTB &= ~(1<<PB2);
  9c:	c2 98       	cbi	0x18, 2	; 24
  9e:	08 95       	ret

000000a0 <TimerModeEnable>:
	}
}

void TimerModeEnable(CONTROLMODE p_currentMode)
{
	currentMode = p_currentMode;
  a0:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <currentMode>
	cli();
  a4:	f8 94       	cli
	
	switch(p_currentMode)
  a6:	81 30       	cpi	r24, 0x01	; 1
  a8:	a1 f0       	breq	.+40     	; 0xd2 <TimerModeEnable+0x32>
  aa:	18 f0       	brcs	.+6      	; 0xb2 <TimerModeEnable+0x12>
  ac:	82 30       	cpi	r24, 0x02	; 2
  ae:	31 f1       	breq	.+76     	; 0xfc <TimerModeEnable+0x5c>
  b0:	34 c0       	rjmp	.+104    	; 0x11a <TimerModeEnable+0x7a>
	{
		case NORMAL:
			
			// disable Timer0 output to OC0B (PB1)
			TCCR0A = 0;
  b2:	1a bc       	out	0x2a, r1	; 42
			///////////////////////////////////
			//// Timer1 CTC  setup
			///////////////////////////////////

			// Timer/Counter1 is reset to $00 after a compare match with OCR1C register value 
			TCCR1 |= (1<<CTC1);
  b4:	80 b7       	in	r24, 0x30	; 48
  b6:	80 68       	ori	r24, 0x80	; 128
  b8:	80 bf       	out	0x30, r24	; 48
	
			// enable toggle output on OC1A (PB1) output line.
			TCCR1 |= (0<<COM1A1) | (1<<COM1A0);
  ba:	80 b7       	in	r24, 0x30	; 48
  bc:	80 61       	ori	r24, 0x10	; 16
  be:	80 bf       	out	0x30, r24	; 48
			
			// Timer/Counter1 Prescale Select PCK/2048
			TCCR1 |= (1<<CS13) | (1<<CS12) | (0<<CS11) | (0<<CS10);
  c0:	80 b7       	in	r24, 0x30	; 48
  c2:	8c 60       	ori	r24, 0x0C	; 12
  c4:	80 bf       	out	0x30, r24	; 48
	
			TIMSK |= (1<<OCIE1A);
  c6:	89 b7       	in	r24, 0x39	; 57
  c8:	80 64       	ori	r24, 0x40	; 64
  ca:	89 bf       	out	0x39, r24	; 57
	
			OCR1C =  10;
  cc:	8a e0       	ldi	r24, 0x0A	; 10
  ce:	8d bd       	out	0x2d, r24	; 45
	
			break;
  d0:	24 c0       	rjmp	.+72     	; 0x11a <TimerModeEnable+0x7a>
			
		case SKEW:
			
			// disable Timer1 output to OC1A (PB1)
			TCCR1 = 0;
  d2:	10 be       	out	0x30, r1	; 48
			///////////////////////////////////
			//// Timer0 phase PWM setup
			/////////////////////////////////
			
			//Normal port operation, OC0A disconnected
			TCCR0A |= (0<<COM0A1) | (0<<COM0A0);
  d4:	8a b5       	in	r24, 0x2a	; 42
  d6:	8a bd       	out	0x2a, r24	; 42
			// Enable OC0B (PB1) output. (Clear OC0B on Compare Match, set OC0B at BOTTOM - non-inverting mode)
			TCCR0A |= (1<<COM0B1) | (0<<COM0B0);
  d8:	8a b5       	in	r24, 0x2a	; 42
  da:	80 62       	ori	r24, 0x20	; 32
  dc:	8a bd       	out	0x2a, r24	; 42
			// Mode 5: phase PWM
			TCCR0A |= (0<<WGM01) | (1<<WGM00);
  de:	8a b5       	in	r24, 0x2a	; 42
  e0:	81 60       	ori	r24, 0x01	; 1
  e2:	8a bd       	out	0x2a, r24	; 42
			TCCR0B |= (1<<WGM02);
  e4:	83 b7       	in	r24, 0x33	; 51
  e6:	88 60       	ori	r24, 0x08	; 8
  e8:	83 bf       	out	0x33, r24	; 51
			// 1024 Prescaler
			TCCR0B |= (1<<CS02) | (0<<CS01) | (1<<CS00);
  ea:	83 b7       	in	r24, 0x33	; 51
  ec:	85 60       	ori	r24, 0x05	; 5
  ee:	83 bf       	out	0x33, r24	; 51
	
			// Timer/Counter0 Output Compare Match A Interrupt Enable
			TIMSK |= (1<<OCIE0A);
  f0:	89 b7       	in	r24, 0x39	; 57
  f2:	80 61       	ori	r24, 0x10	; 16
  f4:	89 bf       	out	0x39, r24	; 57
	
			TCNT0=0x00;
  f6:	12 be       	out	0x32, r1	; 50
			resetPWM();
  f8:	bd df       	rcall	.-134    	; 0x74 <resetPWM>
			
			break;
  fa:	0f c0       	rjmp	.+30     	; 0x11a <TimerModeEnable+0x7a>
		
		case SWEEP:
		
			// disable Timer0 output to OC0B (PB1)
			TCCR0A = 0;
  fc:	1a bc       	out	0x2a, r1	; 42
			///////////////////////////////////
			//// Timer1 CTC  setup
			///////////////////////////////////

			// Timer/Counter1 is reset to $00 after a compare match with OCR1C register value
			TCCR1 |= (1<<CTC1);
  fe:	80 b7       	in	r24, 0x30	; 48
 100:	80 68       	ori	r24, 0x80	; 128
 102:	80 bf       	out	0x30, r24	; 48
			
			// enable toggle output on OC1A (PB1) output line.
			TCCR1 |= (0<<COM1A1) | (1<<COM1A0);
 104:	80 b7       	in	r24, 0x30	; 48
 106:	80 61       	ori	r24, 0x10	; 16
 108:	80 bf       	out	0x30, r24	; 48
			
			// Timer/Counter1 Prescale Select PCK/2048
			//TCCR1 |= (0<<CS13) | (1<<CS12) | (1<<CS11) | (1<<CS10); // /64 
			//TCCR1 |= (1<<CS13) | (0<<CS12) | (0<<CS11) | (0<<CS10); // /128
			TCCR1 |= (1<<CS13) | (0<<CS12) | (0<<CS11) | (1<<CS10); // /256
 10a:	80 b7       	in	r24, 0x30	; 48
 10c:	89 60       	ori	r24, 0x09	; 9
 10e:	80 bf       	out	0x30, r24	; 48
			//TCCR1 |= (1<<CS13) | (0<<CS12) | (1<<CS11) | (0<<CS10); // /512
			//TCCR1 |= (1<<CS13) | (0<<CS12) | (1<<CS11) | (1<<CS10); // /1024
			//TCCR1 |= (1<<CS13) | (1<<CS12) | (0<<CS11) | (0<<CS10); // /2048
			
			TIMSK |= (1<<OCIE1A);
 110:	89 b7       	in	r24, 0x39	; 57
 112:	80 64       	ori	r24, 0x40	; 64
 114:	89 bf       	out	0x39, r24	; 57
			
			OCR1C =  10;
 116:	8a e0       	ldi	r24, 0x0A	; 10
 118:	8d bd       	out	0x2d, r24	; 45
			
			break;
			*/
	}
	
	sei();	
 11a:	78 94       	sei
 11c:	08 95       	ret

0000011e <main>:
static __inline__ void clock_prescale_set(clock_div_t) __attribute__((__always_inline__));

void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 11e:	94 e0       	ldi	r25, 0x04	; 4
 120:	80 e8       	ldi	r24, 0x80	; 128
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	f8 94       	cli
 126:	86 bd       	out	0x26, r24	; 38
 128:	96 bd       	out	0x26, r25	; 38
 12a:	0f be       	out	0x3f, r0	; 63
int main(void)
{
	// set the MCU clock low enough to run at ~3Hz	
	clock_prescale_set(4);
	
	cli();
 12c:	f8 94       	cli
	////////////////////////
	
	
	
	// clock signal (output)
	PORTB |= (1<<PB1);
 12e:	c1 9a       	sbi	0x18, 1	; 24
	DDRB |= (1<<DDB1);
 130:	b9 9a       	sbi	0x17, 1	; 23
	
	// ADC3+4 (input)
	PORTB &= ~(1<<PB3);
 132:	c3 98       	cbi	0x18, 3	; 24
	DDRB &= ~(1<<DDB3);
 134:	bb 98       	cbi	0x17, 3	; 23
	PORTB &= ~(1<<PB4);
 136:	c4 98       	cbi	0x18, 4	; 24
	DDRB &= ~(1<<DDB4);
 138:	bc 98       	cbi	0x17, 4	; 23
	///////////////////////////////////
	//// PCINT setup
	///////////////////////////////////
	
	// set PB0 to input
	DDRB &= ~(1<<DDB0);
 13a:	b8 98       	cbi	0x17, 0	; 23
	// set PB0 pull-up
	PORTB |= 1<<PB0;
 13c:	c0 9a       	sbi	0x18, 0	; 24
	
	// enable PC Interrupts
	GIMSK |= (1<<PCIE);
 13e:	8b b7       	in	r24, 0x3b	; 59
 140:	80 62       	ori	r24, 0x20	; 32
 142:	8b bf       	out	0x3b, r24	; 59
	// enable PCINT0 interrupt
	PCMSK |= (1<<PCINT0);
 144:	a8 9a       	sbi	0x15, 0	; 21
	
	initState = EEPROM_read(modeAddress);	
 146:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
 14a:	85 df       	rcall	.-246    	; 0x56 <EEPROM_read>
 14c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <initState>
	if ((initState > -1) && (initState < 3))
 150:	83 30       	cpi	r24, 0x03	; 3
 152:	38 f4       	brcc	.+14     	; 0x162 <main+0x44>
	{
		setModeIndicator(currentMode = initState);
 154:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <currentMode>
 158:	92 df       	rcall	.-220    	; 0x7e <setModeIndicator>
		TimerModeEnable(initState);
 15a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <initState>
 15e:	a0 df       	rcall	.-192    	; 0xa0 <TimerModeEnable>
 160:	07 c0       	rjmp	.+14     	; 0x170 <main+0x52>
		
		
	}
	else 
	{
		setModeIndicator(currentMode = NORMAL);
 162:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <currentMode>
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	8a df       	rcall	.-236    	; 0x7e <setModeIndicator>
		TimerModeEnable(currentMode);
 16a:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <currentMode>
 16e:	98 df       	rcall	.-208    	; 0xa0 <TimerModeEnable>
	//// ADC setup 
	///////////////////////////////////

	
	// VCC used as Voltage Reference, disconnected from PB0 (AREF).
	ADMUX &= ~((1<<REFS0) | (1<<REFS1));
 170:	87 b1       	in	r24, 0x07	; 7
 172:	8f 73       	andi	r24, 0x3F	; 63
 174:	87 b9       	out	0x07, r24	; 7
	
	// ADC Right Adjust Result
	ADMUX &= ~((1<<ADLAR));
 176:	3d 98       	cbi	0x07, 5	; 7
	// ADC Left Adjust Result
	//ADMUX |= _ADCLA;
	
	// ADC3 selected by default
	ADMUX |= _ADC3EN;
 178:	87 b1       	in	r24, 0x07	; 7
 17a:	83 60       	ori	r24, 0x03	; 3
 17c:	87 b9       	out	0x07, r24	; 7
	
	// ADC enable,  Auto Trigger Enable,  Interrupt Enable	
	ADCSRA |= (1<<ADATE) | (1<<ADIE) | (1<<ADEN);
 17e:	86 b1       	in	r24, 0x06	; 6
 180:	88 6a       	ori	r24, 0xA8	; 168
 182:	86 b9       	out	0x06, r24	; 6
	
	// ADC prescaler /128 - this is fast enough for our purposes, NOTE: /2 prescaler blocks WDT_vect 
	ADCSRA |= (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2);
 184:	86 b1       	in	r24, 0x06	; 6
 186:	87 60       	ori	r24, 0x07	; 7
 188:	86 b9       	out	0x06, r24	; 6

	// Single Ended conversions, Auto Trigger Source = Free Running mode
	ADCSRB = 0;
 18a:	13 b8       	out	0x03, r1	; 3
	
	// ADC Start Conversion
	ADCSRA |= (1<<ADSC);
 18c:	36 9a       	sbi	0x06, 6	; 6
	
	// setup watchdog to interupt every 1sec
	WDTCR |= (1<<WDE) | (1<<WDIE);
 18e:	81 b5       	in	r24, 0x21	; 33
 190:	88 64       	ori	r24, 0x48	; 72
 192:	81 bd       	out	0x21, r24	; 33
	
	sei();
 194:	78 94       	sei
	{
		// wait for interrupts
		
		//EEPROM_write(modeAddress, currentMode);
		
		EEPROM_write(pot1LowAddress, 0);
 196:	60 e0       	ldi	r22, 0x00	; 0
 198:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <pot1LowAddress>
 19c:	62 df       	rcall	.-316    	; 0x62 <EEPROM_write>
		EEPROM_write(pot1HighAddress, 0);
 19e:	60 e0       	ldi	r22, 0x00	; 0
 1a0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <pot1HighAddress>
 1a4:	5e df       	rcall	.-324    	; 0x62 <EEPROM_write>
		
		EEPROM_write(pot2LowAddress, 0);
 1a6:	60 e0       	ldi	r22, 0x00	; 0
 1a8:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <pot2LowAddress>
 1ac:	5a df       	rcall	.-332    	; 0x62 <EEPROM_write>
		EEPROM_write(pot2HighAddress, 0);
 1ae:	60 e0       	ldi	r22, 0x00	; 0
 1b0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 1b4:	56 df       	rcall	.-340    	; 0x62 <EEPROM_write>
 1b6:	ef cf       	rjmp	.-34     	; 0x196 <main+0x78>

000001b8 <__vector_3>:
//////////////////////////////
///// INTERRUPTS
//////////////////////////////

ISR (TIMER1_COMPA_vect)
{
 1b8:	1f 92       	push	r1
 1ba:	0f 92       	push	r0
 1bc:	0f b6       	in	r0, 0x3f	; 63
 1be:	0f 92       	push	r0
 1c0:	11 24       	eor	r1, r1
 1c2:	cf 92       	push	r12
 1c4:	df 92       	push	r13
 1c6:	ef 92       	push	r14
 1c8:	ff 92       	push	r15
 1ca:	2f 93       	push	r18
 1cc:	3f 93       	push	r19
 1ce:	4f 93       	push	r20
 1d0:	5f 93       	push	r21
 1d2:	6f 93       	push	r22
 1d4:	7f 93       	push	r23
 1d6:	8f 93       	push	r24
 1d8:	9f 93       	push	r25
 1da:	af 93       	push	r26
 1dc:	bf 93       	push	r27
 1de:	ef 93       	push	r30
 1e0:	ff 93       	push	r31
	// Normal/SWEEP mode freq adjust
	switch(currentMode)
 1e2:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <currentMode>
 1e6:	88 23       	and	r24, r24
 1e8:	19 f0       	breq	.+6      	; 0x1f0 <__vector_3+0x38>
 1ea:	82 30       	cpi	r24, 0x02	; 2
 1ec:	b1 f0       	breq	.+44     	; 0x21a <__vector_3+0x62>
 1ee:	66 c0       	rjmp	.+204    	; 0x2bc <__stack+0x5d>
	{
		// as the pot is turned CW the clock duty will decrease, a duty less than 2 is bad
		case NORMAL:
			if((upperpot / 16) < 2)
 1f0:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <upperpot>
 1f4:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <upperpot+0x1>
 1f8:	80 97       	sbiw	r24, 0x20	; 32
 1fa:	18 f4       	brcc	.+6      	; 0x202 <__vector_3+0x4a>
			{
				OCR1C = 2;
 1fc:	82 e0       	ldi	r24, 0x02	; 2
 1fe:	8d bd       	out	0x2d, r24	; 45
 200:	5d c0       	rjmp	.+186    	; 0x2bc <__stack+0x5d>
			}
			else
			{
				OCR1C = (upperpot / 16);
 202:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <upperpot>
 206:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <upperpot+0x1>
 20a:	92 95       	swap	r25
 20c:	82 95       	swap	r24
 20e:	8f 70       	andi	r24, 0x0F	; 15
 210:	89 27       	eor	r24, r25
 212:	9f 70       	andi	r25, 0x0F	; 15
 214:	89 27       	eor	r24, r25
 216:	8d bd       	out	0x2d, r24	; 45
 218:	51 c0       	rjmp	.+162    	; 0x2bc <__stack+0x5d>
			
			
			break;
		case SWEEP:
			//prevents MCU reset
			if(upperpot < 50) 
 21a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <upperpot>
 21e:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <upperpot+0x1>
 222:	c2 97       	sbiw	r24, 0x32	; 50
 224:	30 f4       	brcc	.+12     	; 0x232 <__vector_3+0x7a>
			{
				upperpot = 100;
 226:	84 e6       	ldi	r24, 0x64	; 100
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <upperpot+0x1>
 22e:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <upperpot>
			}
			
			OCR1C= (upperpot / (lowerpot/16)) * weight;
 232:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <upperpot>
 236:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <upperpot+0x1>
 23a:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <lowerpot>
 23e:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <lowerpot+0x1>
 242:	c0 90 72 00 	lds	r12, 0x0072	; 0x800072 <weight>
 246:	d0 90 73 00 	lds	r13, 0x0073	; 0x800073 <weight+0x1>
 24a:	e0 90 74 00 	lds	r14, 0x0074	; 0x800074 <weight+0x2>
 24e:	f0 90 75 00 	lds	r15, 0x0075	; 0x800075 <weight+0x3>
 252:	72 95       	swap	r23
 254:	62 95       	swap	r22
 256:	6f 70       	andi	r22, 0x0F	; 15
 258:	67 27       	eor	r22, r23
 25a:	7f 70       	andi	r23, 0x0F	; 15
 25c:	67 27       	eor	r22, r23
 25e:	fa d2       	rcall	.+1524   	; 0x854 <__udivmodhi4>
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	fe d1       	rcall	.+1020   	; 0x662 <__floatunsisf>
 266:	a7 01       	movw	r20, r14
 268:	96 01       	movw	r18, r12
 26a:	89 d2       	rcall	.+1298   	; 0x77e <__mulsf3>
 26c:	ce d1       	rcall	.+924    	; 0x60a <__fixunssfsi>
 26e:	6d bd       	out	0x2d, r22	; 45
			weight=weight+0.5;
 270:	60 91 72 00 	lds	r22, 0x0072	; 0x800072 <weight>
 274:	70 91 73 00 	lds	r23, 0x0073	; 0x800073 <weight+0x1>
 278:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <weight+0x2>
 27c:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <weight+0x3>
 280:	20 e0       	ldi	r18, 0x00	; 0
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	40 e0       	ldi	r20, 0x00	; 0
 286:	5f e3       	ldi	r21, 0x3F	; 63
 288:	5c d1       	rcall	.+696    	; 0x542 <__addsf3>
 28a:	60 93 72 00 	sts	0x0072, r22	; 0x800072 <weight>
 28e:	70 93 73 00 	sts	0x0073, r23	; 0x800073 <weight+0x1>
 292:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <weight+0x2>
 296:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <weight+0x3>
			if (OCR1C > (upperpot))
 29a:	8d b5       	in	r24, 0x2d	; 45
 29c:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <upperpot>
 2a0:	30 91 6b 00 	lds	r19, 0x006B	; 0x80006b <upperpot+0x1>
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	28 17       	cp	r18, r24
 2a8:	39 07       	cpc	r19, r25
 2aa:	40 f4       	brcc	.+16     	; 0x2bc <__stack+0x5d>
			{
				weight = 0;
 2ac:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <weight>
 2b0:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <weight+0x1>
 2b4:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <weight+0x2>
 2b8:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <weight+0x3>
			break;
		*/
	}
			
	
}
 2bc:	ff 91       	pop	r31
 2be:	ef 91       	pop	r30
 2c0:	bf 91       	pop	r27
 2c2:	af 91       	pop	r26
 2c4:	9f 91       	pop	r25
 2c6:	8f 91       	pop	r24
 2c8:	7f 91       	pop	r23
 2ca:	6f 91       	pop	r22
 2cc:	5f 91       	pop	r21
 2ce:	4f 91       	pop	r20
 2d0:	3f 91       	pop	r19
 2d2:	2f 91       	pop	r18
 2d4:	ff 90       	pop	r15
 2d6:	ef 90       	pop	r14
 2d8:	df 90       	pop	r13
 2da:	cf 90       	pop	r12
 2dc:	0f 90       	pop	r0
 2de:	0f be       	out	0x3f, r0	; 63
 2e0:	0f 90       	pop	r0
 2e2:	1f 90       	pop	r1
 2e4:	18 95       	reti

000002e6 <__vector_10>:

ISR (TIMER0_COMPA_vect)
{
 2e6:	1f 92       	push	r1
 2e8:	0f 92       	push	r0
 2ea:	0f b6       	in	r0, 0x3f	; 63
 2ec:	0f 92       	push	r0
 2ee:	11 24       	eor	r1, r1
 2f0:	2f 93       	push	r18
 2f2:	3f 93       	push	r19
 2f4:	8f 93       	push	r24
 2f6:	9f 93       	push	r25
	
	switch(currentMode)
 2f8:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <currentMode>
 2fc:	81 30       	cpi	r24, 0x01	; 1
 2fe:	09 f0       	breq	.+2      	; 0x302 <__vector_10+0x1c>
 300:	46 c0       	rjmp	.+140    	; 0x38e <__vector_10+0xa8>
		// SKEW mode: user can control both duties of timer PWM (translates to tremolo PWM)
		case SKEW:
			// Skew mode freq adjust
	
			// update high duty (upperpot mapped 10bit -> 8Bit)
			if((upperpot / 16) > (lowerpot / 16)) 
 302:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <upperpot>
 306:	30 91 6b 00 	lds	r19, 0x006B	; 0x80006b <upperpot+0x1>
 30a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <lowerpot>
 30e:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <lowerpot+0x1>
 312:	32 95       	swap	r19
 314:	22 95       	swap	r18
 316:	2f 70       	andi	r18, 0x0F	; 15
 318:	23 27       	eor	r18, r19
 31a:	3f 70       	andi	r19, 0x0F	; 15
 31c:	23 27       	eor	r18, r19
 31e:	92 95       	swap	r25
 320:	82 95       	swap	r24
 322:	8f 70       	andi	r24, 0x0F	; 15
 324:	89 27       	eor	r24, r25
 326:	9f 70       	andi	r25, 0x0F	; 15
 328:	89 27       	eor	r24, r25
 32a:	82 17       	cp	r24, r18
 32c:	93 07       	cpc	r25, r19
 32e:	60 f0       	brcs	.+24     	; 0x348 <__vector_10+0x62>
			{
				// upper pot cannot be more than lower pot
			}
			else 
			{
				OCR0B=0x1 + (upperpot / 16);
 330:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <upperpot>
 334:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <upperpot+0x1>
 338:	92 95       	swap	r25
 33a:	82 95       	swap	r24
 33c:	8f 70       	andi	r24, 0x0F	; 15
 33e:	89 27       	eor	r24, r25
 340:	9f 70       	andi	r25, 0x0F	; 15
 342:	89 27       	eor	r24, r25
 344:	8f 5f       	subi	r24, 0xFF	; 255
 346:	88 bd       	out	0x28, r24	; 40
			}
	
	
			// update low duty (lowerpot mapped 10bit -> 8Bit)
			if((lowerpot / 16) < (upperpot / 16)) 
 348:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <lowerpot>
 34c:	30 91 69 00 	lds	r19, 0x0069	; 0x800069 <lowerpot+0x1>
 350:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <upperpot>
 354:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <upperpot+0x1>
 358:	32 95       	swap	r19
 35a:	22 95       	swap	r18
 35c:	2f 70       	andi	r18, 0x0F	; 15
 35e:	23 27       	eor	r18, r19
 360:	3f 70       	andi	r19, 0x0F	; 15
 362:	23 27       	eor	r18, r19
 364:	92 95       	swap	r25
 366:	82 95       	swap	r24
 368:	8f 70       	andi	r24, 0x0F	; 15
 36a:	89 27       	eor	r24, r25
 36c:	9f 70       	andi	r25, 0x0F	; 15
 36e:	89 27       	eor	r24, r25
 370:	28 17       	cp	r18, r24
 372:	39 07       	cpc	r19, r25
 374:	60 f0       	brcs	.+24     	; 0x38e <__vector_10+0xa8>
			{
				// lower pot cannot be less than higher pot
			}
			else 
			{
				OCR0A=0x1 + (lowerpot / 16);
 376:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <lowerpot>
 37a:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <lowerpot+0x1>
 37e:	92 95       	swap	r25
 380:	82 95       	swap	r24
 382:	8f 70       	andi	r24, 0x0F	; 15
 384:	89 27       	eor	r24, r25
 386:	9f 70       	andi	r25, 0x0F	; 15
 388:	89 27       	eor	r24, r25
 38a:	8f 5f       	subi	r24, 0xFF	; 255
 38c:	89 bd       	out	0x29, r24	; 41
			break;
	
	}
	

}
 38e:	9f 91       	pop	r25
 390:	8f 91       	pop	r24
 392:	3f 91       	pop	r19
 394:	2f 91       	pop	r18
 396:	0f 90       	pop	r0
 398:	0f be       	out	0x3f, r0	; 63
 39a:	0f 90       	pop	r0
 39c:	1f 90       	pop	r1
 39e:	18 95       	reti

000003a0 <__vector_12>:

ISR (WDT_vect)
{
 3a0:	1f 92       	push	r1
 3a2:	0f 92       	push	r0
 3a4:	0f b6       	in	r0, 0x3f	; 63
 3a6:	0f 92       	push	r0
 3a8:	11 24       	eor	r1, r1
 3aa:	8f 93       	push	r24
 3ac:	9f 93       	push	r25
	// increment the counter
	wdcounter++;
 3ae:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <wdcounter>
 3b2:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <wdcounter+0x1>
 3b6:	01 96       	adiw	r24, 0x01	; 1
 3b8:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <wdcounter+0x1>
 3bc:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <wdcounter>
	
	// re-enable the WDG interrupt to prevent device reset.
	WDTCR |= (1<<WDIE);
 3c0:	81 b5       	in	r24, 0x21	; 33
 3c2:	80 64       	ori	r24, 0x40	; 64
 3c4:	81 bd       	out	0x21, r24	; 33
}
 3c6:	9f 91       	pop	r25
 3c8:	8f 91       	pop	r24
 3ca:	0f 90       	pop	r0
 3cc:	0f be       	out	0x3f, r0	; 63
 3ce:	0f 90       	pop	r0
 3d0:	1f 90       	pop	r1
 3d2:	18 95       	reti

000003d4 <__vector_2>:

ISR (PCINT0_vect)
{
 3d4:	1f 92       	push	r1
 3d6:	0f 92       	push	r0
 3d8:	0f b6       	in	r0, 0x3f	; 63
 3da:	0f 92       	push	r0
 3dc:	11 24       	eor	r1, r1
 3de:	cf 92       	push	r12
 3e0:	df 92       	push	r13
 3e2:	ef 92       	push	r14
 3e4:	ff 92       	push	r15
 3e6:	2f 93       	push	r18
 3e8:	3f 93       	push	r19
 3ea:	4f 93       	push	r20
 3ec:	5f 93       	push	r21
 3ee:	6f 93       	push	r22
 3f0:	7f 93       	push	r23
 3f2:	8f 93       	push	r24
 3f4:	9f 93       	push	r25
 3f6:	af 93       	push	r26
 3f8:	bf 93       	push	r27
 3fa:	ef 93       	push	r30
 3fc:	ff 93       	push	r31
	// check for bounce
	uint32_t interrupt_time = wdcounter;
 3fe:	c0 90 70 00 	lds	r12, 0x0070	; 0x800070 <wdcounter>
 402:	d0 90 71 00 	lds	r13, 0x0071	; 0x800071 <wdcounter+0x1>
 406:	e1 2c       	mov	r14, r1
 408:	f1 2c       	mov	r15, r1
	if (interrupt_time - pd0_last_interrupt_time > DEBOUNCE_DELAY) 
 40a:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <pd0_last_interrupt_time>
 40e:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <pd0_last_interrupt_time+0x1>
 412:	a0 91 6e 00 	lds	r26, 0x006E	; 0x80006e <pd0_last_interrupt_time+0x2>
 416:	b0 91 6f 00 	lds	r27, 0x006F	; 0x80006f <pd0_last_interrupt_time+0x3>
 41a:	a7 01       	movw	r20, r14
 41c:	96 01       	movw	r18, r12
 41e:	28 1b       	sub	r18, r24
 420:	39 0b       	sbc	r19, r25
 422:	4a 0b       	sbc	r20, r26
 424:	5b 0b       	sbc	r21, r27
 426:	25 36       	cpi	r18, 0x65	; 101
 428:	31 05       	cpc	r19, r1
 42a:	41 05       	cpc	r20, r1
 42c:	51 05       	cpc	r21, r1
 42e:	28 f1       	brcs	.+74     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
	{
		// toggle the control mode
		switch(currentMode) 
 430:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <currentMode>
 434:	81 30       	cpi	r24, 0x01	; 1
 436:	49 f0       	breq	.+18     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 438:	18 f0       	brcs	.+6      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 43a:	82 30       	cpi	r24, 0x02	; 2
 43c:	61 f0       	breq	.+24     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 43e:	10 c0       	rjmp	.+32     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
		{
			case NORMAL:
				
				TimerModeEnable(SKEW);
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	2e de       	rcall	.-932    	; 0xa0 <TimerModeEnable>
				setModeIndicator(SKEW);
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	1b de       	rcall	.-970    	; 0x7e <setModeIndicator>

				break;
 448:	0b c0       	rjmp	.+22     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>

			case SKEW:
				
				setModeIndicator(SWEEP);
 44a:	82 e0       	ldi	r24, 0x02	; 2
 44c:	18 de       	rcall	.-976    	; 0x7e <setModeIndicator>
				TimerModeEnable(SWEEP);
 44e:	82 e0       	ldi	r24, 0x02	; 2
 450:	27 de       	rcall	.-946    	; 0xa0 <TimerModeEnable>
				resetPWM();
 452:	10 de       	rcall	.-992    	; 0x74 <resetPWM>
				break;	
 454:	05 c0       	rjmp	.+10     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>

			case SWEEP:
				
				setModeIndicator(NORMAL);
 456:	80 e0       	ldi	r24, 0x00	; 0
 458:	12 de       	rcall	.-988    	; 0x7e <setModeIndicator>
				TimerModeEnable(NORMAL);
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	21 de       	rcall	.-958    	; 0xa0 <TimerModeEnable>
				resetPWM();
 45e:	0a de       	rcall	.-1004   	; 0x74 <resetPWM>
			case FADE:
				break;
			*/
		}
		// store the tick of the last successful press
		pd0_last_interrupt_time = interrupt_time;
 460:	c0 92 6c 00 	sts	0x006C, r12	; 0x80006c <pd0_last_interrupt_time>
 464:	d0 92 6d 00 	sts	0x006D, r13	; 0x80006d <pd0_last_interrupt_time+0x1>
 468:	e0 92 6e 00 	sts	0x006E, r14	; 0x80006e <pd0_last_interrupt_time+0x2>
 46c:	f0 92 6f 00 	sts	0x006F, r15	; 0x80006f <pd0_last_interrupt_time+0x3>
		
		// write the new mode selection to EEPROM
		EEPROM_write(modeAddress, currentMode);
 470:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <currentMode>
 474:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
 478:	f4 dd       	rcall	.-1048   	; 0x62 <EEPROM_write>
	}
}
 47a:	ff 91       	pop	r31
 47c:	ef 91       	pop	r30
 47e:	bf 91       	pop	r27
 480:	af 91       	pop	r26
 482:	9f 91       	pop	r25
 484:	8f 91       	pop	r24
 486:	7f 91       	pop	r23
 488:	6f 91       	pop	r22
 48a:	5f 91       	pop	r21
 48c:	4f 91       	pop	r20
 48e:	3f 91       	pop	r19
 490:	2f 91       	pop	r18
 492:	ff 90       	pop	r15
 494:	ef 90       	pop	r14
 496:	df 90       	pop	r13
 498:	cf 90       	pop	r12
 49a:	0f 90       	pop	r0
 49c:	0f be       	out	0x3f, r0	; 63
 49e:	0f 90       	pop	r0
 4a0:	1f 90       	pop	r1
 4a2:	18 95       	reti

000004a4 <__vector_8>:

ISR (ADC_vect)
{
 4a4:	1f 92       	push	r1
 4a6:	0f 92       	push	r0
 4a8:	0f b6       	in	r0, 0x3f	; 63
 4aa:	0f 92       	push	r0
 4ac:	11 24       	eor	r1, r1
 4ae:	2f 93       	push	r18
 4b0:	3f 93       	push	r19
 4b2:	8f 93       	push	r24
 4b4:	9f 93       	push	r25
	// 1.check current adc mux channel
	// 2.read ADC result
	// 3.enable the next contiguous mux channel
	
	switch(ADMUX) {
 4b6:	87 b1       	in	r24, 0x07	; 7
 4b8:	82 30       	cpi	r24, 0x02	; 2
 4ba:	19 f0       	breq	.+6      	; 0x4c2 <__vector_8+0x1e>
 4bc:	83 30       	cpi	r24, 0x03	; 3
 4be:	e9 f0       	breq	.+58     	; 0x4fa <__vector_8+0x56>
 4c0:	35 c0       	rjmp	.+106    	; 0x52c <__vector_8+0x88>
		
		// if ADLAR bit set, use switch case mask '_ADCLA | _ADCXEN'
		// if ADLAR bit cleared, use switch case mask '_ADCXEN'
		
		case _ADC2EN:
		upperpot = ADCL;				// read 8 LSB
 4c2:	84 b1       	in	r24, 0x04	; 4
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <upperpot+0x1>
 4ca:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <upperpot>
		upperpot += ADCH << 8;		// read 2 MSB, shift them left 8 positions and add to LSB. Result = 2MSB + 8LSB
 4ce:	95 b1       	in	r25, 0x05	; 5
 4d0:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <upperpot>
 4d4:	30 91 6b 00 	lds	r19, 0x006B	; 0x80006b <upperpot+0x1>
 4d8:	89 2f       	mov	r24, r25
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	98 2f       	mov	r25, r24
 4de:	88 27       	eor	r24, r24
 4e0:	82 0f       	add	r24, r18
 4e2:	93 1f       	adc	r25, r19
 4e4:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <upperpot+0x1>
 4e8:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <upperpot>
		ADMUX &= _ADCLA | _ADC0EN;		//  clear MUX bits whilst retaining ADC Left Adjust Result
 4ec:	87 b1       	in	r24, 0x07	; 7
 4ee:	80 72       	andi	r24, 0x20	; 32
 4f0:	87 b9       	out	0x07, r24	; 7
		ADMUX |= _ADC3EN;				// set ADC3 for next check
 4f2:	87 b1       	in	r24, 0x07	; 7
 4f4:	83 60       	ori	r24, 0x03	; 3
 4f6:	87 b9       	out	0x07, r24	; 7
		break;
 4f8:	19 c0       	rjmp	.+50     	; 0x52c <__vector_8+0x88>
		
		case _ADC3EN:
		lowerpot = ADCL;				// read 8 LSB
 4fa:	84 b1       	in	r24, 0x04	; 4
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <lowerpot+0x1>
 502:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <lowerpot>
		lowerpot += ADCH << 8;		// read 2 MSB, shift them left 8 positions and add to LSB. Result = 2MSB + 8LSB
 506:	95 b1       	in	r25, 0x05	; 5
 508:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <lowerpot>
 50c:	30 91 69 00 	lds	r19, 0x0069	; 0x800069 <lowerpot+0x1>
 510:	89 2f       	mov	r24, r25
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	98 2f       	mov	r25, r24
 516:	88 27       	eor	r24, r24
 518:	82 0f       	add	r24, r18
 51a:	93 1f       	adc	r25, r19
 51c:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <lowerpot+0x1>
 520:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <lowerpot>
		ADMUX &= _ADCLA | _ADC0EN;		// clear MUX bits whilst retaining ADC Left Adjust Result
 524:	87 b1       	in	r24, 0x07	; 7
 526:	80 72       	andi	r24, 0x20	; 32
 528:	87 b9       	out	0x07, r24	; 7
		ADMUX |= _ADC2EN;				// set ADC2 for check
 52a:	39 9a       	sbi	0x07, 1	; 7
		break;
		
	}
	// Start the next AD conversion
	ADCSRA|=(1<<ADSC);
 52c:	36 9a       	sbi	0x06, 6	; 6
}
 52e:	9f 91       	pop	r25
 530:	8f 91       	pop	r24
 532:	3f 91       	pop	r19
 534:	2f 91       	pop	r18
 536:	0f 90       	pop	r0
 538:	0f be       	out	0x3f, r0	; 63
 53a:	0f 90       	pop	r0
 53c:	1f 90       	pop	r1
 53e:	18 95       	reti

00000540 <__subsf3>:
 540:	50 58       	subi	r21, 0x80	; 128

00000542 <__addsf3>:
 542:	bb 27       	eor	r27, r27
 544:	aa 27       	eor	r26, r26
 546:	0e d0       	rcall	.+28     	; 0x564 <__addsf3x>
 548:	e0 c0       	rjmp	.+448    	; 0x70a <__fp_round>
 54a:	d1 d0       	rcall	.+418    	; 0x6ee <__fp_pscA>
 54c:	30 f0       	brcs	.+12     	; 0x55a <__addsf3+0x18>
 54e:	d6 d0       	rcall	.+428    	; 0x6fc <__fp_pscB>
 550:	20 f0       	brcs	.+8      	; 0x55a <__addsf3+0x18>
 552:	31 f4       	brne	.+12     	; 0x560 <__addsf3+0x1e>
 554:	9f 3f       	cpi	r25, 0xFF	; 255
 556:	11 f4       	brne	.+4      	; 0x55c <__addsf3+0x1a>
 558:	1e f4       	brtc	.+6      	; 0x560 <__addsf3+0x1e>
 55a:	c6 c0       	rjmp	.+396    	; 0x6e8 <__fp_nan>
 55c:	0e f4       	brtc	.+2      	; 0x560 <__addsf3+0x1e>
 55e:	e0 95       	com	r30
 560:	e7 fb       	bst	r30, 7
 562:	bc c0       	rjmp	.+376    	; 0x6dc <__fp_inf>

00000564 <__addsf3x>:
 564:	e9 2f       	mov	r30, r25
 566:	e2 d0       	rcall	.+452    	; 0x72c <__fp_split3>
 568:	80 f3       	brcs	.-32     	; 0x54a <__addsf3+0x8>
 56a:	ba 17       	cp	r27, r26
 56c:	62 07       	cpc	r22, r18
 56e:	73 07       	cpc	r23, r19
 570:	84 07       	cpc	r24, r20
 572:	95 07       	cpc	r25, r21
 574:	18 f0       	brcs	.+6      	; 0x57c <__addsf3x+0x18>
 576:	71 f4       	brne	.+28     	; 0x594 <__addsf3x+0x30>
 578:	9e f5       	brtc	.+102    	; 0x5e0 <__addsf3x+0x7c>
 57a:	fa c0       	rjmp	.+500    	; 0x770 <__fp_zero>
 57c:	0e f4       	brtc	.+2      	; 0x580 <__addsf3x+0x1c>
 57e:	e0 95       	com	r30
 580:	0b 2e       	mov	r0, r27
 582:	ba 2f       	mov	r27, r26
 584:	a0 2d       	mov	r26, r0
 586:	0b 01       	movw	r0, r22
 588:	b9 01       	movw	r22, r18
 58a:	90 01       	movw	r18, r0
 58c:	0c 01       	movw	r0, r24
 58e:	ca 01       	movw	r24, r20
 590:	a0 01       	movw	r20, r0
 592:	11 24       	eor	r1, r1
 594:	ff 27       	eor	r31, r31
 596:	59 1b       	sub	r21, r25
 598:	99 f0       	breq	.+38     	; 0x5c0 <__addsf3x+0x5c>
 59a:	59 3f       	cpi	r21, 0xF9	; 249
 59c:	50 f4       	brcc	.+20     	; 0x5b2 <__addsf3x+0x4e>
 59e:	50 3e       	cpi	r21, 0xE0	; 224
 5a0:	68 f1       	brcs	.+90     	; 0x5fc <__addsf3x+0x98>
 5a2:	1a 16       	cp	r1, r26
 5a4:	f0 40       	sbci	r31, 0x00	; 0
 5a6:	a2 2f       	mov	r26, r18
 5a8:	23 2f       	mov	r18, r19
 5aa:	34 2f       	mov	r19, r20
 5ac:	44 27       	eor	r20, r20
 5ae:	58 5f       	subi	r21, 0xF8	; 248
 5b0:	f3 cf       	rjmp	.-26     	; 0x598 <__addsf3x+0x34>
 5b2:	46 95       	lsr	r20
 5b4:	37 95       	ror	r19
 5b6:	27 95       	ror	r18
 5b8:	a7 95       	ror	r26
 5ba:	f0 40       	sbci	r31, 0x00	; 0
 5bc:	53 95       	inc	r21
 5be:	c9 f7       	brne	.-14     	; 0x5b2 <__addsf3x+0x4e>
 5c0:	7e f4       	brtc	.+30     	; 0x5e0 <__addsf3x+0x7c>
 5c2:	1f 16       	cp	r1, r31
 5c4:	ba 0b       	sbc	r27, r26
 5c6:	62 0b       	sbc	r22, r18
 5c8:	73 0b       	sbc	r23, r19
 5ca:	84 0b       	sbc	r24, r20
 5cc:	ba f0       	brmi	.+46     	; 0x5fc <__addsf3x+0x98>
 5ce:	91 50       	subi	r25, 0x01	; 1
 5d0:	a1 f0       	breq	.+40     	; 0x5fa <__addsf3x+0x96>
 5d2:	ff 0f       	add	r31, r31
 5d4:	bb 1f       	adc	r27, r27
 5d6:	66 1f       	adc	r22, r22
 5d8:	77 1f       	adc	r23, r23
 5da:	88 1f       	adc	r24, r24
 5dc:	c2 f7       	brpl	.-16     	; 0x5ce <__addsf3x+0x6a>
 5de:	0e c0       	rjmp	.+28     	; 0x5fc <__addsf3x+0x98>
 5e0:	ba 0f       	add	r27, r26
 5e2:	62 1f       	adc	r22, r18
 5e4:	73 1f       	adc	r23, r19
 5e6:	84 1f       	adc	r24, r20
 5e8:	48 f4       	brcc	.+18     	; 0x5fc <__addsf3x+0x98>
 5ea:	87 95       	ror	r24
 5ec:	77 95       	ror	r23
 5ee:	67 95       	ror	r22
 5f0:	b7 95       	ror	r27
 5f2:	f7 95       	ror	r31
 5f4:	9e 3f       	cpi	r25, 0xFE	; 254
 5f6:	08 f0       	brcs	.+2      	; 0x5fa <__addsf3x+0x96>
 5f8:	b3 cf       	rjmp	.-154    	; 0x560 <__addsf3+0x1e>
 5fa:	93 95       	inc	r25
 5fc:	88 0f       	add	r24, r24
 5fe:	08 f0       	brcs	.+2      	; 0x602 <__addsf3x+0x9e>
 600:	99 27       	eor	r25, r25
 602:	ee 0f       	add	r30, r30
 604:	97 95       	ror	r25
 606:	87 95       	ror	r24
 608:	08 95       	ret

0000060a <__fixunssfsi>:
 60a:	98 d0       	rcall	.+304    	; 0x73c <__fp_splitA>
 60c:	88 f0       	brcs	.+34     	; 0x630 <__fixunssfsi+0x26>
 60e:	9f 57       	subi	r25, 0x7F	; 127
 610:	90 f0       	brcs	.+36     	; 0x636 <__fixunssfsi+0x2c>
 612:	b9 2f       	mov	r27, r25
 614:	99 27       	eor	r25, r25
 616:	b7 51       	subi	r27, 0x17	; 23
 618:	a0 f0       	brcs	.+40     	; 0x642 <__fixunssfsi+0x38>
 61a:	d1 f0       	breq	.+52     	; 0x650 <__fixunssfsi+0x46>
 61c:	66 0f       	add	r22, r22
 61e:	77 1f       	adc	r23, r23
 620:	88 1f       	adc	r24, r24
 622:	99 1f       	adc	r25, r25
 624:	1a f0       	brmi	.+6      	; 0x62c <__fixunssfsi+0x22>
 626:	ba 95       	dec	r27
 628:	c9 f7       	brne	.-14     	; 0x61c <__fixunssfsi+0x12>
 62a:	12 c0       	rjmp	.+36     	; 0x650 <__fixunssfsi+0x46>
 62c:	b1 30       	cpi	r27, 0x01	; 1
 62e:	81 f0       	breq	.+32     	; 0x650 <__fixunssfsi+0x46>
 630:	9f d0       	rcall	.+318    	; 0x770 <__fp_zero>
 632:	b1 e0       	ldi	r27, 0x01	; 1
 634:	08 95       	ret
 636:	9c c0       	rjmp	.+312    	; 0x770 <__fp_zero>
 638:	67 2f       	mov	r22, r23
 63a:	78 2f       	mov	r23, r24
 63c:	88 27       	eor	r24, r24
 63e:	b8 5f       	subi	r27, 0xF8	; 248
 640:	39 f0       	breq	.+14     	; 0x650 <__fixunssfsi+0x46>
 642:	b9 3f       	cpi	r27, 0xF9	; 249
 644:	cc f3       	brlt	.-14     	; 0x638 <__fixunssfsi+0x2e>
 646:	86 95       	lsr	r24
 648:	77 95       	ror	r23
 64a:	67 95       	ror	r22
 64c:	b3 95       	inc	r27
 64e:	d9 f7       	brne	.-10     	; 0x646 <__fixunssfsi+0x3c>
 650:	3e f4       	brtc	.+14     	; 0x660 <__fixunssfsi+0x56>
 652:	90 95       	com	r25
 654:	80 95       	com	r24
 656:	70 95       	com	r23
 658:	61 95       	neg	r22
 65a:	7f 4f       	sbci	r23, 0xFF	; 255
 65c:	8f 4f       	sbci	r24, 0xFF	; 255
 65e:	9f 4f       	sbci	r25, 0xFF	; 255
 660:	08 95       	ret

00000662 <__floatunsisf>:
 662:	e8 94       	clt
 664:	09 c0       	rjmp	.+18     	; 0x678 <__floatsisf+0x12>

00000666 <__floatsisf>:
 666:	97 fb       	bst	r25, 7
 668:	3e f4       	brtc	.+14     	; 0x678 <__floatsisf+0x12>
 66a:	90 95       	com	r25
 66c:	80 95       	com	r24
 66e:	70 95       	com	r23
 670:	61 95       	neg	r22
 672:	7f 4f       	sbci	r23, 0xFF	; 255
 674:	8f 4f       	sbci	r24, 0xFF	; 255
 676:	9f 4f       	sbci	r25, 0xFF	; 255
 678:	99 23       	and	r25, r25
 67a:	a9 f0       	breq	.+42     	; 0x6a6 <__floatsisf+0x40>
 67c:	f9 2f       	mov	r31, r25
 67e:	96 e9       	ldi	r25, 0x96	; 150
 680:	bb 27       	eor	r27, r27
 682:	93 95       	inc	r25
 684:	f6 95       	lsr	r31
 686:	87 95       	ror	r24
 688:	77 95       	ror	r23
 68a:	67 95       	ror	r22
 68c:	b7 95       	ror	r27
 68e:	f1 11       	cpse	r31, r1
 690:	f8 cf       	rjmp	.-16     	; 0x682 <__floatsisf+0x1c>
 692:	fa f4       	brpl	.+62     	; 0x6d2 <__floatsisf+0x6c>
 694:	bb 0f       	add	r27, r27
 696:	11 f4       	brne	.+4      	; 0x69c <__floatsisf+0x36>
 698:	60 ff       	sbrs	r22, 0
 69a:	1b c0       	rjmp	.+54     	; 0x6d2 <__floatsisf+0x6c>
 69c:	6f 5f       	subi	r22, 0xFF	; 255
 69e:	7f 4f       	sbci	r23, 0xFF	; 255
 6a0:	8f 4f       	sbci	r24, 0xFF	; 255
 6a2:	9f 4f       	sbci	r25, 0xFF	; 255
 6a4:	16 c0       	rjmp	.+44     	; 0x6d2 <__floatsisf+0x6c>
 6a6:	88 23       	and	r24, r24
 6a8:	11 f0       	breq	.+4      	; 0x6ae <__floatsisf+0x48>
 6aa:	96 e9       	ldi	r25, 0x96	; 150
 6ac:	11 c0       	rjmp	.+34     	; 0x6d0 <__floatsisf+0x6a>
 6ae:	77 23       	and	r23, r23
 6b0:	21 f0       	breq	.+8      	; 0x6ba <__floatsisf+0x54>
 6b2:	9e e8       	ldi	r25, 0x8E	; 142
 6b4:	87 2f       	mov	r24, r23
 6b6:	76 2f       	mov	r23, r22
 6b8:	05 c0       	rjmp	.+10     	; 0x6c4 <__floatsisf+0x5e>
 6ba:	66 23       	and	r22, r22
 6bc:	71 f0       	breq	.+28     	; 0x6da <__floatsisf+0x74>
 6be:	96 e8       	ldi	r25, 0x86	; 134
 6c0:	86 2f       	mov	r24, r22
 6c2:	70 e0       	ldi	r23, 0x00	; 0
 6c4:	60 e0       	ldi	r22, 0x00	; 0
 6c6:	2a f0       	brmi	.+10     	; 0x6d2 <__floatsisf+0x6c>
 6c8:	9a 95       	dec	r25
 6ca:	66 0f       	add	r22, r22
 6cc:	77 1f       	adc	r23, r23
 6ce:	88 1f       	adc	r24, r24
 6d0:	da f7       	brpl	.-10     	; 0x6c8 <__floatsisf+0x62>
 6d2:	88 0f       	add	r24, r24
 6d4:	96 95       	lsr	r25
 6d6:	87 95       	ror	r24
 6d8:	97 f9       	bld	r25, 7
 6da:	08 95       	ret

000006dc <__fp_inf>:
 6dc:	97 f9       	bld	r25, 7
 6de:	9f 67       	ori	r25, 0x7F	; 127
 6e0:	80 e8       	ldi	r24, 0x80	; 128
 6e2:	70 e0       	ldi	r23, 0x00	; 0
 6e4:	60 e0       	ldi	r22, 0x00	; 0
 6e6:	08 95       	ret

000006e8 <__fp_nan>:
 6e8:	9f ef       	ldi	r25, 0xFF	; 255
 6ea:	80 ec       	ldi	r24, 0xC0	; 192
 6ec:	08 95       	ret

000006ee <__fp_pscA>:
 6ee:	00 24       	eor	r0, r0
 6f0:	0a 94       	dec	r0
 6f2:	16 16       	cp	r1, r22
 6f4:	17 06       	cpc	r1, r23
 6f6:	18 06       	cpc	r1, r24
 6f8:	09 06       	cpc	r0, r25
 6fa:	08 95       	ret

000006fc <__fp_pscB>:
 6fc:	00 24       	eor	r0, r0
 6fe:	0a 94       	dec	r0
 700:	12 16       	cp	r1, r18
 702:	13 06       	cpc	r1, r19
 704:	14 06       	cpc	r1, r20
 706:	05 06       	cpc	r0, r21
 708:	08 95       	ret

0000070a <__fp_round>:
 70a:	09 2e       	mov	r0, r25
 70c:	03 94       	inc	r0
 70e:	00 0c       	add	r0, r0
 710:	11 f4       	brne	.+4      	; 0x716 <__fp_round+0xc>
 712:	88 23       	and	r24, r24
 714:	52 f0       	brmi	.+20     	; 0x72a <__fp_round+0x20>
 716:	bb 0f       	add	r27, r27
 718:	40 f4       	brcc	.+16     	; 0x72a <__fp_round+0x20>
 71a:	bf 2b       	or	r27, r31
 71c:	11 f4       	brne	.+4      	; 0x722 <__fp_round+0x18>
 71e:	60 ff       	sbrs	r22, 0
 720:	04 c0       	rjmp	.+8      	; 0x72a <__fp_round+0x20>
 722:	6f 5f       	subi	r22, 0xFF	; 255
 724:	7f 4f       	sbci	r23, 0xFF	; 255
 726:	8f 4f       	sbci	r24, 0xFF	; 255
 728:	9f 4f       	sbci	r25, 0xFF	; 255
 72a:	08 95       	ret

0000072c <__fp_split3>:
 72c:	57 fd       	sbrc	r21, 7
 72e:	90 58       	subi	r25, 0x80	; 128
 730:	44 0f       	add	r20, r20
 732:	55 1f       	adc	r21, r21
 734:	59 f0       	breq	.+22     	; 0x74c <__fp_splitA+0x10>
 736:	5f 3f       	cpi	r21, 0xFF	; 255
 738:	71 f0       	breq	.+28     	; 0x756 <__fp_splitA+0x1a>
 73a:	47 95       	ror	r20

0000073c <__fp_splitA>:
 73c:	88 0f       	add	r24, r24
 73e:	97 fb       	bst	r25, 7
 740:	99 1f       	adc	r25, r25
 742:	61 f0       	breq	.+24     	; 0x75c <__fp_splitA+0x20>
 744:	9f 3f       	cpi	r25, 0xFF	; 255
 746:	79 f0       	breq	.+30     	; 0x766 <__fp_splitA+0x2a>
 748:	87 95       	ror	r24
 74a:	08 95       	ret
 74c:	12 16       	cp	r1, r18
 74e:	13 06       	cpc	r1, r19
 750:	14 06       	cpc	r1, r20
 752:	55 1f       	adc	r21, r21
 754:	f2 cf       	rjmp	.-28     	; 0x73a <__fp_split3+0xe>
 756:	46 95       	lsr	r20
 758:	f1 df       	rcall	.-30     	; 0x73c <__fp_splitA>
 75a:	08 c0       	rjmp	.+16     	; 0x76c <__fp_splitA+0x30>
 75c:	16 16       	cp	r1, r22
 75e:	17 06       	cpc	r1, r23
 760:	18 06       	cpc	r1, r24
 762:	99 1f       	adc	r25, r25
 764:	f1 cf       	rjmp	.-30     	; 0x748 <__fp_splitA+0xc>
 766:	86 95       	lsr	r24
 768:	71 05       	cpc	r23, r1
 76a:	61 05       	cpc	r22, r1
 76c:	08 94       	sec
 76e:	08 95       	ret

00000770 <__fp_zero>:
 770:	e8 94       	clt

00000772 <__fp_szero>:
 772:	bb 27       	eor	r27, r27
 774:	66 27       	eor	r22, r22
 776:	77 27       	eor	r23, r23
 778:	cb 01       	movw	r24, r22
 77a:	97 f9       	bld	r25, 7
 77c:	08 95       	ret

0000077e <__mulsf3>:
 77e:	0a d0       	rcall	.+20     	; 0x794 <__mulsf3x>
 780:	c4 cf       	rjmp	.-120    	; 0x70a <__fp_round>
 782:	b5 df       	rcall	.-150    	; 0x6ee <__fp_pscA>
 784:	28 f0       	brcs	.+10     	; 0x790 <__mulsf3+0x12>
 786:	ba df       	rcall	.-140    	; 0x6fc <__fp_pscB>
 788:	18 f0       	brcs	.+6      	; 0x790 <__mulsf3+0x12>
 78a:	95 23       	and	r25, r21
 78c:	09 f0       	breq	.+2      	; 0x790 <__mulsf3+0x12>
 78e:	a6 cf       	rjmp	.-180    	; 0x6dc <__fp_inf>
 790:	ab cf       	rjmp	.-170    	; 0x6e8 <__fp_nan>
 792:	ef cf       	rjmp	.-34     	; 0x772 <__fp_szero>

00000794 <__mulsf3x>:
 794:	cb df       	rcall	.-106    	; 0x72c <__fp_split3>
 796:	a8 f3       	brcs	.-22     	; 0x782 <__mulsf3+0x4>

00000798 <__mulsf3_pse>:
 798:	99 23       	and	r25, r25
 79a:	d9 f3       	breq	.-10     	; 0x792 <__mulsf3+0x14>
 79c:	55 23       	and	r21, r21
 79e:	c9 f3       	breq	.-14     	; 0x792 <__mulsf3+0x14>
 7a0:	95 0f       	add	r25, r21
 7a2:	50 e0       	ldi	r21, 0x00	; 0
 7a4:	55 1f       	adc	r21, r21
 7a6:	aa 27       	eor	r26, r26
 7a8:	ee 27       	eor	r30, r30
 7aa:	ff 27       	eor	r31, r31
 7ac:	bb 27       	eor	r27, r27
 7ae:	00 24       	eor	r0, r0
 7b0:	08 94       	sec
 7b2:	67 95       	ror	r22
 7b4:	20 f4       	brcc	.+8      	; 0x7be <__mulsf3_pse+0x26>
 7b6:	e2 0f       	add	r30, r18
 7b8:	f3 1f       	adc	r31, r19
 7ba:	b4 1f       	adc	r27, r20
 7bc:	0a 1e       	adc	r0, r26
 7be:	22 0f       	add	r18, r18
 7c0:	33 1f       	adc	r19, r19
 7c2:	44 1f       	adc	r20, r20
 7c4:	aa 1f       	adc	r26, r26
 7c6:	66 95       	lsr	r22
 7c8:	a9 f7       	brne	.-22     	; 0x7b4 <__mulsf3_pse+0x1c>
 7ca:	77 95       	ror	r23
 7cc:	30 f4       	brcc	.+12     	; 0x7da <__mulsf3_pse+0x42>
 7ce:	f3 0f       	add	r31, r19
 7d0:	b4 1f       	adc	r27, r20
 7d2:	0a 1e       	adc	r0, r26
 7d4:	12 1e       	adc	r1, r18
 7d6:	08 f4       	brcc	.+2      	; 0x7da <__mulsf3_pse+0x42>
 7d8:	63 95       	inc	r22
 7da:	33 0f       	add	r19, r19
 7dc:	44 1f       	adc	r20, r20
 7de:	aa 1f       	adc	r26, r26
 7e0:	22 1f       	adc	r18, r18
 7e2:	76 95       	lsr	r23
 7e4:	99 f7       	brne	.-26     	; 0x7cc <__mulsf3_pse+0x34>
 7e6:	87 95       	ror	r24
 7e8:	20 f4       	brcc	.+8      	; 0x7f2 <__mulsf3_pse+0x5a>
 7ea:	b4 0f       	add	r27, r20
 7ec:	0a 1e       	adc	r0, r26
 7ee:	12 1e       	adc	r1, r18
 7f0:	63 1f       	adc	r22, r19
 7f2:	44 0f       	add	r20, r20
 7f4:	aa 1f       	adc	r26, r26
 7f6:	22 1f       	adc	r18, r18
 7f8:	33 1f       	adc	r19, r19
 7fa:	86 95       	lsr	r24
 7fc:	a9 f7       	brne	.-22     	; 0x7e8 <__mulsf3_pse+0x50>
 7fe:	86 2f       	mov	r24, r22
 800:	71 2d       	mov	r23, r1
 802:	60 2d       	mov	r22, r0
 804:	11 24       	eor	r1, r1
 806:	9f 57       	subi	r25, 0x7F	; 127
 808:	50 40       	sbci	r21, 0x00	; 0
 80a:	8a f0       	brmi	.+34     	; 0x82e <__mulsf3_pse+0x96>
 80c:	e1 f0       	breq	.+56     	; 0x846 <__mulsf3_pse+0xae>
 80e:	88 23       	and	r24, r24
 810:	4a f0       	brmi	.+18     	; 0x824 <__mulsf3_pse+0x8c>
 812:	ee 0f       	add	r30, r30
 814:	ff 1f       	adc	r31, r31
 816:	bb 1f       	adc	r27, r27
 818:	66 1f       	adc	r22, r22
 81a:	77 1f       	adc	r23, r23
 81c:	88 1f       	adc	r24, r24
 81e:	91 50       	subi	r25, 0x01	; 1
 820:	50 40       	sbci	r21, 0x00	; 0
 822:	a9 f7       	brne	.-22     	; 0x80e <__mulsf3_pse+0x76>
 824:	9e 3f       	cpi	r25, 0xFE	; 254
 826:	51 05       	cpc	r21, r1
 828:	70 f0       	brcs	.+28     	; 0x846 <__mulsf3_pse+0xae>
 82a:	58 cf       	rjmp	.-336    	; 0x6dc <__fp_inf>
 82c:	a2 cf       	rjmp	.-188    	; 0x772 <__fp_szero>
 82e:	5f 3f       	cpi	r21, 0xFF	; 255
 830:	ec f3       	brlt	.-6      	; 0x82c <__mulsf3_pse+0x94>
 832:	98 3e       	cpi	r25, 0xE8	; 232
 834:	dc f3       	brlt	.-10     	; 0x82c <__mulsf3_pse+0x94>
 836:	86 95       	lsr	r24
 838:	77 95       	ror	r23
 83a:	67 95       	ror	r22
 83c:	b7 95       	ror	r27
 83e:	f7 95       	ror	r31
 840:	e7 95       	ror	r30
 842:	9f 5f       	subi	r25, 0xFF	; 255
 844:	c1 f7       	brne	.-16     	; 0x836 <__mulsf3_pse+0x9e>
 846:	fe 2b       	or	r31, r30
 848:	88 0f       	add	r24, r24
 84a:	91 1d       	adc	r25, r1
 84c:	96 95       	lsr	r25
 84e:	87 95       	ror	r24
 850:	97 f9       	bld	r25, 7
 852:	08 95       	ret

00000854 <__udivmodhi4>:
 854:	aa 1b       	sub	r26, r26
 856:	bb 1b       	sub	r27, r27
 858:	51 e1       	ldi	r21, 0x11	; 17
 85a:	07 c0       	rjmp	.+14     	; 0x86a <__udivmodhi4_ep>

0000085c <__udivmodhi4_loop>:
 85c:	aa 1f       	adc	r26, r26
 85e:	bb 1f       	adc	r27, r27
 860:	a6 17       	cp	r26, r22
 862:	b7 07       	cpc	r27, r23
 864:	10 f0       	brcs	.+4      	; 0x86a <__udivmodhi4_ep>
 866:	a6 1b       	sub	r26, r22
 868:	b7 0b       	sbc	r27, r23

0000086a <__udivmodhi4_ep>:
 86a:	88 1f       	adc	r24, r24
 86c:	99 1f       	adc	r25, r25
 86e:	5a 95       	dec	r21
 870:	a9 f7       	brne	.-22     	; 0x85c <__udivmodhi4_loop>
 872:	80 95       	com	r24
 874:	90 95       	com	r25
 876:	bc 01       	movw	r22, r24
 878:	cd 01       	movw	r24, r26
 87a:	08 95       	ret

0000087c <_exit>:
 87c:	f8 94       	cli

0000087e <__stop_program>:
 87e:	ff cf       	rjmp	.-2      	; 0x87e <__stop_program>
